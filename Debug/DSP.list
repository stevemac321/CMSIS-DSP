
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015930  08007650  08007650  00008650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf80  0801cf80  0001e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf80  0801cf80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf88  0801cf88  0001e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf88  0801cf88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cf8c  0801cf8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801cf90  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001d4  0801d164  0001e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200005e8  0801d164  0001e5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b764  00000000  00000000  0001e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  00029968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ac  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001854f  00000000  00000000  0002ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c797  00000000  00000000  00044fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009590e  00000000  00000000  00051752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  000e7060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  000e7114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ea680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002140  00000000  00000000  000ea6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000100  00000000  00000000  000ec80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007638 	.word	0x08007638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007638 	.word	0x08007638

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <strlen>:
 8000340:	4603      	mov	r3, r0
 8000342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000346:	2a00      	cmp	r2, #0
 8000348:	d1fb      	bne.n	8000342 <strlen+0x2>
 800034a:	1a18      	subs	r0, r3, r0
 800034c:	3801      	subs	r0, #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f8c:	d02c      	beq.n	8000fe8 <arm_cfft_init_f32+0x80>
 8000f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f92:	f300 809e 	bgt.w	80010d2 <arm_cfft_init_f32+0x16a>
 8000f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f9a:	d032      	beq.n	8001002 <arm_cfft_init_f32+0x9a>
 8000f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fa0:	f300 8097 	bgt.w	80010d2 <arm_cfft_init_f32+0x16a>
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa8:	d038      	beq.n	800101c <arm_cfft_init_f32+0xb4>
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fae:	f300 8090 	bgt.w	80010d2 <arm_cfft_init_f32+0x16a>
 8000fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fb6:	d03e      	beq.n	8001036 <arm_cfft_init_f32+0xce>
 8000fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fbc:	f300 8089 	bgt.w	80010d2 <arm_cfft_init_f32+0x16a>
 8000fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fc4:	d044      	beq.n	8001050 <arm_cfft_init_f32+0xe8>
 8000fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fca:	f300 8082 	bgt.w	80010d2 <arm_cfft_init_f32+0x16a>
 8000fce:	2b80      	cmp	r3, #128	@ 0x80
 8000fd0:	d04b      	beq.n	800106a <arm_cfft_init_f32+0x102>
 8000fd2:	2b80      	cmp	r3, #128	@ 0x80
 8000fd4:	dc7d      	bgt.n	80010d2 <arm_cfft_init_f32+0x16a>
 8000fd6:	2b40      	cmp	r3, #64	@ 0x40
 8000fd8:	d054      	beq.n	8001084 <arm_cfft_init_f32+0x11c>
 8000fda:	2b40      	cmp	r3, #64	@ 0x40
 8000fdc:	dc79      	bgt.n	80010d2 <arm_cfft_init_f32+0x16a>
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d06a      	beq.n	80010b8 <arm_cfft_init_f32+0x150>
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d05b      	beq.n	800109e <arm_cfft_init_f32+0x136>
 8000fe6:	e074      	b.n	80010d2 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80010e8 <arm_cfft_init_f32+0x180>)
 8000fea:	899a      	ldrh	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	819a      	strh	r2, [r3, #12]
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80010e8 <arm_cfft_init_f32+0x180>)
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <arm_cfft_init_f32+0x180>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	605a      	str	r2, [r3, #4]
            break;
 8001000:	e06a      	b.n	80010d8 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8001002:	4b3a      	ldr	r3, [pc, #232]	@ (80010ec <arm_cfft_init_f32+0x184>)
 8001004:	899a      	ldrh	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	819a      	strh	r2, [r3, #12]
 800100a:	4b38      	ldr	r3, [pc, #224]	@ (80010ec <arm_cfft_init_f32+0x184>)
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	4b36      	ldr	r3, [pc, #216]	@ (80010ec <arm_cfft_init_f32+0x184>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	605a      	str	r2, [r3, #4]

            break;
 800101a:	e05d      	b.n	80010d8 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <arm_cfft_init_f32+0x188>)
 800101e:	899a      	ldrh	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	819a      	strh	r2, [r3, #12]
 8001024:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <arm_cfft_init_f32+0x188>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <arm_cfft_init_f32+0x188>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]

            break;
 8001034:	e050      	b.n	80010d8 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <arm_cfft_init_f32+0x18c>)
 8001038:	899a      	ldrh	r2, [r3, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	819a      	strh	r2, [r3, #12]
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <arm_cfft_init_f32+0x18c>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <arm_cfft_init_f32+0x18c>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
            break;
 800104e:	e043      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <arm_cfft_init_f32+0x190>)
 8001052:	899a      	ldrh	r2, [r3, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	819a      	strh	r2, [r3, #12]
 8001058:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <arm_cfft_init_f32+0x190>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <arm_cfft_init_f32+0x190>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	605a      	str	r2, [r3, #4]
            break;
 8001068:	e036      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <arm_cfft_init_f32+0x194>)
 800106c:	899a      	ldrh	r2, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	819a      	strh	r2, [r3, #12]
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <arm_cfft_init_f32+0x194>)
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <arm_cfft_init_f32+0x194>)
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]
            break;
 8001082:	e029      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <arm_cfft_init_f32+0x198>)
 8001086:	899a      	ldrh	r2, [r3, #12]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	819a      	strh	r2, [r3, #12]
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <arm_cfft_init_f32+0x198>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <arm_cfft_init_f32+0x198>)
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	605a      	str	r2, [r3, #4]
            break;
 800109c:	e01c      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <arm_cfft_init_f32+0x19c>)
 80010a0:	899a      	ldrh	r2, [r3, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	819a      	strh	r2, [r3, #12]
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <arm_cfft_init_f32+0x19c>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <arm_cfft_init_f32+0x19c>)
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	605a      	str	r2, [r3, #4]
            break;
 80010b6:	e00f      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <arm_cfft_init_f32+0x1a0>)
 80010ba:	899a      	ldrh	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <arm_cfft_init_f32+0x1a0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <arm_cfft_init_f32+0x1a0>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	605a      	str	r2, [r3, #4]
            break;
 80010d0:	e002      	b.n	80010d8 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80010d2:	23ff      	movs	r3, #255	@ 0xff
 80010d4:	73fb      	strb	r3, [r7, #15]
            break;
 80010d6:	bf00      	nop
        }


        return (status);
 80010d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	080077a4 	.word	0x080077a4
 80010ec:	08007734 	.word	0x08007734
 80010f0:	08007774 	.word	0x08007774
 80010f4:	08007794 	.word	0x08007794
 80010f8:	08007724 	.word	0x08007724
 80010fc:	08007784 	.word	0x08007784
 8001100:	08007764 	.word	0x08007764
 8001104:	08007754 	.word	0x08007754
 8001108:	08007744 	.word	0x08007744

0800110c <create_graph>:
#include "graph.h"
// graph operations


void create_graph(struct Graph *g, const int sz) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    g->numVertices = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    g->graph_capacity=sz;
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <add_vertex>:
// Internal function to add a vertex
void add_vertex(struct Graph* g, const float mag) {
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	ed87 0a00 	vstr	s0, [r7]
    // Ensure we don't exceed the array size
    if (g->numVertices >= g->graph_capacity) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800114a:	429a      	cmp	r2, r3
 800114c:	d242      	bcs.n	80011d4 <add_vertex+0xa2>
        // Handle full graph (e.g., return or log error)
        return;
    }
	g->vertices[g->numVertices].magnitude = mag;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	601a      	str	r2, [r3, #0]
	g->vertices[g->numVertices].color = WHITE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3304      	adds	r3, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
	g->vertices[g->numVertices].distance = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3308      	adds	r3, #8
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
	g->vertices[g->numVertices].parent = 0;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	330c      	adds	r3, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    // Initialize the adjacency list to 0 (no connections initially)
    g->vertices[g->numVertices].adjList = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3310      	adds	r3, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]

    // Increment the number of vertices after initialization
    g->numVertices++;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80011d2:	e000      	b.n	80011d6 <add_vertex+0xa4>
        return;
 80011d4:	bf00      	nop
}
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <add_edge>:

// Internal function to add an edge between two vertices
void add_edge(struct Graph* g, size_t v, size_t w) {
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
    if (v >= g->numVertices || w >= g->numVertices) return;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d22a      	bcs.n	800124e <add_edge+0x6e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	d224      	bcs.n	800124e <add_edge+0x6e>


    // Set the edge bit in the adjacency list
    g->vertices[v].adjList  |= (1 << (w % g->graph_capacity));
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3310      	adds	r3, #16
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b219      	sxth	r1, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	fbb3 f0f2 	udiv	r0, r3, r2
 8001224:	fb00 f202 	mul.w	r2, r0, r2
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	2201      	movs	r2, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	b21b      	sxth	r3, r3
 8001232:	430b      	orrs	r3, r1
 8001234:	b21b      	sxth	r3, r3
 8001236:	b298      	uxth	r0, r3
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3310      	adds	r3, #16
 8001248:	4602      	mov	r2, r0
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	e000      	b.n	8001250 <add_edge+0x70>
    if (v >= g->numVertices || w >= g->numVertices) return;
 800124e:	bf00      	nop
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f001 f9c9 	bl	80025f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f80d 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 f8b3 	bl	80013d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800126a:	f000 f91f 	bl	80014ac <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800126e:	f000 f873 	bl	8001358 <MX_USART2_UART_Init>

  test_fft();
 8001272:	f000 f97f 	bl	8001574 <test_fft>
  analyze_results();
 8001276:	f000 fa63 	bl	8001740 <analyze_results>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <main+0x20>
	...

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	@ 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f004 fb20 	bl	80058d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <SystemClock_Config+0xd0>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <SystemClock_Config+0xd4>)
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <SystemClock_Config+0xd4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e8:	2310      	movs	r3, #16
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012f4:	2310      	movs	r3, #16
 80012f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fe:	2304      	movs	r3, #4
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001302:	2307      	movs	r3, #7
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fc68 	bl	8002be0 <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001316:	f000 fb11 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	2302      	movs	r3, #2
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f001 feca 	bl	80030d0 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001342:	f000 fafb 	bl	800193c <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	@ 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__HAL_RCC_USART2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_USART2_UART_Init+0x6c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <MX_USART2_UART_Init+0x6c>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <MX_USART2_UART_Init+0x6c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <MX_USART2_UART_Init+0x74>)
 800137e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 8001382:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001386:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 800139c:	220c      	movs	r2, #12
 800139e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ac:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_USART2_UART_Init+0x70>)
 80013ae:	f002 f8af 	bl	8003510 <HAL_UART_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 80013b8:	f000 fac0 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	200001f0 	.word	0x200001f0
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a2c      	ldr	r2, [pc, #176]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a25      	ldr	r2, [pc, #148]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2120      	movs	r1, #32
 800145a:	4812      	ldr	r0, [pc, #72]	@ (80014a4 <MX_GPIO_Init+0xd4>)
 800145c:	f001 fba6 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001466:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_GPIO_Init+0xd8>)
 8001478:	f001 fa14 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800147c:	2320      	movs	r3, #32
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_GPIO_Init+0xd4>)
 8001494:	f001 fa06 	bl	80028a4 <HAL_GPIO_Init>
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020800 	.word	0x40020800

080014ac <MX_ADC1_Init>:

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE BEGIN ADC1_Init 2 */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */
	  __HAL_RCC_ADC1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <MX_ADC1_Init+0xb8>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <MX_ADC1_Init+0xb8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <MX_ADC1_Init+0xb8>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014de:	4a23      	ldr	r2, [pc, #140]	@ (800156c <MX_ADC1_Init+0xc0>)
 80014e0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <MX_ADC1_Init+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_ADC1_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <MX_ADC1_Init+0xbc>)
 800150a:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <MX_ADC1_Init+0xc4>)
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_ADC1_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_ADC1_Init+0xbc>)
 8001516:	2201      	movs	r2, #1
 8001518:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_ADC1_Init+0xbc>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_ADC1_Init+0xbc>)
 8001524:	2201      	movs	r2, #1
 8001526:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	480f      	ldr	r0, [pc, #60]	@ (8001568 <MX_ADC1_Init+0xbc>)
 800152a:	f000 faf1 	bl	8001b10 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x8c>
	{
	  Error_Handler();
 8001534:	f000 fa02 	bl	800193c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001538:	2311      	movs	r3, #17
 800153a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	@ (8001568 <MX_ADC1_Init+0xbc>)
 800154c:	f000 fcae 	bl	8001eac <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0xae>
	{
	  Error_Handler();
 8001556:	f000 f9f1 	bl	800193c <Error_Handler>
	}
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	20000238 	.word	0x20000238
 800156c:	40012000 	.word	0x40012000
 8001570:	0f000001 	.word	0x0f000001

08001574 <test_fft>:



/* USER CODE BEGIN 4 */
static void test_fft()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
	for (int i = 0; i < FFT_LENGTH * 2; i += 2) {
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e025      	b.n	80015cc <test_fft+0x58>
	        // Capture ADC data for real part
	        HAL_ADC_Start(&hadc1);
 8001580:	4821      	ldr	r0, [pc, #132]	@ (8001608 <test_fft+0x94>)
 8001582:	f000 fb13 	bl	8001bac <HAL_ADC_Start>
	        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001586:	f04f 31ff 	mov.w	r1, #4294967295
 800158a:	481f      	ldr	r0, [pc, #124]	@ (8001608 <test_fft+0x94>)
 800158c:	f000 fbf5 	bl	8001d7a <HAL_ADC_PollForConversion>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <test_fft+0x3c>
	            FFT_Input_Q15_f[i] = (float32_t)HAL_ADC_GetValue(&hadc1);  // Real part
 8001596:	481c      	ldr	r0, [pc, #112]	@ (8001608 <test_fft+0x94>)
 8001598:	f000 fc7a 	bl	8001e90 <HAL_ADC_GetValue>
 800159c:	ee07 0a90 	vmov	s15, r0
 80015a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <test_fft+0x98>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	edc3 7a00 	vstr	s15, [r3]
	        }
	        HAL_ADC_Stop(&hadc1);
 80015b0:	4815      	ldr	r0, [pc, #84]	@ (8001608 <test_fft+0x94>)
 80015b2:	f000 fbaf 	bl	8001d14 <HAL_ADC_Stop>

	        // Set imaginary part to 0
	        FFT_Input_Q15_f[i + 1] = 0.0f;  // Imaginary part
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <test_fft+0x98>)
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_LENGTH * 2; i += 2) {
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3302      	adds	r3, #2
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	ddd6      	ble.n	8001580 <test_fft+0xc>
	    }
		print_voltage_samples();
 80015d2:	f000 f81f 	bl	8001614 <print_voltage_samples>
		arm_cfft_instance_f32 S;
		arm_cfft_init_f32(&S, FFT_LENGTH);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2110      	movs	r1, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fcc4 	bl	8000f68 <arm_cfft_init_f32>
	    arm_cfft_f32(&S, FFT_Input_Q15_f, 0, 1);  // Perform FFT (forward, bit-reversal enabled)
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	2301      	movs	r3, #1
 80015e4:	2200      	movs	r2, #0
 80015e6:	4909      	ldr	r1, [pc, #36]	@ (800160c <test_fft+0x98>)
 80015e8:	f002 fece 	bl	8004388 <arm_cfft_f32>
	    print_fft();
 80015ec:	f000 f848 	bl	8001680 <print_fft>
	    // You can now calculate magnitudes if needed
	    arm_cmplx_mag_f32(FFT_Input_Q15_f, fftOutput, FFT_LENGTH);
 80015f0:	2210      	movs	r2, #16
 80015f2:	4907      	ldr	r1, [pc, #28]	@ (8001610 <test_fft+0x9c>)
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <test_fft+0x98>)
 80015f6:	f002 ff41 	bl	800447c <arm_cmplx_mag_f32>
	    print_mag();
 80015fa:	f000 f879 	bl	80016f0 <print_mag>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000238 	.word	0x20000238
 800160c:	20000280 	.word	0x20000280
 8001610:	20000300 	.word	0x20000300

08001614 <print_voltage_samples>:
void print_voltage_samples()
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
	printf("\nVoltage Samples:\r\n");
 800161a:	4816      	ldr	r0, [pc, #88]	@ (8001674 <print_voltage_samples+0x60>)
 800161c:	f004 f87a 	bl	8005714 <puts>
	for(size_t i = 0; i < (FFT_LENGTH * 2); i += 2) {
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	e01e      	b.n	8001664 <print_voltage_samples+0x50>
		printf("Real: %.6f, Imag: %.6f\r\n", FFT_Input_Q15_f[i], FFT_Input_Q15_f[i+1] );
 8001626:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <print_voltage_samples+0x64>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fff1 	bl	8000618 <__aeabi_f2d>
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3301      	adds	r3, #1
 800163e:	4a0e      	ldr	r2, [pc, #56]	@ (8001678 <print_voltage_samples+0x64>)
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ffe6 	bl	8000618 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9cd 2300 	strd	r2, r3, [sp]
 8001654:	4622      	mov	r2, r4
 8001656:	462b      	mov	r3, r5
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <print_voltage_samples+0x68>)
 800165a:	f003 fff3 	bl	8005644 <iprintf>
	for(size_t i = 0; i < (FFT_LENGTH * 2); i += 2) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3302      	adds	r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b1f      	cmp	r3, #31
 8001668:	d9dd      	bls.n	8001626 <print_voltage_samples+0x12>
}

}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	08007650 	.word	0x08007650
 8001678:	20000280 	.word	0x20000280
 800167c:	08007664 	.word	0x08007664

08001680 <print_fft>:
void print_fft()
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
	printf("\nFFT Results\r\n");
 8001686:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <print_fft+0x64>)
 8001688:	f004 f844 	bl	8005714 <puts>
	for(size_t i = 0; i < (FFT_LENGTH * 2); i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	e01f      	b.n	80016d2 <print_fft+0x52>
		printf("Real: %.6f, Imag: %.6f\r\n", FFT_Input_Q15_f[i], FFT_Input_Q15_f[i++] );
 8001692:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <print_fft+0x68>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ffbb 	bl	8000618 <__aeabi_f2d>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <print_fft+0x68>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ffaf 	bl	8000618 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9cd 2300 	strd	r2, r3, [sp]
 80016c2:	4622      	mov	r2, r4
 80016c4:	462b      	mov	r3, r5
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <print_fft+0x6c>)
 80016c8:	f003 ffbc 	bl	8005644 <iprintf>
	for(size_t i = 0; i < (FFT_LENGTH * 2); i++) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3301      	adds	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	d9dc      	bls.n	8001692 <print_fft+0x12>
	}
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bdb0      	pop	{r4, r5, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	08007680 	.word	0x08007680
 80016e8:	20000280 	.word	0x20000280
 80016ec:	08007664 	.word	0x08007664

080016f0 <print_mag>:
void print_mag()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	printf("\nMag Results\r\n");
 80016f6:	480f      	ldr	r0, [pc, #60]	@ (8001734 <print_mag+0x44>)
 80016f8:	f004 f80c 	bl	8005714 <puts>
	for(size_t i = 0; i < (FFT_LENGTH); i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	e00f      	b.n	8001722 <print_mag+0x32>
		printf("Mag: %.6f\r\n", fftOutput[i] );
 8001702:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <print_mag+0x48>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff83 	bl	8000618 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4809      	ldr	r0, [pc, #36]	@ (800173c <print_mag+0x4c>)
 8001718:	f003 ff94 	bl	8005644 <iprintf>
	for(size_t i = 0; i < (FFT_LENGTH); i++) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d9ec      	bls.n	8001702 <print_mag+0x12>
	}
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	08007690 	.word	0x08007690
 8001738:	20000300 	.word	0x20000300
 800173c:	080076a0 	.word	0x080076a0

08001740 <analyze_results>:
void analyze_results()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
	priority_queue_from_array(&pq, fftOutput, FFT_LENGTH);
 8001746:	2210      	movs	r2, #16
 8001748:	494b      	ldr	r1, [pc, #300]	@ (8001878 <analyze_results+0x138>)
 800174a:	484c      	ldr	r0, [pc, #304]	@ (800187c <analyze_results+0x13c>)
 800174c:	f000 f987 	bl	8001a5e <priority_queue_from_array>
	priority_queue_build_max_heap(&pq);
 8001750:	484a      	ldr	r0, [pc, #296]	@ (800187c <analyze_results+0x13c>)
 8001752:	f000 f999 	bl	8001a88 <priority_queue_build_max_heap>
	priority_queue_print_heap(&pq);
 8001756:	4849      	ldr	r0, [pc, #292]	@ (800187c <analyze_results+0x13c>)
 8001758:	f000 f9b0 	bl	8001abc <priority_queue_print_heap>

	create_graph(&graph, FFT_LENGTH);
 800175c:	2110      	movs	r1, #16
 800175e:	4848      	ldr	r0, [pc, #288]	@ (8001880 <analyze_results+0x140>)
 8001760:	f7ff fcd4 	bl	800110c <create_graph>
	for(int i=0; i < pq.heap_size; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e00e      	b.n	8001788 <analyze_results+0x48>
			add_vertex(&graph, pq.heap[i]);
 800176a:	4b44      	ldr	r3, [pc, #272]	@ (800187c <analyze_results+0x13c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	4840      	ldr	r0, [pc, #256]	@ (8001880 <analyze_results+0x140>)
 800177e:	f7ff fcd8 	bl	8001132 <add_vertex>
	for(int i=0; i < pq.heap_size; i++) {
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <analyze_results+0x13c>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	d8eb      	bhi.n	800176a <analyze_results+0x2a>
		}
		for (int i = 1; i < graph.graph_capacity - 1; i++) {
 8001792:	2301      	movs	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e060      	b.n	800185a <analyze_results+0x11a>
		float prev_val = graph.vertices[i - 1].magnitude;  // Assume `magnitude` is a field in each vertex
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	4938      	ldr	r1, [pc, #224]	@ (8001880 <analyze_results+0x140>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
		float curr_val = graph.vertices[i].magnitude;
 80017ac:	4934      	ldr	r1, [pc, #208]	@ (8001880 <analyze_results+0x140>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60bb      	str	r3, [r7, #8]
		float next_val = graph.vertices[i + 1].magnitude;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	492f      	ldr	r1, [pc, #188]	@ (8001880 <analyze_results+0x140>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	607b      	str	r3, [r7, #4]

		// Check for peak
		if (curr_val > prev_val && curr_val > next_val) {
 80017d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	dd17      	ble.n	8001814 <analyze_results+0xd4>
 80017e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	dd0e      	ble.n	8001814 <analyze_results+0xd4>
			// Add edge between current peak and its previous valley
			add_edge(&graph, i, i - 1);
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	461a      	mov	r2, r3
 80017fe:	4820      	ldr	r0, [pc, #128]	@ (8001880 <analyze_results+0x140>)
 8001800:	f7ff fcee 	bl	80011e0 <add_edge>
			// Add edge between current peak and its next valley
			add_edge(&graph, i, i + 1);
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3301      	adds	r3, #1
 800180a:	461a      	mov	r2, r3
 800180c:	481c      	ldr	r0, [pc, #112]	@ (8001880 <analyze_results+0x140>)
 800180e:	f7ff fce7 	bl	80011e0 <add_edge>
 8001812:	e01f      	b.n	8001854 <analyze_results+0x114>
		}
		// Check for valley
		else if (curr_val < prev_val && curr_val < next_val) {
 8001814:	ed97 7a02 	vldr	s14, [r7, #8]
 8001818:	edd7 7a03 	vldr	s15, [r7, #12]
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d516      	bpl.n	8001854 <analyze_results+0x114>
 8001826:	ed97 7a02 	vldr	s14, [r7, #8]
 800182a:	edd7 7a01 	vldr	s15, [r7, #4]
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d50d      	bpl.n	8001854 <analyze_results+0x114>
			// Add edge between current valley and its previous peak
			add_edge(&graph, i, i - 1);
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3b01      	subs	r3, #1
 800183e:	461a      	mov	r2, r3
 8001840:	480f      	ldr	r0, [pc, #60]	@ (8001880 <analyze_results+0x140>)
 8001842:	f7ff fccd 	bl	80011e0 <add_edge>
			// Add edge between current valley and its next peak
			add_edge(&graph, i, i + 1);
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3301      	adds	r3, #1
 800184c:	461a      	mov	r2, r3
 800184e:	480c      	ldr	r0, [pc, #48]	@ (8001880 <analyze_results+0x140>)
 8001850:	f7ff fcc6 	bl	80011e0 <add_edge>
		for (int i = 1; i < graph.graph_capacity - 1; i++) {
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <analyze_results+0x140>)
 800185c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d897      	bhi.n	8001798 <analyze_results+0x58>
		}
	}
	print_graph(&graph);
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <analyze_results+0x140>)
 800186a:	f000 f80b 	bl	8001884 <print_graph>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000300 	.word	0x20000300
 800187c:	20000340 	.word	0x20000340
 8001880:	2000034c 	.word	0x2000034c

08001884 <print_graph>:
void print_graph(const struct Graph* graph)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	printf("\nGraph edge connections: \r\n");
 800188c:	481c      	ldr	r0, [pc, #112]	@ (8001900 <print_graph+0x7c>)
 800188e:	f003 ff41 	bl	8005714 <puts>
	for (size_t i = 0; i < graph->numVertices; i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e028      	b.n	80018ea <print_graph+0x66>
		printf("Vertex %d: ", i);
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	481a      	ldr	r0, [pc, #104]	@ (8001904 <print_graph+0x80>)
 800189c:	f003 fed2 	bl	8005644 <iprintf>

		// Print each bit of the adjacency list
		for (size_t j = 0; j < sizeof(uint16_t) * 8; j++) {  // 16 bits
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e018      	b.n	80018d8 <print_graph+0x54>
			// Shift and mask to get the j-th bit (0 or 1)
			uint16_t edge = (graph->vertices[i].adjList >> j) & 1;
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3310      	adds	r3, #16
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa42 f303 	asr.w	r3, r2, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	81fb      	strh	r3, [r7, #14]
			printf("%d", edge);
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	4619      	mov	r1, r3
 80018cc:	480e      	ldr	r0, [pc, #56]	@ (8001908 <print_graph+0x84>)
 80018ce:	f003 feb9 	bl	8005644 <iprintf>
		for (size_t j = 0; j < sizeof(uint16_t) * 8; j++) {  // 16 bits
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3301      	adds	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	d9e3      	bls.n	80018a6 <print_graph+0x22>
		}
		printf("\r\n");
 80018de:	480b      	ldr	r0, [pc, #44]	@ (800190c <print_graph+0x88>)
 80018e0:	f003 ff18 	bl	8005714 <puts>
	for (size_t i = 0; i < graph->numVertices; i++) {
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3d0      	bcc.n	8001898 <print_graph+0x14>
	}
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	080076ac 	.word	0x080076ac
 8001904:	080076c8 	.word	0x080076c8
 8001908:	080076d4 	.word	0x080076d4
 800190c:	080076d8 	.word	0x080076d8

08001910 <_write>:
int _write(int file, char *ptr, int len) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	4804      	ldr	r0, [pc, #16]	@ (8001938 <_write+0x28>)
 8001928:	f001 fe42 	bl	80035b0 <HAL_UART_Transmit>
    return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001f0 	.word	0x200001f0

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <Error_Handler+0x8>

08001948 <left>:
static size_t parent(size_t i) {
    return (i - 1) / 2;
}

// Internal helper: Returns the index of the left child of the element at index i
static size_t left(size_t i) {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    return 2 * i + 1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	3301      	adds	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <right>:

// Internal helper: Returns the index of the right child of the element at index i
static size_t right(size_t i) {
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
    return 2 * i + 2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3301      	adds	r3, #1
 800196e:	005b      	lsls	r3, r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <swap>:

// Swap two elements in the heap
static void swap(float *a, float *b) {
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    float tmp = *a;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]
    *a = *b;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]
    *b = tmp;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <max_heapify>:

// Maintains the max-heap property starting from index i
static void max_heapify(struct priority_queue *pq, size_t i) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
    size_t l = left(i);
 80019b0:	6838      	ldr	r0, [r7, #0]
 80019b2:	f7ff ffc9 	bl	8001948 <left>
 80019b6:	6138      	str	r0, [r7, #16]
    size_t r = right(i);
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7ff ffd2 	bl	8001962 <right>
 80019be:	60f8      	str	r0, [r7, #12]
    size_t largest = i;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	617b      	str	r3, [r7, #20]

    if (l < pq->heap_size && pq->heap[l] > pq->heap[i]) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d214      	bcs.n	80019f8 <max_heapify+0x52>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	dd01      	ble.n	80019f8 <max_heapify+0x52>
        largest = l;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	617b      	str	r3, [r7, #20]
    }
    if (r < pq->heap_size && pq->heap[r] > pq->heap[largest]) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d214      	bcs.n	8001a2c <max_heapify+0x86>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd01      	ble.n	8001a2c <max_heapify+0x86>
        largest = r;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	617b      	str	r3, [r7, #20]
    }
    if (largest != i) {
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d010      	beq.n	8001a56 <max_heapify+0xb0>
        swap(&pq->heap[i], &pq->heap[largest]);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	18d0      	adds	r0, r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff ff97 	bl	800197c <swap>
        max_heapify(pq, largest);
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffa8 	bl	80019a6 <max_heapify>
    }
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <priority_queue_from_array>:

// Initializes the priority queue with values from an array
void priority_queue_from_array(struct priority_queue *pq, float input[], const size_t size) {
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
    pq->length = size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]
    pq->heap_size = size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]
    pq->heap = input;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	601a      	str	r2, [r3, #0]
	#if 0
		for(size_t i = 0; i < size; i++) {
			pq->heap[i] = input[i];
		}
	#endif
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <priority_queue_build_max_heap>:

// Build max-heap from the current array
void priority_queue_build_max_heap(struct priority_queue *pq) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    for (size_t i = pq->heap_size / 2; i > 0; i--) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e008      	b.n	8001aac <priority_queue_build_max_heap+0x24>
        max_heapify(pq, i - 1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff80 	bl	80019a6 <max_heapify>
    for (size_t i = pq->heap_size / 2; i > 0; i--) {
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f3      	bne.n	8001a9a <priority_queue_build_max_heap+0x12>
    }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <priority_queue_print_heap>:
bool priority_queue_is_empty(const struct priority_queue *pq) {
    return pq->heap_size == 0;
}

// Print the heap for debugging purposes
void priority_queue_print_heap(const struct priority_queue *pq) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	printf("\nPriority Queue Dump: \r\n");
 8001ac4:	4810      	ldr	r0, [pc, #64]	@ (8001b08 <priority_queue_print_heap+0x4c>)
 8001ac6:	f003 fe25 	bl	8005714 <puts>
    for (size_t i = 0; i < pq->heap_size; i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e011      	b.n	8001af4 <priority_queue_print_heap+0x38>
        printf("Index %d, Data: %.6f\r\n", i, pq->heap[i]);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd9b 	bl	8000618 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	4808      	ldr	r0, [pc, #32]	@ (8001b0c <priority_queue_print_heap+0x50>)
 8001aea:	f003 fdab 	bl	8005644 <iprintf>
    for (size_t i = 0; i < pq->heap_size; i++) {
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3e8      	bcc.n	8001ad0 <priority_queue_print_heap+0x14>
    }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	080076dc 	.word	0x080076dc
 8001b0c:	080076f4 	.word	0x080076f4

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e033      	b.n	8001b8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f831 	bl	8001b96 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fac4 	bl	80020f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b7e:	e001      	b.n	8001b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Start+0x1a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e097      	b.n	8001cf6 <HAL_ADC_Start+0x14a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d018      	beq.n	8001c0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bec:	4b45      	ldr	r3, [pc, #276]	@ (8001d04 <HAL_ADC_Start+0x158>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a45      	ldr	r2, [pc, #276]	@ (8001d08 <HAL_ADC_Start+0x15c>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9a      	lsrs	r2, r3, #18
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d15f      	bne.n	8001cdc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c5a:	d106      	bne.n	8001c6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f023 0206 	bic.w	r2, r3, #6
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c78:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_ADC_Start+0x160>)
 8001c7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d129      	bne.n	8001cf4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e020      	b.n	8001cf4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_ADC_Start+0x164>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d11b      	bne.n	8001cf4 <HAL_ADC_Start+0x148>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	e00b      	b.n	8001cf4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f043 0210 	orr.w	r2, r3, #16
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	40012000 	.word	0x40012000

08001d14 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Stop+0x16>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e021      	b.n	8001d6e <HAL_ADC_Stop+0x5a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	d113      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e063      	b.n	8001e88 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dc0:	f000 fc7e 	bl	80026c0 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dc6:	e021      	b.n	8001e0c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d01d      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_ADC_PollForConversion+0x6c>
 8001dd6:	f000 fc73 	bl	80026c0 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d212      	bcs.n	8001e0c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d00b      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e03d      	b.n	8001e88 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d1d6      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0212 	mvn.w	r2, #18
 8001e22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d123      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d111      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e105      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x228>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d925      	bls.n	8001f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68d9      	ldr	r1, [r3, #12]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68d9      	ldr	r1, [r3, #12]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4403      	add	r3, r0
 8001f16:	3b1e      	subs	r3, #30
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	e022      	b.n	8001f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	2207      	movs	r2, #7
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6919      	ldr	r1, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4403      	add	r3, r0
 8001f60:	409a      	lsls	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d824      	bhi.n	8001fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b05      	subs	r3, #5
 8001f84:	221f      	movs	r2, #31
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b05      	subs	r3, #5
 8001fae:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fba:	e04c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	d824      	bhi.n	800200e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b23      	subs	r3, #35	@ 0x23
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b23      	subs	r3, #35	@ 0x23
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
 800200c:	e023      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b41      	subs	r3, #65	@ 0x41
 8002020:	221f      	movs	r2, #31
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	400a      	ands	r2, r1
 800202e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	3b41      	subs	r3, #65	@ 0x41
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <HAL_ADC_ConfigChannel+0x234>)
 8002058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_ADC_ConfigChannel+0x238>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d109      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1cc>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d105      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	@ (80020e4 <HAL_ADC_ConfigChannel+0x238>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d123      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x21e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d003      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x1e6>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b11      	cmp	r3, #17
 8002090:	d11b      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d111      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_ADC_ConfigChannel+0x23c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a10      	ldr	r2, [pc, #64]	@ (80020ec <HAL_ADC_ConfigChannel+0x240>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9a      	lsrs	r2, r3, #18
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f9      	bne.n	80020be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40012300 	.word	0x40012300
 80020e4:	40012000 	.word	0x40012000
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f8:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <ADC_Init+0x1f0>)
 80020fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	431a      	orrs	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	021a      	lsls	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	4a58      	ldr	r2, [pc, #352]	@ (80022e4 <ADC_Init+0x1f4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d022      	beq.n	80021ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e00f      	b.n	80021ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0202 	bic.w	r2, r2, #2
 80021fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e1b      	ldrb	r3, [r3, #24]
 8002208:	005a      	lsls	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01b      	beq.n	8002254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800222a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800223a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	3b01      	subs	r3, #1
 8002248:	035a      	lsls	r2, r3, #13
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	e007      	b.n	8002264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	3b01      	subs	r3, #1
 8002280:	051a      	lsls	r2, r3, #20
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022a6:	025a      	lsls	r2, r3, #9
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	029a      	lsls	r2, r3, #10
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40012300 	.word	0x40012300
 80022e4:	0f000001 	.word	0x0f000001

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_MspInit+0x4c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002334 <HAL_MspInit+0x4c>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HAL_MspInit+0x4c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_MspInit+0x4c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <HAL_MspInit+0x4c>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002326:	2007      	movs	r0, #7
 8002328:	f000 fa88 	bl	800283c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_UART_MspInit+0x84>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12b      	bne.n	80023b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002392:	230c      	movs	r3, #12
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a2:	2307      	movs	r3, #7
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <HAL_UART_MspInit+0x8c>)
 80023ae:	f000 fa79 	bl	80028a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	@ 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <NMI_Handler+0x4>

080023d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <UsageFault_Handler+0x4>

080023f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241e:	f000 f93b 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}

08002426 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_kill>:

int _kill(int pid, int sig)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002440:	f003 fa9a 	bl	8005978 <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	2216      	movs	r2, #22
 8002448:	601a      	str	r2, [r3, #0]
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_exit>:

void _exit (int status)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800245e:	f04f 31ff 	mov.w	r1, #4294967295
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffe7 	bl	8002436 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <_exit+0x12>

0800246c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e00a      	b.n	8002494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800247e:	f3af 8000 	nop.w
 8002482:	4601      	mov	r1, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	dbf0      	blt.n	800247e <_read+0x12>
  }

  return len;
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ce:	605a      	str	r2, [r3, #4]
  return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_isatty>:

int _isatty(int file)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a14      	ldr	r2, [pc, #80]	@ (800256c <_sbrk+0x5c>)
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <_sbrk+0x60>)
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <_sbrk+0x64>)
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <_sbrk+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002540:	f003 fa1a 	bl	8005978 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	220c      	movs	r2, #12
 8002548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e009      	b.n	8002564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <_sbrk+0x64>)
 8002560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20018000 	.word	0x20018000
 8002570:	00001000 	.word	0x00001000
 8002574:	20000494 	.word	0x20000494
 8002578:	200005e8 	.word	0x200005e8

0800257c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <SystemInit+0x20>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <SystemInit+0x20>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a4:	f7ff ffea 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f003 f9d9 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe fe42 	bl	800125a <main>
  bx  lr    
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025e4:	0801cf90 	.word	0x0801cf90
  ldr r2, =_sbss
 80025e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025ec:	200005e8 	.word	0x200005e8

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>
	...

080025f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_Init+0x40>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_Init+0x40>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800260e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_Init+0x40>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f000 f90d 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002622:	2000      	movs	r0, #0
 8002624:	f000 f808 	bl	8002638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002628:	f7ff fe5e 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_InitTick+0x54>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f917 	bl	800288a <HAL_SYSTICK_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d80a      	bhi.n	8002682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f000 f8ed 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <HAL_InitTick+0x5c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	20000008 	.word	0x20000008
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_IncTick+0x20>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x24>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <HAL_IncTick+0x24>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008
 80026bc:	20000498 	.word	0x20000498

080026c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTick;
 80026c4:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <HAL_GetTick+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000498 	.word	0x20000498

080026d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	@ (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <__NVIC_GetPriorityGrouping+0x18>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 0307 	and.w	r3, r3, #7
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	@ (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff47 	bl	80026d8 <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff5c 	bl	8002720 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffb0 	bl	80027f8 <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e159      	b.n	8002b74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8148 	bne.w	8002b6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d130      	bne.n	8002958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d017      	beq.n	8002994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d123      	bne.n	80029e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a2 	beq.w	8002b6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4a56      	ldr	r2, [pc, #344]	@ (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3a:	4b54      	ldr	r3, [pc, #336]	@ (8002b8c <HAL_GPIO_Init+0x2e8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	4a52      	ldr	r2, [pc, #328]	@ (8002b90 <HAL_GPIO_Init+0x2ec>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a49      	ldr	r2, [pc, #292]	@ (8002b94 <HAL_GPIO_Init+0x2f0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x202>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a48      	ldr	r2, [pc, #288]	@ (8002b98 <HAL_GPIO_Init+0x2f4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fe>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a47      	ldr	r2, [pc, #284]	@ (8002b9c <HAL_GPIO_Init+0x2f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x1fa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a46      	ldr	r2, [pc, #280]	@ (8002ba0 <HAL_GPIO_Init+0x2fc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x1f6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <HAL_GPIO_Init+0x300>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x1f2>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x204>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4935      	ldr	r1, [pc, #212]	@ (8002b90 <HAL_GPIO_Init+0x2ec>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a24      	ldr	r2, [pc, #144]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b44:	4b18      	ldr	r3, [pc, #96]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <HAL_GPIO_Init+0x304>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f aea2 	bls.w	80028c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc8:	e003      	b.n	8002bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	041a      	lsls	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fd12 	bl	80026c0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fd0e 	bl	80026c0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fcfe 	bl	80026c0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fcfa 	bl	80026c0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff fcb3 	bl	80026c0 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7ff fcaf 	bl	80026c0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7ff fc92 	bl	80026c0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7ff fc8e 	bl	80026c0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7ff fc72 	bl	80026c0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7ff fc6e 	bl	80026c0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7ff fc5b 	bl	80026c0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7ff fc57 	bl	80026c0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fc17 	bl	80026c0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7ff fc13 	bl	80026c0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7ff fbd8 	bl	80026c0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7ff fbd4 	bl	80026c0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7ff fbc2 	bl	80026c0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7ff fbbe 	bl	80026c0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7ff fb92 	bl	80026c0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7ff fb8e 	bl	80026c0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7ff fb67 	bl	80026c0 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7ff fb63 	bl	80026c0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7ff fb50 	bl	80026c0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7ff fb4c 	bl	80026c0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7ff fa7e 	bl	80026c0 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7ff fa7a 	bl	80026c0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f9de 	bl	8002638 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	0800770c 	.word	0x0800770c
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b094      	sub	sp, #80	@ 0x50
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b79      	ldr	r3, [pc, #484]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80e1 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e0db      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b73      	ldr	r3, [pc, #460]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d4:	e0db      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032da:	e0d8      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b6a      	ldr	r3, [pc, #424]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
 800330a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4621      	mov	r1, r4
 8003328:	1a51      	subs	r1, r2, r1
 800332a:	6139      	str	r1, [r7, #16]
 800332c:	4629      	mov	r1, r5
 800332e:	eb63 0301 	sbc.w	r3, r3, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003340:	4659      	mov	r1, fp
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334a:	4651      	mov	r1, sl
 800334c:	018a      	lsls	r2, r1, #6
 800334e:	4651      	mov	r1, sl
 8003350:	ebb2 0801 	subs.w	r8, r2, r1
 8003354:	4659      	mov	r1, fp
 8003356:	eb63 0901 	sbc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	462b      	mov	r3, r5
 800337c:	eb49 0303 	adc.w	r3, r9, r3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800338e:	4629      	mov	r1, r5
 8003390:	024b      	lsls	r3, r1, #9
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003398:	4621      	mov	r1, r4
 800339a:	024a      	lsls	r2, r1, #9
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ac:	f7fd fc64 	bl	8000c78 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	e058      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	4611      	mov	r1, r2
 80033c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	0159      	lsls	r1, r3, #5
 80033e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e6:	0150      	lsls	r0, r2, #5
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4641      	mov	r1, r8
 80033ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800340c:	ebb2 040a 	subs.w	r4, r2, sl
 8003410:	eb63 050b 	sbc.w	r5, r3, fp
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	464b      	mov	r3, r9
 8003430:	eb45 0303 	adc.w	r3, r5, r3
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	f7fd fc0a 	bl	8000c78 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4613      	mov	r3, r2
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800347c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800348a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003490:	4618      	mov	r0, r3
 8003492:	3750      	adds	r7, #80	@ 0x50
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff0 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	@ (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	0800771c 	.word	0x0800771c

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ec:	f7ff ffdc 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0b5b      	lsrs	r3, r3, #13
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	@ (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	0800771c 	.word	0x0800771c

08003510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e042      	b.n	80035a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe fefe 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	@ 0x24
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f973 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	@ 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d175      	bne.n	80036bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit+0x2c>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2221      	movs	r2, #33	@ 0x21
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ee:	f7ff f867 	bl	80026c0 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003608:	d108      	bne.n	800361c <HAL_UART_Transmit+0x6c>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003624:	e02e      	b.n	8003684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	@ 0x80
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f848 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e03a      	b.n	80036be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800365c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	3302      	adds	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	e007      	b.n	8003676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1cb      	bne.n	8003626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2140      	movs	r1, #64	@ 0x40
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f814 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	e03b      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d037      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe ffee 	bl	80026c0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	6a3a      	ldr	r2, [r7, #32]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e03a      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d020      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d01d      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d116      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f81d 	bl	8003778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2208      	movs	r2, #8
 8003742:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e00f      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	429a      	cmp	r2, r3
 800376c:	d0b4      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b095      	sub	sp, #84	@ 0x54
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80037a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d119      	bne.n	8003824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f023 0310 	bic.w	r3, r3, #16
 8003806:	647b      	str	r3, [r7, #68]	@ 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003810:	61ba      	str	r2, [r7, #24]
 8003812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	613b      	str	r3, [r7, #16]
   return(result);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003832:	bf00      	nop
 8003834:	3754      	adds	r7, #84	@ 0x54
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0c0      	sub	sp, #256	@ 0x100
 8003846:	af00      	add	r7, sp, #0
 8003848:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	ea40 0301 	orr.w	r3, r0, r1
 8003868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003898:	f021 010c 	bic.w	r1, r1, #12
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	ea40 0301 	orr.w	r3, r0, r1
 80038c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b8f      	ldr	r3, [pc, #572]	@ (8003b0c <UART_SetConfig+0x2cc>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <UART_SetConfig+0xa0>
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b8d      	ldr	r3, [pc, #564]	@ (8003b10 <UART_SetConfig+0x2d0>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d104      	bne.n	80038ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff fe02 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 80038e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038e8:	e003      	b.n	80038f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ea:	f7ff fde9 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80038ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fc:	f040 810c 	bne.w	8003b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800390a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800390e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	1891      	adds	r1, r2, r2
 8003918:	65b9      	str	r1, [r7, #88]	@ 0x58
 800391a:	415b      	adcs	r3, r3
 800391c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800391e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003922:	4621      	mov	r1, r4
 8003924:	eb12 0801 	adds.w	r8, r2, r1
 8003928:	4629      	mov	r1, r5
 800392a:	eb43 0901 	adc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003950:	462b      	mov	r3, r5
 8003952:	eb49 0303 	adc.w	r3, r9, r3
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003966:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800396a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800396e:	460b      	mov	r3, r1
 8003970:	18db      	adds	r3, r3, r3
 8003972:	653b      	str	r3, [r7, #80]	@ 0x50
 8003974:	4613      	mov	r3, r2
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	657b      	str	r3, [r7, #84]	@ 0x54
 800397c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003984:	f7fd f978 	bl	8000c78 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <UART_SetConfig+0x2d4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039b0:	415b      	adcs	r3, r3
 80039b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039b8:	4641      	mov	r1, r8
 80039ba:	eb12 0a01 	adds.w	sl, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb43 0b01 	adc.w	fp, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d8:	4692      	mov	sl, r2
 80039da:	469b      	mov	fp, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	eb1a 0303 	adds.w	r3, sl, r3
 80039e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e6:	464b      	mov	r3, r9
 80039e8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a04:	460b      	mov	r3, r1
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a1a:	f7fd f92d 	bl	8000c78 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <UART_SetConfig+0x2d4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	@ 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a48:	441c      	add	r4, r3
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a64:	415b      	adcs	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ad6:	f7fd f8cf 	bl	8000c78 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	@ 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	3332      	adds	r3, #50	@ 0x32
 8003af2:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <UART_SetConfig+0x2d4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	f003 0207 	and.w	r2, r3, #7
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4422      	add	r2, r4
 8003b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b08:	e106      	b.n	8003d18 <UART_SetConfig+0x4d8>
 8003b0a:	bf00      	nop
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6239      	str	r1, [r7, #32]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb43 0501 	adc.w	r5, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b60:	464b      	mov	r3, r9
 8003b62:	eb45 0303 	adc.w	r3, r5, r3
 8003b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b86:	4629      	mov	r1, r5
 8003b88:	008b      	lsls	r3, r1, #2
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b90:	4621      	mov	r1, r4
 8003b92:	008a      	lsls	r2, r1, #2
 8003b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b98:	f7fd f86e 	bl	8000c78 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <UART_SetConfig+0x4e4>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011c      	lsls	r4, r3, #4
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	61b9      	str	r1, [r7, #24]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6139      	str	r1, [r7, #16]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c00:	464b      	mov	r3, r9
 8003c02:	460a      	mov	r2, r1
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c36:	f7fd f81f 	bl	8000c78 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b38      	ldr	r3, [pc, #224]	@ (8003d24 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	@ 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	@ 0x32
 8003c54:	4a33      	ldr	r2, [pc, #204]	@ (8003d24 <UART_SetConfig+0x4e4>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	008b      	lsls	r3, r1, #2
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cde:	4641      	mov	r1, r8
 8003ce0:	008a      	lsls	r2, r1, #2
 8003ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ce6:	f7fc ffc7 	bl	8000c78 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <UART_SetConfig+0x4e4>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	@ 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	3332      	adds	r3, #50	@ 0x32
 8003d02:	4a08      	ldr	r2, [pc, #32]	@ (8003d24 <UART_SetConfig+0x4e4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4422      	add	r2, r4
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <arm_cfft_radix8by2_f32>:
 8003d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2c:	ed2d 8b08 	vpush	{d8-d11}
 8003d30:	f8b0 e000 	ldrh.w	lr, [r0]
 8003d34:	6842      	ldr	r2, [r0, #4]
 8003d36:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8003d3a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8003d3e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003d42:	4607      	mov	r7, r0
 8003d44:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8003d48:	f000 80af 	beq.w	8003eaa <arm_cfft_radix8by2_f32+0x182>
 8003d4c:	3310      	adds	r3, #16
 8003d4e:	18ce      	adds	r6, r1, r3
 8003d50:	3210      	adds	r2, #16
 8003d52:	4443      	add	r3, r8
 8003d54:	f101 0510 	add.w	r5, r1, #16
 8003d58:	f108 0410 	add.w	r4, r8, #16
 8003d5c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003d60:	ed13 4a04 	vldr	s8, [r3, #-16]
 8003d64:	ed53 3a03 	vldr	s7, [r3, #-12]
 8003d68:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003d6c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003d70:	ed54 6a03 	vldr	s13, [r4, #-12]
 8003d74:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003d78:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003d7c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003d80:	ed15 6a03 	vldr	s12, [r5, #-12]
 8003d84:	ed15 7a01 	vldr	s14, [r5, #-4]
 8003d88:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003d8c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003d90:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003d94:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003d98:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003d9c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003da0:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003da4:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003da8:	ee72 9a04 	vadd.f32	s19, s4, s8
 8003dac:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003db0:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003db4:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003db8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8003dbc:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003dc0:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003dc4:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003dc8:	ed05 aa01 	vstr	s20, [r5, #-4]
 8003dcc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003dd0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003dd4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003dd8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003ddc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003de0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8003de4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003de8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8003dec:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003df0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003df4:	ee26 8a86 	vmul.f32	s16, s13, s12
 8003df8:	ee24 2a06 	vmul.f32	s4, s8, s12
 8003dfc:	ee63 1a22 	vmul.f32	s3, s6, s5
 8003e00:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003e04:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003e08:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8003e0c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003e10:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8003e14:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003e18:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003e1c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8003e20:	ee71 2a88 	vadd.f32	s5, s3, s16
 8003e24:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003e28:	ed44 2a04 	vstr	s5, [r4, #-16]
 8003e2c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8003e30:	ed03 6a03 	vstr	s12, [r3, #-12]
 8003e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e38:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8003e3c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003e40:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003e44:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003e48:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003e4c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003e50:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003e54:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003e58:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003e5c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003e60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003e64:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003e68:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003e6c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003e70:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003e74:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003e78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003e7c:	f1be 0e01 	subs.w	lr, lr, #1
 8003e80:	ed44 5a02 	vstr	s11, [r4, #-8]
 8003e84:	f105 0510 	add.w	r5, r5, #16
 8003e88:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003e8c:	f106 0610 	add.w	r6, r6, #16
 8003e90:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003e94:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003e98:	f102 0210 	add.w	r2, r2, #16
 8003e9c:	f104 0410 	add.w	r4, r4, #16
 8003ea0:	f103 0310 	add.w	r3, r3, #16
 8003ea4:	f47f af5a 	bne.w	8003d5c <arm_cfft_radix8by2_f32+0x34>
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	fa1f f48c 	uxth.w	r4, ip
 8003eae:	4608      	mov	r0, r1
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f000 fbca 	bl	800464c <arm_radix8_butterfly_f32>
 8003eb8:	ecbd 8b08 	vpop	{d8-d11}
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec8:	f000 bbc0 	b.w	800464c <arm_radix8_butterfly_f32>

08003ecc <arm_cfft_radix8by4_f32>:
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	ed2d 8b0a 	vpush	{d8-d12}
 8003ed4:	8802      	ldrh	r2, [r0, #0]
 8003ed6:	ed91 6a00 	vldr	s12, [r1]
 8003eda:	b08f      	sub	sp, #60	@ 0x3c
 8003edc:	460f      	mov	r7, r1
 8003ede:	0852      	lsrs	r2, r2, #1
 8003ee0:	0093      	lsls	r3, r2, #2
 8003ee2:	900c      	str	r0, [sp, #48]	@ 0x30
 8003ee4:	9103      	str	r1, [sp, #12]
 8003ee6:	6841      	ldr	r1, [r0, #4]
 8003ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003eec:	4638      	mov	r0, r7
 8003eee:	4418      	add	r0, r3
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	9009      	str	r0, [sp, #36]	@ 0x24
 8003ef4:	4418      	add	r0, r3
 8003ef6:	edd0 6a00 	vldr	s13, [r0]
 8003efa:	edd6 3a00 	vldr	s7, [r6]
 8003efe:	edd6 2a01 	vldr	s5, [r6, #4]
 8003f02:	edd0 7a01 	vldr	s15, [r0, #4]
 8003f06:	900a      	str	r0, [sp, #40]	@ 0x28
 8003f08:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4625      	mov	r5, r4
 8003f10:	441c      	add	r4, r3
 8003f12:	ed94 4a00 	vldr	s8, [r4]
 8003f16:	ed94 5a01 	vldr	s10, [r4, #4]
 8003f1a:	9401      	str	r4, [sp, #4]
 8003f1c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8003f20:	4630      	mov	r0, r6
 8003f22:	ee74 4a24 	vadd.f32	s9, s8, s9
 8003f26:	463e      	mov	r6, r7
 8003f28:	ee14 ea90 	vmov	lr, s9
 8003f2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003f30:	f846 eb08 	str.w	lr, [r6], #8
 8003f34:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003f38:	edd0 4a01 	vldr	s9, [r0, #4]
 8003f3c:	9604      	str	r6, [sp, #16]
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	9e01      	ldr	r6, [sp, #4]
 8003f44:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8003f48:	ed96 2a01 	vldr	s4, [r6, #4]
 8003f4c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8003f50:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8003f54:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8003f58:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003f5c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8003f60:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003f64:	ee73 3a45 	vsub.f32	s7, s6, s10
 8003f68:	4604      	mov	r4, r0
 8003f6a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8003f6e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003f72:	46a3      	mov	fp, r4
 8003f74:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003f78:	ee34 5a84 	vadd.f32	s10, s9, s8
 8003f7c:	ee13 8a90 	vmov	r8, s7
 8003f80:	46a4      	mov	ip, r4
 8003f82:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003f86:	ed87 7a01 	vstr	s14, [r7, #4]
 8003f8a:	f84b 8b08 	str.w	r8, [fp], #8
 8003f8e:	f1ac 0704 	sub.w	r7, ip, #4
 8003f92:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003f96:	f101 0c08 	add.w	ip, r1, #8
 8003f9a:	462c      	mov	r4, r5
 8003f9c:	f8cd c014 	str.w	ip, [sp, #20]
 8003fa0:	ee15 ca90 	vmov	ip, s11
 8003fa4:	f844 cb08 	str.w	ip, [r4], #8
 8003fa8:	9407      	str	r4, [sp, #28]
 8003faa:	f101 0410 	add.w	r4, r1, #16
 8003fae:	ed85 6a01 	vstr	s12, [r5, #4]
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	9402      	str	r4, [sp, #8]
 8003fb6:	462c      	mov	r4, r5
 8003fb8:	f101 0518 	add.w	r5, r1, #24
 8003fbc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003fbe:	46b2      	mov	sl, r6
 8003fc0:	9506      	str	r5, [sp, #24]
 8003fc2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003fc6:	3a02      	subs	r2, #2
 8003fc8:	ee16 5a90 	vmov	r5, s13
 8003fcc:	46b6      	mov	lr, r6
 8003fce:	4630      	mov	r0, r6
 8003fd0:	0852      	lsrs	r2, r2, #1
 8003fd2:	f84a 5b08 	str.w	r5, [sl], #8
 8003fd6:	f1a0 0604 	sub.w	r6, r0, #4
 8003fda:	edce 7a01 	vstr	s15, [lr, #4]
 8003fde:	9208      	str	r2, [sp, #32]
 8003fe0:	f000 8130 	beq.w	8004244 <arm_cfft_radix8by4_f32+0x378>
 8003fe4:	4691      	mov	r9, r2
 8003fe6:	9a03      	ldr	r2, [sp, #12]
 8003fe8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003fec:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8003ff0:	3b08      	subs	r3, #8
 8003ff2:	f102 0510 	add.w	r5, r2, #16
 8003ff6:	f101 0c20 	add.w	ip, r1, #32
 8003ffa:	f1a4 020c 	sub.w	r2, r4, #12
 8003ffe:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8004002:	4433      	add	r3, r6
 8004004:	3410      	adds	r4, #16
 8004006:	4650      	mov	r0, sl
 8004008:	4659      	mov	r1, fp
 800400a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800400e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004012:	ed91 7a00 	vldr	s14, [r1]
 8004016:	edd0 7a00 	vldr	s15, [r0]
 800401a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800401e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004022:	edd0 6a01 	vldr	s13, [r0, #4]
 8004026:	ed91 6a01 	vldr	s12, [r1, #4]
 800402a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800402e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004032:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004036:	ee74 5a65 	vsub.f32	s11, s8, s11
 800403a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800403e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004042:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004046:	edd1 4a01 	vldr	s9, [r1, #4]
 800404a:	ed90 4a01 	vldr	s8, [r0, #4]
 800404e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004052:	ee76 aa05 	vadd.f32	s21, s12, s10
 8004056:	ee74 4a84 	vadd.f32	s9, s9, s8
 800405a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800405e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004062:	edd6 1a00 	vldr	s3, [r6]
 8004066:	edd7 0a00 	vldr	s1, [r7]
 800406a:	ed92 4a02 	vldr	s8, [r2, #8]
 800406e:	edd3 3a02 	vldr	s7, [r3, #8]
 8004072:	ed93 2a01 	vldr	s4, [r3, #4]
 8004076:	ed16 1a01 	vldr	s2, [r6, #-4]
 800407a:	edd2 2a01 	vldr	s5, [r2, #4]
 800407e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004082:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004086:	ee39 3a81 	vadd.f32	s6, s19, s2
 800408a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800408e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004092:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8004096:	ee7a aae6 	vsub.f32	s21, s21, s13
 800409a:	ee18 aa90 	vmov	sl, s17
 800409e:	f847 a908 	str.w	sl, [r7], #-8
 80040a2:	edd2 8a01 	vldr	s17, [r2, #4]
 80040a6:	ed93 9a01 	vldr	s18, [r3, #4]
 80040aa:	ee73 8a28 	vadd.f32	s17, s6, s17
 80040ae:	ee3a aa27 	vadd.f32	s20, s20, s15
 80040b2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80040b6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80040ba:	edc7 8a01 	vstr	s17, [r7, #4]
 80040be:	ed18 ba02 	vldr	s22, [r8, #-8]
 80040c2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80040c6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80040ca:	ee6a ba28 	vmul.f32	s23, s20, s17
 80040ce:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80040d2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80040d6:	ee30 9a81 	vadd.f32	s18, s1, s2
 80040da:	ee79 9a82 	vadd.f32	s19, s19, s4
 80040de:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80040e2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80040e6:	ee69 baa8 	vmul.f32	s23, s19, s17
 80040ea:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80040ee:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80040f2:	ee69 8a28 	vmul.f32	s17, s18, s17
 80040f6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80040fa:	ee1c aa10 	vmov	sl, s24
 80040fe:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8004102:	f841 ab08 	str.w	sl, [r1], #8
 8004106:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800410a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800410e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004112:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004116:	ed01 aa01 	vstr	s20, [r1, #-4]
 800411a:	edc2 8a01 	vstr	s17, [r2, #4]
 800411e:	ed82 ba02 	vstr	s22, [r2, #8]
 8004122:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8004126:	ee74 3a63 	vsub.f32	s7, s8, s7
 800412a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800412e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8004132:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004136:	ee33 3a42 	vsub.f32	s6, s6, s4
 800413a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800413e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004142:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004146:	ee63 8a04 	vmul.f32	s17, s6, s8
 800414a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800414e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004152:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004156:	ee20 0a24 	vmul.f32	s0, s0, s9
 800415a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800415e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004162:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004166:	ee14 aa10 	vmov	sl, s8
 800416a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800416e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004172:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004176:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800417a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800417e:	f846 a908 	str.w	sl, [r6], #-8
 8004182:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004186:	ee35 7a87 	vadd.f32	s14, s11, s14
 800418a:	edc6 3a01 	vstr	s7, [r6, #4]
 800418e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004196:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800419a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800419e:	ee67 5a86 	vmul.f32	s11, s15, s12
 80041a2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80041a6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80041aa:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80041ae:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80041b2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80041b6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80041ba:	ee66 6a86 	vmul.f32	s13, s13, s12
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80041c6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80041ca:	ee21 1a07 	vmul.f32	s2, s2, s14
 80041ce:	ee15 aa90 	vmov	sl, s11
 80041d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80041d6:	f840 ab08 	str.w	sl, [r0], #8
 80041da:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80041de:	ee76 2a22 	vadd.f32	s5, s12, s5
 80041e2:	f1b9 0901 	subs.w	r9, r9, #1
 80041e6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80041ea:	f105 0508 	add.w	r5, r5, #8
 80041ee:	ed83 1a02 	vstr	s2, [r3, #8]
 80041f2:	edc3 2a01 	vstr	s5, [r3, #4]
 80041f6:	f108 0808 	add.w	r8, r8, #8
 80041fa:	f1a2 0208 	sub.w	r2, r2, #8
 80041fe:	f10c 0c10 	add.w	ip, ip, #16
 8004202:	f104 0408 	add.w	r4, r4, #8
 8004206:	f10e 0e18 	add.w	lr, lr, #24
 800420a:	f1a3 0308 	sub.w	r3, r3, #8
 800420e:	f47f aefc 	bne.w	800400a <arm_cfft_radix8by4_f32+0x13e>
 8004212:	9908      	ldr	r1, [sp, #32]
 8004214:	9802      	ldr	r0, [sp, #8]
 8004216:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004220:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004224:	9102      	str	r1, [sp, #8]
 8004226:	9904      	ldr	r1, [sp, #16]
 8004228:	4419      	add	r1, r3
 800422a:	9104      	str	r1, [sp, #16]
 800422c:	9905      	ldr	r1, [sp, #20]
 800422e:	4419      	add	r1, r3
 8004230:	9105      	str	r1, [sp, #20]
 8004232:	9907      	ldr	r1, [sp, #28]
 8004234:	449b      	add	fp, r3
 8004236:	4419      	add	r1, r3
 8004238:	449a      	add	sl, r3
 800423a:	9b06      	ldr	r3, [sp, #24]
 800423c:	9107      	str	r1, [sp, #28]
 800423e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004242:	9306      	str	r3, [sp, #24]
 8004244:	9a04      	ldr	r2, [sp, #16]
 8004246:	9807      	ldr	r0, [sp, #28]
 8004248:	edd2 3a00 	vldr	s7, [r2]
 800424c:	ed90 4a00 	vldr	s8, [r0]
 8004250:	eddb 7a00 	vldr	s15, [fp]
 8004254:	ed9a 3a00 	vldr	s6, [sl]
 8004258:	edd2 4a01 	vldr	s9, [r2, #4]
 800425c:	ed90 7a01 	vldr	s14, [r0, #4]
 8004260:	ed9b 2a01 	vldr	s4, [fp, #4]
 8004264:	edda 5a01 	vldr	s11, [sl, #4]
 8004268:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800426c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800426e:	ee73 6a84 	vadd.f32	s13, s7, s8
 8004272:	ee34 6a87 	vadd.f32	s12, s9, s14
 8004276:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800427a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800427e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8004282:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004286:	ed82 5a00 	vstr	s10, [r2]
 800428a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800428e:	edda 4a01 	vldr	s9, [sl, #4]
 8004292:	ee36 5a05 	vadd.f32	s10, s12, s10
 8004296:	ee72 3a04 	vadd.f32	s7, s4, s8
 800429a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800429e:	ee77 4a67 	vsub.f32	s9, s14, s15
 80042a2:	ed82 5a01 	vstr	s10, [r2, #4]
 80042a6:	9a05      	ldr	r2, [sp, #20]
 80042a8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80042ac:	edd2 1a00 	vldr	s3, [r2]
 80042b0:	edd2 2a01 	vldr	s5, [r2, #4]
 80042b4:	9a02      	ldr	r2, [sp, #8]
 80042b6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80042ba:	ee36 6a42 	vsub.f32	s12, s12, s4
 80042be:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80042c2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80042c6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80042ca:	ee25 5a21 	vmul.f32	s10, s10, s3
 80042ce:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80042d2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80042d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042da:	edcb 2a00 	vstr	s5, [fp]
 80042de:	ed8b 5a01 	vstr	s10, [fp, #4]
 80042e2:	edd2 3a01 	vldr	s7, [r2, #4]
 80042e6:	ed92 5a00 	vldr	s10, [r2]
 80042ea:	9a06      	ldr	r2, [sp, #24]
 80042ec:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80042f0:	ee36 6a65 	vsub.f32	s12, s12, s11
 80042f4:	ee66 4a85 	vmul.f32	s9, s13, s10
 80042f8:	ee26 5a05 	vmul.f32	s10, s12, s10
 80042fc:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004300:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004304:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004308:	ee34 6a86 	vadd.f32	s12, s9, s12
 800430c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004314:	edc0 6a01 	vstr	s13, [r0, #4]
 8004318:	ed80 6a00 	vstr	s12, [r0]
 800431c:	ed92 6a01 	vldr	s12, [r2, #4]
 8004320:	9803      	ldr	r0, [sp, #12]
 8004322:	ee77 7a43 	vsub.f32	s15, s14, s6
 8004326:	ee75 5a84 	vadd.f32	s11, s11, s8
 800432a:	ed92 7a00 	vldr	s14, [r2]
 800432e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8004332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004336:	ee65 5a86 	vmul.f32	s11, s11, s12
 800433a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800433e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004346:	edca 5a01 	vstr	s11, [sl, #4]
 800434a:	edca 7a00 	vstr	s15, [sl]
 800434e:	6872      	ldr	r2, [r6, #4]
 8004350:	4621      	mov	r1, r4
 8004352:	2304      	movs	r3, #4
 8004354:	f000 f97a 	bl	800464c <arm_radix8_butterfly_f32>
 8004358:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800435a:	6872      	ldr	r2, [r6, #4]
 800435c:	4621      	mov	r1, r4
 800435e:	2304      	movs	r3, #4
 8004360:	f000 f974 	bl	800464c <arm_radix8_butterfly_f32>
 8004364:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004366:	6872      	ldr	r2, [r6, #4]
 8004368:	4621      	mov	r1, r4
 800436a:	2304      	movs	r3, #4
 800436c:	f000 f96e 	bl	800464c <arm_radix8_butterfly_f32>
 8004370:	9801      	ldr	r0, [sp, #4]
 8004372:	6872      	ldr	r2, [r6, #4]
 8004374:	4621      	mov	r1, r4
 8004376:	2304      	movs	r3, #4
 8004378:	b00f      	add	sp, #60	@ 0x3c
 800437a:	ecbd 8b0a 	vpop	{d8-d12}
 800437e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004382:	f000 b963 	b.w	800464c <arm_radix8_butterfly_f32>
 8004386:	bf00      	nop

08004388 <arm_cfft_f32>:
 8004388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438c:	2a01      	cmp	r2, #1
 800438e:	4606      	mov	r6, r0
 8004390:	4617      	mov	r7, r2
 8004392:	460c      	mov	r4, r1
 8004394:	4698      	mov	r8, r3
 8004396:	8805      	ldrh	r5, [r0, #0]
 8004398:	d054      	beq.n	8004444 <arm_cfft_f32+0xbc>
 800439a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800439e:	d04c      	beq.n	800443a <arm_cfft_f32+0xb2>
 80043a0:	d916      	bls.n	80043d0 <arm_cfft_f32+0x48>
 80043a2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80043a6:	d01a      	beq.n	80043de <arm_cfft_f32+0x56>
 80043a8:	d95c      	bls.n	8004464 <arm_cfft_f32+0xdc>
 80043aa:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80043ae:	d044      	beq.n	800443a <arm_cfft_f32+0xb2>
 80043b0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80043b4:	d105      	bne.n	80043c2 <arm_cfft_f32+0x3a>
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	6872      	ldr	r2, [r6, #4]
 80043bc:	2301      	movs	r3, #1
 80043be:	f000 f945 	bl	800464c <arm_radix8_butterfly_f32>
 80043c2:	f1b8 0f00 	cmp.w	r8, #0
 80043c6:	d111      	bne.n	80043ec <arm_cfft_f32+0x64>
 80043c8:	2f01      	cmp	r7, #1
 80043ca:	d016      	beq.n	80043fa <arm_cfft_f32+0x72>
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d0:	2d20      	cmp	r5, #32
 80043d2:	d032      	beq.n	800443a <arm_cfft_f32+0xb2>
 80043d4:	d94a      	bls.n	800446c <arm_cfft_f32+0xe4>
 80043d6:	2d40      	cmp	r5, #64	@ 0x40
 80043d8:	d0ed      	beq.n	80043b6 <arm_cfft_f32+0x2e>
 80043da:	2d80      	cmp	r5, #128	@ 0x80
 80043dc:	d1f1      	bne.n	80043c2 <arm_cfft_f32+0x3a>
 80043de:	4630      	mov	r0, r6
 80043e0:	4621      	mov	r1, r4
 80043e2:	f7ff fca1 	bl	8003d28 <arm_cfft_radix8by2_f32>
 80043e6:	f1b8 0f00 	cmp.w	r8, #0
 80043ea:	d0ed      	beq.n	80043c8 <arm_cfft_f32+0x40>
 80043ec:	4620      	mov	r0, r4
 80043ee:	89b1      	ldrh	r1, [r6, #12]
 80043f0:	68b2      	ldr	r2, [r6, #8]
 80043f2:	f7fb fef5 	bl	80001e0 <arm_bitreversal_32>
 80043f6:	2f01      	cmp	r7, #1
 80043f8:	d1e8      	bne.n	80043cc <arm_cfft_f32+0x44>
 80043fa:	ee07 5a90 	vmov	s15, r5
 80043fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004402:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004406:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800440a:	2d00      	cmp	r5, #0
 800440c:	d0de      	beq.n	80043cc <arm_cfft_f32+0x44>
 800440e:	f104 0108 	add.w	r1, r4, #8
 8004412:	2300      	movs	r3, #0
 8004414:	3301      	adds	r3, #1
 8004416:	429d      	cmp	r5, r3
 8004418:	f101 0108 	add.w	r1, r1, #8
 800441c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004420:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004424:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004428:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800442c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004430:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004434:	d1ee      	bne.n	8004414 <arm_cfft_f32+0x8c>
 8004436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800443a:	4630      	mov	r0, r6
 800443c:	4621      	mov	r1, r4
 800443e:	f7ff fd45 	bl	8003ecc <arm_cfft_radix8by4_f32>
 8004442:	e7be      	b.n	80043c2 <arm_cfft_f32+0x3a>
 8004444:	b1ad      	cbz	r5, 8004472 <arm_cfft_f32+0xea>
 8004446:	f101 030c 	add.w	r3, r1, #12
 800444a:	2200      	movs	r2, #0
 800444c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004450:	3201      	adds	r2, #1
 8004452:	eef1 7a67 	vneg.f32	s15, s15
 8004456:	4295      	cmp	r5, r2
 8004458:	ed43 7a02 	vstr	s15, [r3, #-8]
 800445c:	f103 0308 	add.w	r3, r3, #8
 8004460:	d1f4      	bne.n	800444c <arm_cfft_f32+0xc4>
 8004462:	e79a      	b.n	800439a <arm_cfft_f32+0x12>
 8004464:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004468:	d0a5      	beq.n	80043b6 <arm_cfft_f32+0x2e>
 800446a:	e7aa      	b.n	80043c2 <arm_cfft_f32+0x3a>
 800446c:	2d10      	cmp	r5, #16
 800446e:	d0b6      	beq.n	80043de <arm_cfft_f32+0x56>
 8004470:	e7a7      	b.n	80043c2 <arm_cfft_f32+0x3a>
 8004472:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004476:	d894      	bhi.n	80043a2 <arm_cfft_f32+0x1a>
 8004478:	e7aa      	b.n	80043d0 <arm_cfft_f32+0x48>
 800447a:	bf00      	nop

0800447c <arm_cmplx_mag_f32>:
 800447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004480:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004484:	b084      	sub	sp, #16
 8004486:	d07f      	beq.n	8004588 <arm_cmplx_mag_f32+0x10c>
 8004488:	2700      	movs	r7, #0
 800448a:	f100 0420 	add.w	r4, r0, #32
 800448e:	f101 0510 	add.w	r5, r1, #16
 8004492:	4646      	mov	r6, r8
 8004494:	e05a      	b.n	800454c <arm_cmplx_mag_f32+0xd0>
 8004496:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800449a:	eeb4 0a40 	vcmp.f32	s0, s0
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	f040 80a4 	bne.w	80045ee <arm_cmplx_mag_f32+0x172>
 80044a6:	ed05 0a04 	vstr	s0, [r5, #-16]
 80044aa:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 80044ae:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 80044b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80044ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80044be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	f2c0 808f 	blt.w	80045e8 <arm_cmplx_mag_f32+0x16c>
 80044ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80044ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	f040 80af 	bne.w	8004638 <arm_cmplx_mag_f32+0x1bc>
 80044da:	ed05 0a03 	vstr	s0, [r5, #-12]
 80044de:	ed54 7a04 	vldr	s15, [r4, #-16]
 80044e2:	ed14 0a03 	vldr	s0, [r4, #-12]
 80044e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80044ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80044f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	db72      	blt.n	80045e2 <arm_cmplx_mag_f32+0x166>
 80044fc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004500:	eeb4 0a40 	vcmp.f32	s0, s0
 8004504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004508:	f040 808c 	bne.w	8004624 <arm_cmplx_mag_f32+0x1a8>
 800450c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8004510:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004514:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800451c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004520:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	db20      	blt.n	8004570 <arm_cmplx_mag_f32+0xf4>
 800452e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004532:	eeb4 0a40 	vcmp.f32	s0, s0
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d169      	bne.n	8004610 <arm_cmplx_mag_f32+0x194>
 800453c:	3e01      	subs	r6, #1
 800453e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8004542:	f104 0420 	add.w	r4, r4, #32
 8004546:	f105 0510 	add.w	r5, r5, #16
 800454a:	d019      	beq.n	8004580 <arm_cmplx_mag_f32+0x104>
 800454c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8004550:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8004554:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004558:	ee20 0a00 	vmul.f32	s0, s0, s0
 800455c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004568:	da95      	bge.n	8004496 <arm_cmplx_mag_f32+0x1a>
 800456a:	f845 7c10 	str.w	r7, [r5, #-16]
 800456e:	e79c      	b.n	80044aa <arm_cmplx_mag_f32+0x2e>
 8004570:	3e01      	subs	r6, #1
 8004572:	f845 7c04 	str.w	r7, [r5, #-4]
 8004576:	f104 0420 	add.w	r4, r4, #32
 800457a:	f105 0510 	add.w	r5, r5, #16
 800457e:	d1e5      	bne.n	800454c <arm_cmplx_mag_f32+0xd0>
 8004580:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8004584:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004588:	f012 0503 	ands.w	r5, r2, #3
 800458c:	d026      	beq.n	80045dc <arm_cmplx_mag_f32+0x160>
 800458e:	2600      	movs	r6, #0
 8004590:	f100 0408 	add.w	r4, r0, #8
 8004594:	e00c      	b.n	80045b0 <arm_cmplx_mag_f32+0x134>
 8004596:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800459a:	eeb4 0a40 	vcmp.f32	s0, s0
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d12e      	bne.n	8004602 <arm_cmplx_mag_f32+0x186>
 80045a4:	3d01      	subs	r5, #1
 80045a6:	ed01 0a01 	vstr	s0, [r1, #-4]
 80045aa:	f104 0408 	add.w	r4, r4, #8
 80045ae:	d015      	beq.n	80045dc <arm_cmplx_mag_f32+0x160>
 80045b0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80045b4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80045b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80045bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80045c0:	3104      	adds	r1, #4
 80045c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80045c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ce:	dae2      	bge.n	8004596 <arm_cmplx_mag_f32+0x11a>
 80045d0:	3d01      	subs	r5, #1
 80045d2:	f841 6c04 	str.w	r6, [r1, #-4]
 80045d6:	f104 0408 	add.w	r4, r4, #8
 80045da:	d1e9      	bne.n	80045b0 <arm_cmplx_mag_f32+0x134>
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e2:	f845 7c08 	str.w	r7, [r5, #-8]
 80045e6:	e793      	b.n	8004510 <arm_cmplx_mag_f32+0x94>
 80045e8:	f845 7c0c 	str.w	r7, [r5, #-12]
 80045ec:	e777      	b.n	80044de <arm_cmplx_mag_f32+0x62>
 80045ee:	eeb0 0a67 	vmov.f32	s0, s15
 80045f2:	9203      	str	r2, [sp, #12]
 80045f4:	9102      	str	r1, [sp, #8]
 80045f6:	9001      	str	r0, [sp, #4]
 80045f8:	f002 fffc 	bl	80075f4 <sqrtf>
 80045fc:	a801      	add	r0, sp, #4
 80045fe:	c807      	ldmia	r0, {r0, r1, r2}
 8004600:	e751      	b.n	80044a6 <arm_cmplx_mag_f32+0x2a>
 8004602:	eeb0 0a67 	vmov.f32	s0, s15
 8004606:	9101      	str	r1, [sp, #4]
 8004608:	f002 fff4 	bl	80075f4 <sqrtf>
 800460c:	9901      	ldr	r1, [sp, #4]
 800460e:	e7c9      	b.n	80045a4 <arm_cmplx_mag_f32+0x128>
 8004610:	eeb0 0a67 	vmov.f32	s0, s15
 8004614:	9203      	str	r2, [sp, #12]
 8004616:	9102      	str	r1, [sp, #8]
 8004618:	9001      	str	r0, [sp, #4]
 800461a:	f002 ffeb 	bl	80075f4 <sqrtf>
 800461e:	a801      	add	r0, sp, #4
 8004620:	c807      	ldmia	r0, {r0, r1, r2}
 8004622:	e78b      	b.n	800453c <arm_cmplx_mag_f32+0xc0>
 8004624:	eeb0 0a67 	vmov.f32	s0, s15
 8004628:	9203      	str	r2, [sp, #12]
 800462a:	9102      	str	r1, [sp, #8]
 800462c:	9001      	str	r0, [sp, #4]
 800462e:	f002 ffe1 	bl	80075f4 <sqrtf>
 8004632:	a801      	add	r0, sp, #4
 8004634:	c807      	ldmia	r0, {r0, r1, r2}
 8004636:	e769      	b.n	800450c <arm_cmplx_mag_f32+0x90>
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	9102      	str	r1, [sp, #8]
 8004640:	9001      	str	r0, [sp, #4]
 8004642:	f002 ffd7 	bl	80075f4 <sqrtf>
 8004646:	a801      	add	r0, sp, #4
 8004648:	c807      	ldmia	r0, {r0, r1, r2}
 800464a:	e746      	b.n	80044da <arm_cmplx_mag_f32+0x5e>

0800464c <arm_radix8_butterfly_f32>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	ed2d 8b10 	vpush	{d8-d15}
 8004654:	b09d      	sub	sp, #116	@ 0x74
 8004656:	461c      	mov	r4, r3
 8004658:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800497c <arm_radix8_butterfly_f32+0x330>
 800465c:	921a      	str	r2, [sp, #104]	@ 0x68
 800465e:	1d03      	adds	r3, r0, #4
 8004660:	4682      	mov	sl, r0
 8004662:	4689      	mov	r9, r1
 8004664:	468b      	mov	fp, r1
 8004666:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004668:	9400      	str	r4, [sp, #0]
 800466a:	469e      	mov	lr, r3
 800466c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004670:	005a      	lsls	r2, r3, #1
 8004672:	18d6      	adds	r6, r2, r3
 8004674:	18f5      	adds	r5, r6, r3
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	195a      	adds	r2, r3, r5
 800467a:	18d0      	adds	r0, r2, r3
 800467c:	00df      	lsls	r7, r3, #3
 800467e:	1819      	adds	r1, r3, r0
 8004680:	463c      	mov	r4, r7
 8004682:	9701      	str	r7, [sp, #4]
 8004684:	4457      	add	r7, sl
 8004686:	930c      	str	r3, [sp, #48]	@ 0x30
 8004688:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004692:	eb07 0c04 	add.w	ip, r7, r4
 8004696:	9c00      	ldr	r4, [sp, #0]
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800469e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80046a2:	3204      	adds	r2, #4
 80046a4:	3104      	adds	r1, #4
 80046a6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80046aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ae:	f04f 0800 	mov.w	r8, #0
 80046b2:	eddc 7a00 	vldr	s15, [ip]
 80046b6:	edd7 6a00 	vldr	s13, [r7]
 80046ba:	edd6 3a00 	vldr	s7, [r6]
 80046be:	ed5e aa01 	vldr	s21, [lr, #-4]
 80046c2:	edd5 4a00 	vldr	s9, [r5]
 80046c6:	ed90 2a00 	vldr	s4, [r0]
 80046ca:	ed12 7a01 	vldr	s14, [r2, #-4]
 80046ce:	ed51 0a01 	vldr	s1, [r1, #-4]
 80046d2:	ee77 8a82 	vadd.f32	s17, s15, s4
 80046d6:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80046da:	ee76 1a87 	vadd.f32	s3, s13, s14
 80046de:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80046e2:	ee31 6a84 	vadd.f32	s12, s3, s8
 80046e6:	ee33 5a28 	vadd.f32	s10, s6, s17
 80046ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80046ee:	ee75 6a06 	vadd.f32	s13, s10, s12
 80046f2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80046f6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80046fa:	ed85 5a00 	vstr	s10, [r5]
 80046fe:	ed96 1a01 	vldr	s2, [r6, #4]
 8004702:	edd7 5a01 	vldr	s11, [r7, #4]
 8004706:	ed92 aa00 	vldr	s20, [r2]
 800470a:	ed91 6a00 	vldr	s12, [r1]
 800470e:	ed9e 9a00 	vldr	s18, [lr]
 8004712:	ed95 5a01 	vldr	s10, [r5, #4]
 8004716:	eddc 6a01 	vldr	s13, [ip, #4]
 800471a:	edd0 9a01 	vldr	s19, [r0, #4]
 800471e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004722:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004726:	ee75 3aca 	vsub.f32	s7, s11, s20
 800472a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800472e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004732:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004736:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800473a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800473e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004742:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004746:	ee39 5a45 	vsub.f32	s10, s18, s10
 800474a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800474e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004752:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004756:	ee31 6a06 	vadd.f32	s12, s2, s12
 800475a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800475e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004762:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004766:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800476a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800476e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004772:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004776:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800477a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800477e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004782:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004786:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800478a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800478e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004792:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004796:	ee75 4a22 	vadd.f32	s9, s10, s5
 800479a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800479e:	ee72 7a67 	vsub.f32	s15, s4, s15
 80047a2:	ee33 8a06 	vadd.f32	s16, s6, s12
 80047a6:	ee75 2a87 	vadd.f32	s5, s11, s14
 80047aa:	ee31 9a28 	vadd.f32	s18, s2, s17
 80047ae:	ee33 6a46 	vsub.f32	s12, s6, s12
 80047b2:	ee74 0a61 	vsub.f32	s1, s8, s3
 80047b6:	ee33 2a80 	vadd.f32	s4, s7, s0
 80047ba:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80047be:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80047c2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80047c6:	ee31 1a68 	vsub.f32	s2, s2, s17
 80047ca:	ee34 4a21 	vadd.f32	s8, s8, s3
 80047ce:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80047d2:	ee74 4a85 	vadd.f32	s9, s9, s10
 80047d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80047da:	44d8      	add	r8, fp
 80047dc:	45c1      	cmp	r9, r8
 80047de:	ed8e 9a00 	vstr	s18, [lr]
 80047e2:	ed85 1a01 	vstr	s2, [r5, #4]
 80047e6:	449e      	add	lr, r3
 80047e8:	ed8c 8a00 	vstr	s16, [ip]
 80047ec:	441d      	add	r5, r3
 80047ee:	ed80 6a00 	vstr	s12, [r0]
 80047f2:	edcc 0a01 	vstr	s1, [ip, #4]
 80047f6:	ed80 4a01 	vstr	s8, [r0, #4]
 80047fa:	449c      	add	ip, r3
 80047fc:	ed87 2a00 	vstr	s4, [r7]
 8004800:	4418      	add	r0, r3
 8004802:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004806:	ed42 2a01 	vstr	s5, [r2, #-4]
 800480a:	ed86 7a00 	vstr	s14, [r6]
 800480e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004812:	edc1 4a00 	vstr	s9, [r1]
 8004816:	441f      	add	r7, r3
 8004818:	edc2 5a00 	vstr	s11, [r2]
 800481c:	4419      	add	r1, r3
 800481e:	edc6 6a01 	vstr	s13, [r6, #4]
 8004822:	441a      	add	r2, r3
 8004824:	441e      	add	r6, r3
 8004826:	f63f af44 	bhi.w	80046b2 <arm_radix8_butterfly_f32+0x66>
 800482a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800482c:	2907      	cmp	r1, #7
 800482e:	4620      	mov	r0, r4
 8004830:	f240 81e9 	bls.w	8004c06 <arm_radix8_butterfly_f32+0x5ba>
 8004834:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004838:	193e      	adds	r6, r7, r4
 800483a:	1935      	adds	r5, r6, r4
 800483c:	9c03      	ldr	r4, [sp, #12]
 800483e:	9000      	str	r0, [sp, #0]
 8004840:	4622      	mov	r2, r4
 8004842:	3201      	adds	r2, #1
 8004844:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004848:	9900      	ldr	r1, [sp, #0]
 800484a:	1828      	adds	r0, r5, r0
 800484c:	eb00 0e01 	add.w	lr, r0, r1
 8004850:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004852:	440a      	add	r2, r1
 8004854:	eb04 0c01 	add.w	ip, r4, r1
 8004858:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800485c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004860:	9a00      	ldr	r2, [sp, #0]
 8004862:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004864:	00ed      	lsls	r5, r5, #3
 8004866:	9511      	str	r5, [sp, #68]	@ 0x44
 8004868:	00d5      	lsls	r5, r2, #3
 800486a:	950d      	str	r5, [sp, #52]	@ 0x34
 800486c:	9d01      	ldr	r5, [sp, #4]
 800486e:	3508      	adds	r5, #8
 8004870:	9516      	str	r5, [sp, #88]	@ 0x58
 8004872:	9d02      	ldr	r5, [sp, #8]
 8004874:	3508      	adds	r5, #8
 8004876:	0114      	lsls	r4, r2, #4
 8004878:	9517      	str	r5, [sp, #92]	@ 0x5c
 800487a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800487c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800487e:	940e      	str	r4, [sp, #56]	@ 0x38
 8004880:	00c0      	lsls	r0, r0, #3
 8004882:	9010      	str	r0, [sp, #64]	@ 0x40
 8004884:	18aa      	adds	r2, r5, r2
 8004886:	9207      	str	r2, [sp, #28]
 8004888:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800488a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800488c:	18aa      	adds	r2, r5, r2
 800488e:	9208      	str	r2, [sp, #32]
 8004890:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004892:	18aa      	adds	r2, r5, r2
 8004894:	9209      	str	r2, [sp, #36]	@ 0x24
 8004896:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800489a:	f10e 0204 	add.w	r2, lr, #4
 800489e:	920a      	str	r2, [sp, #40]	@ 0x28
 80048a0:	00c9      	lsls	r1, r1, #3
 80048a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80048a4:	310c      	adds	r1, #12
 80048a6:	00f6      	lsls	r6, r6, #3
 80048a8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80048ac:	9114      	str	r1, [sp, #80]	@ 0x50
 80048ae:	18a9      	adds	r1, r5, r2
 80048b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048b2:	9612      	str	r6, [sp, #72]	@ 0x48
 80048b4:	00ff      	lsls	r7, r7, #3
 80048b6:	19ae      	adds	r6, r5, r6
 80048b8:	3008      	adds	r0, #8
 80048ba:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80048be:	9606      	str	r6, [sp, #24]
 80048c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80048c2:	18aa      	adds	r2, r5, r2
 80048c4:	0164      	lsls	r4, r4, #5
 80048c6:	19ee      	adds	r6, r5, r7
 80048c8:	f10c 000c 	add.w	r0, ip, #12
 80048cc:	9713      	str	r7, [sp, #76]	@ 0x4c
 80048ce:	9604      	str	r6, [sp, #16]
 80048d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80048d2:	9103      	str	r1, [sp, #12]
 80048d4:	9205      	str	r2, [sp, #20]
 80048d6:	f104 0208 	add.w	r2, r4, #8
 80048da:	9218      	str	r2, [sp, #96]	@ 0x60
 80048dc:	f04f 0801 	mov.w	r8, #1
 80048e0:	2200      	movs	r2, #0
 80048e2:	f102 0108 	add.w	r1, r2, #8
 80048e6:	460f      	mov	r7, r1
 80048e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80048ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80048ec:	188e      	adds	r6, r1, r2
 80048ee:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80048f0:	188d      	adds	r5, r1, r2
 80048f2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80048f4:	188c      	adds	r4, r1, r2
 80048f6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80048f8:	1888      	adds	r0, r1, r2
 80048fa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80048fc:	eb01 0c02 	add.w	ip, r1, r2
 8004900:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004902:	440a      	add	r2, r1
 8004904:	9903      	ldr	r1, [sp, #12]
 8004906:	edd1 fa00 	vldr	s31, [r1]
 800490a:	9905      	ldr	r1, [sp, #20]
 800490c:	ed91 fa00 	vldr	s30, [r1]
 8004910:	9904      	ldr	r1, [sp, #16]
 8004912:	edd1 ea00 	vldr	s29, [r1]
 8004916:	9906      	ldr	r1, [sp, #24]
 8004918:	ed91 ea00 	vldr	s28, [r1]
 800491c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800491e:	edd1 da00 	vldr	s27, [r1]
 8004922:	9908      	ldr	r1, [sp, #32]
 8004924:	ed91 da00 	vldr	s26, [r1]
 8004928:	9907      	ldr	r1, [sp, #28]
 800492a:	edd1 ca00 	vldr	s25, [r1]
 800492e:	9903      	ldr	r1, [sp, #12]
 8004930:	ed91 ca01 	vldr	s24, [r1, #4]
 8004934:	9905      	ldr	r1, [sp, #20]
 8004936:	edd1 ba01 	vldr	s23, [r1, #4]
 800493a:	9904      	ldr	r1, [sp, #16]
 800493c:	edd1 aa01 	vldr	s21, [r1, #4]
 8004940:	9906      	ldr	r1, [sp, #24]
 8004942:	ed91 aa01 	vldr	s20, [r1, #4]
 8004946:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004948:	edd1 7a01 	vldr	s15, [r1, #4]
 800494c:	9908      	ldr	r1, [sp, #32]
 800494e:	edcd 7a00 	vstr	s15, [sp]
 8004952:	edd1 7a01 	vldr	s15, [r1, #4]
 8004956:	9907      	ldr	r1, [sp, #28]
 8004958:	edcd 7a01 	vstr	s15, [sp, #4]
 800495c:	edd1 7a01 	vldr	s15, [r1, #4]
 8004960:	eb0a 0e07 	add.w	lr, sl, r7
 8004964:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8004966:	edcd 7a02 	vstr	s15, [sp, #8]
 800496a:	eb0c 010a 	add.w	r1, ip, sl
 800496e:	4456      	add	r6, sl
 8004970:	4455      	add	r5, sl
 8004972:	4454      	add	r4, sl
 8004974:	4450      	add	r0, sl
 8004976:	4452      	add	r2, sl
 8004978:	46c4      	mov	ip, r8
 800497a:	e001      	b.n	8004980 <arm_radix8_butterfly_f32+0x334>
 800497c:	3f3504f3 	.word	0x3f3504f3
 8004980:	ed96 5a00 	vldr	s10, [r6]
 8004984:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004988:	ed11 6a01 	vldr	s12, [r1, #-4]
 800498c:	edd0 7a00 	vldr	s15, [r0]
 8004990:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004994:	edde 3a00 	vldr	s7, [lr]
 8004998:	ed94 3a00 	vldr	s6, [r4]
 800499c:	ed95 2a00 	vldr	s4, [r5]
 80049a0:	ed9e 0a01 	vldr	s0, [lr, #4]
 80049a4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80049a8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80049ac:	ee33 4a29 	vadd.f32	s8, s6, s19
 80049b0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80049b4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80049b8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80049bc:	ee32 2a46 	vsub.f32	s4, s4, s12
 80049c0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80049c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049c8:	ed8e 6a00 	vstr	s12, [lr]
 80049cc:	edd0 8a01 	vldr	s17, [r0, #4]
 80049d0:	ed95 9a01 	vldr	s18, [r5, #4]
 80049d4:	edd1 2a00 	vldr	s5, [r1]
 80049d8:	ed97 7a00 	vldr	s14, [r7]
 80049dc:	edd4 0a01 	vldr	s1, [r4, #4]
 80049e0:	ed96 6a01 	vldr	s12, [r6, #4]
 80049e4:	edd2 5a00 	vldr	s11, [r2]
 80049e8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80049ec:	ee33 3a69 	vsub.f32	s6, s6, s19
 80049f0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80049f4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80049f8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80049fc:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004a00:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004a04:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004a08:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004a0c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004a10:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004a14:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004a18:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004a1c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004a20:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004a24:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004a28:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004a2c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004a30:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004a34:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004a38:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004a3c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004a40:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004a44:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004a48:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004a4c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004a50:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004a54:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004a58:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004a5c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004a60:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004a64:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004a68:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004a6c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004a70:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004a74:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004a78:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004a7c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004a80:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004a84:	ee72 4a24 	vadd.f32	s9, s4, s9
 8004a88:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004a8c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004a90:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004a94:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004a98:	ee36 6a03 	vadd.f32	s12, s12, s6
 8004a9c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004aa0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004aa4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004aa8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004aac:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004ab0:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004ab4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004ab8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004abc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004ac0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004ac4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004ac8:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004acc:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004ad0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004ad4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004ad8:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004adc:	ed8e 1a01 	vstr	s2, [lr, #4]
 8004ae0:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004ae4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004ae8:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004aec:	ed86 3a00 	vstr	s6, [r6]
 8004af0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004af4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004af8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004afc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004b00:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004b04:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004b08:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004b0c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004b10:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004b14:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004b18:	ed9d 4a00 	vldr	s8, [sp]
 8004b1c:	edc6 6a01 	vstr	s13, [r6, #4]
 8004b20:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004b24:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004b28:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004b2c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004b30:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004b34:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004b38:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004b3c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004b40:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004b44:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004b48:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004b4c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004b50:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004b54:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004b58:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004b5c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004b60:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004b64:	44dc      	add	ip, fp
 8004b66:	45e1      	cmp	r9, ip
 8004b68:	ed84 9a00 	vstr	s18, [r4]
 8004b6c:	edc4 3a01 	vstr	s7, [r4, #4]
 8004b70:	449e      	add	lr, r3
 8004b72:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004b76:	edc2 2a00 	vstr	s5, [r2]
 8004b7a:	441e      	add	r6, r3
 8004b7c:	ed85 2a00 	vstr	s4, [r5]
 8004b80:	ed85 8a01 	vstr	s16, [r5, #4]
 8004b84:	441c      	add	r4, r3
 8004b86:	ed47 1a01 	vstr	s3, [r7, #-4]
 8004b8a:	ed87 0a00 	vstr	s0, [r7]
 8004b8e:	441a      	add	r2, r3
 8004b90:	ed41 4a01 	vstr	s9, [r1, #-4]
 8004b94:	edc1 9a00 	vstr	s19, [r1]
 8004b98:	441d      	add	r5, r3
 8004b9a:	edc0 0a00 	vstr	s1, [r0]
 8004b9e:	441f      	add	r7, r3
 8004ba0:	ed80 6a01 	vstr	s12, [r0, #4]
 8004ba4:	4419      	add	r1, r3
 8004ba6:	4418      	add	r0, r3
 8004ba8:	f63f aeea 	bhi.w	8004980 <arm_radix8_butterfly_f32+0x334>
 8004bac:	9a03      	ldr	r2, [sp, #12]
 8004bae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004bb0:	440a      	add	r2, r1
 8004bb2:	9203      	str	r2, [sp, #12]
 8004bb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004bb6:	9a05      	ldr	r2, [sp, #20]
 8004bb8:	440a      	add	r2, r1
 8004bba:	9205      	str	r2, [sp, #20]
 8004bbc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004bbe:	9a04      	ldr	r2, [sp, #16]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	9204      	str	r2, [sp, #16]
 8004bc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004bc6:	9a06      	ldr	r2, [sp, #24]
 8004bc8:	440a      	add	r2, r1
 8004bca:	9206      	str	r2, [sp, #24]
 8004bcc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bd0:	440a      	add	r2, r1
 8004bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004bd6:	9a08      	ldr	r2, [sp, #32]
 8004bd8:	440a      	add	r2, r1
 8004bda:	9208      	str	r2, [sp, #32]
 8004bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004bde:	9a07      	ldr	r2, [sp, #28]
 8004be0:	440a      	add	r2, r1
 8004be2:	9207      	str	r2, [sp, #28]
 8004be4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004be8:	f108 0801 	add.w	r8, r8, #1
 8004bec:	3208      	adds	r2, #8
 8004bee:	4588      	cmp	r8, r1
 8004bf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004bf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bf4:	f47f ae75 	bne.w	80048e2 <arm_radix8_butterfly_f32+0x296>
 8004bf8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	46c3      	mov	fp, r8
 8004c00:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8004c04:	e532      	b.n	800466c <arm_radix8_butterfly_f32+0x20>
 8004c06:	b01d      	add	sp, #116	@ 0x74
 8004c08:	ecbd 8b10 	vpop	{d8-d15}
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c10 <__cvt>:
 8004c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c14:	ec57 6b10 	vmov	r6, r7, d0
 8004c18:	2f00      	cmp	r7, #0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	463b      	mov	r3, r7
 8004c20:	bfbb      	ittet	lt
 8004c22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c26:	461f      	movlt	r7, r3
 8004c28:	2300      	movge	r3, #0
 8004c2a:	232d      	movlt	r3, #45	@ 0x2d
 8004c2c:	700b      	strb	r3, [r1, #0]
 8004c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c34:	4691      	mov	r9, r2
 8004c36:	f023 0820 	bic.w	r8, r3, #32
 8004c3a:	bfbc      	itt	lt
 8004c3c:	4632      	movlt	r2, r6
 8004c3e:	4616      	movlt	r6, r2
 8004c40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c44:	d005      	beq.n	8004c52 <__cvt+0x42>
 8004c46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c4a:	d100      	bne.n	8004c4e <__cvt+0x3e>
 8004c4c:	3401      	adds	r4, #1
 8004c4e:	2102      	movs	r1, #2
 8004c50:	e000      	b.n	8004c54 <__cvt+0x44>
 8004c52:	2103      	movs	r1, #3
 8004c54:	ab03      	add	r3, sp, #12
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	ab02      	add	r3, sp, #8
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	ec47 6b10 	vmov	d0, r6, r7
 8004c60:	4653      	mov	r3, sl
 8004c62:	4622      	mov	r2, r4
 8004c64:	f000 ff40 	bl	8005ae8 <_dtoa_r>
 8004c68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	d119      	bne.n	8004ca4 <__cvt+0x94>
 8004c70:	f019 0f01 	tst.w	r9, #1
 8004c74:	d00e      	beq.n	8004c94 <__cvt+0x84>
 8004c76:	eb00 0904 	add.w	r9, r0, r4
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4630      	mov	r0, r6
 8004c80:	4639      	mov	r1, r7
 8004c82:	f7fb ff89 	bl	8000b98 <__aeabi_dcmpeq>
 8004c86:	b108      	cbz	r0, 8004c8c <__cvt+0x7c>
 8004c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c8c:	2230      	movs	r2, #48	@ 0x30
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	454b      	cmp	r3, r9
 8004c92:	d31e      	bcc.n	8004cd2 <__cvt+0xc2>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c98:	1b5b      	subs	r3, r3, r5
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	b004      	add	sp, #16
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ca8:	eb00 0904 	add.w	r9, r0, r4
 8004cac:	d1e5      	bne.n	8004c7a <__cvt+0x6a>
 8004cae:	7803      	ldrb	r3, [r0, #0]
 8004cb0:	2b30      	cmp	r3, #48	@ 0x30
 8004cb2:	d10a      	bne.n	8004cca <__cvt+0xba>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb ff6c 	bl	8000b98 <__aeabi_dcmpeq>
 8004cc0:	b918      	cbnz	r0, 8004cca <__cvt+0xba>
 8004cc2:	f1c4 0401 	rsb	r4, r4, #1
 8004cc6:	f8ca 4000 	str.w	r4, [sl]
 8004cca:	f8da 3000 	ldr.w	r3, [sl]
 8004cce:	4499      	add	r9, r3
 8004cd0:	e7d3      	b.n	8004c7a <__cvt+0x6a>
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	9103      	str	r1, [sp, #12]
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e7d9      	b.n	8004c8e <__cvt+0x7e>

08004cda <__exponent>:
 8004cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	bfba      	itte	lt
 8004ce0:	4249      	neglt	r1, r1
 8004ce2:	232d      	movlt	r3, #45	@ 0x2d
 8004ce4:	232b      	movge	r3, #43	@ 0x2b
 8004ce6:	2909      	cmp	r1, #9
 8004ce8:	7002      	strb	r2, [r0, #0]
 8004cea:	7043      	strb	r3, [r0, #1]
 8004cec:	dd29      	ble.n	8004d42 <__exponent+0x68>
 8004cee:	f10d 0307 	add.w	r3, sp, #7
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	270a      	movs	r7, #10
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cfc:	fb07 1416 	mls	r4, r7, r6, r1
 8004d00:	3430      	adds	r4, #48	@ 0x30
 8004d02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d06:	460c      	mov	r4, r1
 8004d08:	2c63      	cmp	r4, #99	@ 0x63
 8004d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d0e:	4631      	mov	r1, r6
 8004d10:	dcf1      	bgt.n	8004cf6 <__exponent+0x1c>
 8004d12:	3130      	adds	r1, #48	@ 0x30
 8004d14:	1e94      	subs	r4, r2, #2
 8004d16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d1a:	1c41      	adds	r1, r0, #1
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	42ab      	cmp	r3, r5
 8004d20:	d30a      	bcc.n	8004d38 <__exponent+0x5e>
 8004d22:	f10d 0309 	add.w	r3, sp, #9
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	42ac      	cmp	r4, r5
 8004d2a:	bf88      	it	hi
 8004d2c:	2300      	movhi	r3, #0
 8004d2e:	3302      	adds	r3, #2
 8004d30:	4403      	add	r3, r0
 8004d32:	1a18      	subs	r0, r3, r0
 8004d34:	b003      	add	sp, #12
 8004d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d40:	e7ed      	b.n	8004d1e <__exponent+0x44>
 8004d42:	2330      	movs	r3, #48	@ 0x30
 8004d44:	3130      	adds	r1, #48	@ 0x30
 8004d46:	7083      	strb	r3, [r0, #2]
 8004d48:	70c1      	strb	r1, [r0, #3]
 8004d4a:	1d03      	adds	r3, r0, #4
 8004d4c:	e7f1      	b.n	8004d32 <__exponent+0x58>
	...

08004d50 <_printf_float>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	b08d      	sub	sp, #52	@ 0x34
 8004d56:	460c      	mov	r4, r1
 8004d58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	4605      	mov	r5, r0
 8004d62:	f000 fdbf 	bl	80058e4 <_localeconv_r>
 8004d66:	6803      	ldr	r3, [r0, #0]
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb fae8 	bl	8000340 <strlen>
 8004d70:	2300      	movs	r3, #0
 8004d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d74:	f8d8 3000 	ldr.w	r3, [r8]
 8004d78:	9005      	str	r0, [sp, #20]
 8004d7a:	3307      	adds	r3, #7
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	f103 0208 	add.w	r2, r3, #8
 8004d84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d88:	f8d4 b000 	ldr.w	fp, [r4]
 8004d8c:	f8c8 2000 	str.w	r2, [r8]
 8004d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da6:	4b9c      	ldr	r3, [pc, #624]	@ (8005018 <_printf_float+0x2c8>)
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	f7fb ff26 	bl	8000bfc <__aeabi_dcmpun>
 8004db0:	bb70      	cbnz	r0, 8004e10 <_printf_float+0xc0>
 8004db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004db6:	4b98      	ldr	r3, [pc, #608]	@ (8005018 <_printf_float+0x2c8>)
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	f7fb ff00 	bl	8000bc0 <__aeabi_dcmple>
 8004dc0:	bb30      	cbnz	r0, 8004e10 <_printf_float+0xc0>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	4649      	mov	r1, r9
 8004dca:	f7fb feef 	bl	8000bac <__aeabi_dcmplt>
 8004dce:	b110      	cbz	r0, 8004dd6 <_printf_float+0x86>
 8004dd0:	232d      	movs	r3, #45	@ 0x2d
 8004dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd6:	4a91      	ldr	r2, [pc, #580]	@ (800501c <_printf_float+0x2cc>)
 8004dd8:	4b91      	ldr	r3, [pc, #580]	@ (8005020 <_printf_float+0x2d0>)
 8004dda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dde:	bf94      	ite	ls
 8004de0:	4690      	movls	r8, r2
 8004de2:	4698      	movhi	r8, r3
 8004de4:	2303      	movs	r3, #3
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	f02b 0304 	bic.w	r3, fp, #4
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	f04f 0900 	mov.w	r9, #0
 8004df2:	9700      	str	r7, [sp, #0]
 8004df4:	4633      	mov	r3, r6
 8004df6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f9d2 	bl	80051a4 <_printf_common>
 8004e00:	3001      	adds	r0, #1
 8004e02:	f040 808d 	bne.w	8004f20 <_printf_float+0x1d0>
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	b00d      	add	sp, #52	@ 0x34
 8004e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fef0 	bl	8000bfc <__aeabi_dcmpun>
 8004e1c:	b140      	cbz	r0, 8004e30 <_printf_float+0xe0>
 8004e1e:	464b      	mov	r3, r9
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfbc      	itt	lt
 8004e24:	232d      	movlt	r3, #45	@ 0x2d
 8004e26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005024 <_printf_float+0x2d4>)
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005028 <_printf_float+0x2d8>)
 8004e2e:	e7d4      	b.n	8004dda <_printf_float+0x8a>
 8004e30:	6863      	ldr	r3, [r4, #4]
 8004e32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e36:	9206      	str	r2, [sp, #24]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	d13b      	bne.n	8004eb4 <_printf_float+0x164>
 8004e3c:	2306      	movs	r3, #6
 8004e3e:	6063      	str	r3, [r4, #4]
 8004e40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e44:	2300      	movs	r3, #0
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e50:	ab09      	add	r3, sp, #36	@ 0x24
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6861      	ldr	r1, [r4, #4]
 8004e56:	ec49 8b10 	vmov	d0, r8, r9
 8004e5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7ff fed6 	bl	8004c10 <__cvt>
 8004e64:	9b06      	ldr	r3, [sp, #24]
 8004e66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e68:	2b47      	cmp	r3, #71	@ 0x47
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	d129      	bne.n	8004ec2 <_printf_float+0x172>
 8004e6e:	1cc8      	adds	r0, r1, #3
 8004e70:	db02      	blt.n	8004e78 <_printf_float+0x128>
 8004e72:	6863      	ldr	r3, [r4, #4]
 8004e74:	4299      	cmp	r1, r3
 8004e76:	dd41      	ble.n	8004efc <_printf_float+0x1ac>
 8004e78:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e7c:	fa5f fa8a 	uxtb.w	sl, sl
 8004e80:	3901      	subs	r1, #1
 8004e82:	4652      	mov	r2, sl
 8004e84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e88:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e8a:	f7ff ff26 	bl	8004cda <__exponent>
 8004e8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e90:	1813      	adds	r3, r2, r0
 8004e92:	2a01      	cmp	r2, #1
 8004e94:	4681      	mov	r9, r0
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	dc02      	bgt.n	8004ea0 <_printf_float+0x150>
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	07d2      	lsls	r2, r2, #31
 8004e9e:	d501      	bpl.n	8004ea4 <_printf_float+0x154>
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0a2      	beq.n	8004df2 <_printf_float+0xa2>
 8004eac:	232d      	movs	r3, #45	@ 0x2d
 8004eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb2:	e79e      	b.n	8004df2 <_printf_float+0xa2>
 8004eb4:	9a06      	ldr	r2, [sp, #24]
 8004eb6:	2a47      	cmp	r2, #71	@ 0x47
 8004eb8:	d1c2      	bne.n	8004e40 <_printf_float+0xf0>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1c0      	bne.n	8004e40 <_printf_float+0xf0>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e7bd      	b.n	8004e3e <_printf_float+0xee>
 8004ec2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ec6:	d9db      	bls.n	8004e80 <_printf_float+0x130>
 8004ec8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ecc:	d118      	bne.n	8004f00 <_printf_float+0x1b0>
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	6863      	ldr	r3, [r4, #4]
 8004ed2:	dd0b      	ble.n	8004eec <_printf_float+0x19c>
 8004ed4:	6121      	str	r1, [r4, #16]
 8004ed6:	b913      	cbnz	r3, 8004ede <_printf_float+0x18e>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	07d0      	lsls	r0, r2, #31
 8004edc:	d502      	bpl.n	8004ee4 <_printf_float+0x194>
 8004ede:	3301      	adds	r3, #1
 8004ee0:	440b      	add	r3, r1
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ee6:	f04f 0900 	mov.w	r9, #0
 8004eea:	e7db      	b.n	8004ea4 <_printf_float+0x154>
 8004eec:	b913      	cbnz	r3, 8004ef4 <_printf_float+0x1a4>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	07d2      	lsls	r2, r2, #31
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_float+0x1a8>
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	e7f4      	b.n	8004ee2 <_printf_float+0x192>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e7f2      	b.n	8004ee2 <_printf_float+0x192>
 8004efc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f02:	4299      	cmp	r1, r3
 8004f04:	db05      	blt.n	8004f12 <_printf_float+0x1c2>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	6121      	str	r1, [r4, #16]
 8004f0a:	07d8      	lsls	r0, r3, #31
 8004f0c:	d5ea      	bpl.n	8004ee4 <_printf_float+0x194>
 8004f0e:	1c4b      	adds	r3, r1, #1
 8004f10:	e7e7      	b.n	8004ee2 <_printf_float+0x192>
 8004f12:	2900      	cmp	r1, #0
 8004f14:	bfd4      	ite	le
 8004f16:	f1c1 0202 	rsble	r2, r1, #2
 8004f1a:	2201      	movgt	r2, #1
 8004f1c:	4413      	add	r3, r2
 8004f1e:	e7e0      	b.n	8004ee2 <_printf_float+0x192>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	055a      	lsls	r2, r3, #21
 8004f24:	d407      	bmi.n	8004f36 <_printf_float+0x1e6>
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	d12b      	bne.n	8004f8c <_printf_float+0x23c>
 8004f34:	e767      	b.n	8004e06 <_printf_float+0xb6>
 8004f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f3a:	f240 80dd 	bls.w	80050f8 <_printf_float+0x3a8>
 8004f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	f7fb fe27 	bl	8000b98 <__aeabi_dcmpeq>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d033      	beq.n	8004fb6 <_printf_float+0x266>
 8004f4e:	4a37      	ldr	r2, [pc, #220]	@ (800502c <_printf_float+0x2dc>)
 8004f50:	2301      	movs	r3, #1
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f af54 	beq.w	8004e06 <_printf_float+0xb6>
 8004f5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f62:	4543      	cmp	r3, r8
 8004f64:	db02      	blt.n	8004f6c <_printf_float+0x21c>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	07d8      	lsls	r0, r3, #31
 8004f6a:	d50f      	bpl.n	8004f8c <_printf_float+0x23c>
 8004f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f af45 	beq.w	8004e06 <_printf_float+0xb6>
 8004f7c:	f04f 0900 	mov.w	r9, #0
 8004f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f84:	f104 0a1a 	add.w	sl, r4, #26
 8004f88:	45c8      	cmp	r8, r9
 8004f8a:	dc09      	bgt.n	8004fa0 <_printf_float+0x250>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	079b      	lsls	r3, r3, #30
 8004f90:	f100 8103 	bmi.w	800519a <_printf_float+0x44a>
 8004f94:	68e0      	ldr	r0, [r4, #12]
 8004f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f98:	4298      	cmp	r0, r3
 8004f9a:	bfb8      	it	lt
 8004f9c:	4618      	movlt	r0, r3
 8004f9e:	e734      	b.n	8004e0a <_printf_float+0xba>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	47b8      	blx	r7
 8004faa:	3001      	adds	r0, #1
 8004fac:	f43f af2b 	beq.w	8004e06 <_printf_float+0xb6>
 8004fb0:	f109 0901 	add.w	r9, r9, #1
 8004fb4:	e7e8      	b.n	8004f88 <_printf_float+0x238>
 8004fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dc39      	bgt.n	8005030 <_printf_float+0x2e0>
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800502c <_printf_float+0x2dc>)
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f43f af1d 	beq.w	8004e06 <_printf_float+0xb6>
 8004fcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fd0:	ea59 0303 	orrs.w	r3, r9, r3
 8004fd4:	d102      	bne.n	8004fdc <_printf_float+0x28c>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	07d9      	lsls	r1, r3, #31
 8004fda:	d5d7      	bpl.n	8004f8c <_printf_float+0x23c>
 8004fdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f af0d 	beq.w	8004e06 <_printf_float+0xb6>
 8004fec:	f04f 0a00 	mov.w	sl, #0
 8004ff0:	f104 0b1a 	add.w	fp, r4, #26
 8004ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff6:	425b      	negs	r3, r3
 8004ff8:	4553      	cmp	r3, sl
 8004ffa:	dc01      	bgt.n	8005000 <_printf_float+0x2b0>
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	e793      	b.n	8004f28 <_printf_float+0x1d8>
 8005000:	2301      	movs	r3, #1
 8005002:	465a      	mov	r2, fp
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	f43f aefb 	beq.w	8004e06 <_printf_float+0xb6>
 8005010:	f10a 0a01 	add.w	sl, sl, #1
 8005014:	e7ee      	b.n	8004ff4 <_printf_float+0x2a4>
 8005016:	bf00      	nop
 8005018:	7fefffff 	.word	0x7fefffff
 800501c:	0801cc0c 	.word	0x0801cc0c
 8005020:	0801cc10 	.word	0x0801cc10
 8005024:	0801cc14 	.word	0x0801cc14
 8005028:	0801cc18 	.word	0x0801cc18
 800502c:	0801cc1c 	.word	0x0801cc1c
 8005030:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005032:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005036:	4553      	cmp	r3, sl
 8005038:	bfa8      	it	ge
 800503a:	4653      	movge	r3, sl
 800503c:	2b00      	cmp	r3, #0
 800503e:	4699      	mov	r9, r3
 8005040:	dc36      	bgt.n	80050b0 <_printf_float+0x360>
 8005042:	f04f 0b00 	mov.w	fp, #0
 8005046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800504a:	f104 021a 	add.w	r2, r4, #26
 800504e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005050:	9306      	str	r3, [sp, #24]
 8005052:	eba3 0309 	sub.w	r3, r3, r9
 8005056:	455b      	cmp	r3, fp
 8005058:	dc31      	bgt.n	80050be <_printf_float+0x36e>
 800505a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800505c:	459a      	cmp	sl, r3
 800505e:	dc3a      	bgt.n	80050d6 <_printf_float+0x386>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	07da      	lsls	r2, r3, #31
 8005064:	d437      	bmi.n	80050d6 <_printf_float+0x386>
 8005066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005068:	ebaa 0903 	sub.w	r9, sl, r3
 800506c:	9b06      	ldr	r3, [sp, #24]
 800506e:	ebaa 0303 	sub.w	r3, sl, r3
 8005072:	4599      	cmp	r9, r3
 8005074:	bfa8      	it	ge
 8005076:	4699      	movge	r9, r3
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	dc33      	bgt.n	80050e6 <_printf_float+0x396>
 800507e:	f04f 0800 	mov.w	r8, #0
 8005082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005086:	f104 0b1a 	add.w	fp, r4, #26
 800508a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508c:	ebaa 0303 	sub.w	r3, sl, r3
 8005090:	eba3 0309 	sub.w	r3, r3, r9
 8005094:	4543      	cmp	r3, r8
 8005096:	f77f af79 	ble.w	8004f8c <_printf_float+0x23c>
 800509a:	2301      	movs	r3, #1
 800509c:	465a      	mov	r2, fp
 800509e:	4631      	mov	r1, r6
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b8      	blx	r7
 80050a4:	3001      	adds	r0, #1
 80050a6:	f43f aeae 	beq.w	8004e06 <_printf_float+0xb6>
 80050aa:	f108 0801 	add.w	r8, r8, #1
 80050ae:	e7ec      	b.n	800508a <_printf_float+0x33a>
 80050b0:	4642      	mov	r2, r8
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	d1c2      	bne.n	8005042 <_printf_float+0x2f2>
 80050bc:	e6a3      	b.n	8004e06 <_printf_float+0xb6>
 80050be:	2301      	movs	r3, #1
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	9206      	str	r2, [sp, #24]
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f ae9c 	beq.w	8004e06 <_printf_float+0xb6>
 80050ce:	9a06      	ldr	r2, [sp, #24]
 80050d0:	f10b 0b01 	add.w	fp, fp, #1
 80050d4:	e7bb      	b.n	800504e <_printf_float+0x2fe>
 80050d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	d1c0      	bne.n	8005066 <_printf_float+0x316>
 80050e4:	e68f      	b.n	8004e06 <_printf_float+0xb6>
 80050e6:	9a06      	ldr	r2, [sp, #24]
 80050e8:	464b      	mov	r3, r9
 80050ea:	4442      	add	r2, r8
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	d1c3      	bne.n	800507e <_printf_float+0x32e>
 80050f6:	e686      	b.n	8004e06 <_printf_float+0xb6>
 80050f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050fc:	f1ba 0f01 	cmp.w	sl, #1
 8005100:	dc01      	bgt.n	8005106 <_printf_float+0x3b6>
 8005102:	07db      	lsls	r3, r3, #31
 8005104:	d536      	bpl.n	8005174 <_printf_float+0x424>
 8005106:	2301      	movs	r3, #1
 8005108:	4642      	mov	r2, r8
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	f43f ae78 	beq.w	8004e06 <_printf_float+0xb6>
 8005116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f ae70 	beq.w	8004e06 <_printf_float+0xb6>
 8005126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800512a:	2200      	movs	r2, #0
 800512c:	2300      	movs	r3, #0
 800512e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005132:	f7fb fd31 	bl	8000b98 <__aeabi_dcmpeq>
 8005136:	b9c0      	cbnz	r0, 800516a <_printf_float+0x41a>
 8005138:	4653      	mov	r3, sl
 800513a:	f108 0201 	add.w	r2, r8, #1
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	d10c      	bne.n	8005162 <_printf_float+0x412>
 8005148:	e65d      	b.n	8004e06 <_printf_float+0xb6>
 800514a:	2301      	movs	r3, #1
 800514c:	465a      	mov	r2, fp
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	f43f ae56 	beq.w	8004e06 <_printf_float+0xb6>
 800515a:	f108 0801 	add.w	r8, r8, #1
 800515e:	45d0      	cmp	r8, sl
 8005160:	dbf3      	blt.n	800514a <_printf_float+0x3fa>
 8005162:	464b      	mov	r3, r9
 8005164:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005168:	e6df      	b.n	8004f2a <_printf_float+0x1da>
 800516a:	f04f 0800 	mov.w	r8, #0
 800516e:	f104 0b1a 	add.w	fp, r4, #26
 8005172:	e7f4      	b.n	800515e <_printf_float+0x40e>
 8005174:	2301      	movs	r3, #1
 8005176:	4642      	mov	r2, r8
 8005178:	e7e1      	b.n	800513e <_printf_float+0x3ee>
 800517a:	2301      	movs	r3, #1
 800517c:	464a      	mov	r2, r9
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	f43f ae3e 	beq.w	8004e06 <_printf_float+0xb6>
 800518a:	f108 0801 	add.w	r8, r8, #1
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	4543      	cmp	r3, r8
 8005196:	dcf0      	bgt.n	800517a <_printf_float+0x42a>
 8005198:	e6fc      	b.n	8004f94 <_printf_float+0x244>
 800519a:	f04f 0800 	mov.w	r8, #0
 800519e:	f104 0919 	add.w	r9, r4, #25
 80051a2:	e7f4      	b.n	800518e <_printf_float+0x43e>

080051a4 <_printf_common>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	4616      	mov	r6, r2
 80051aa:	4698      	mov	r8, r3
 80051ac:	688a      	ldr	r2, [r1, #8]
 80051ae:	690b      	ldr	r3, [r1, #16]
 80051b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bfb8      	it	lt
 80051b8:	4613      	movlt	r3, r2
 80051ba:	6033      	str	r3, [r6, #0]
 80051bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051c0:	4607      	mov	r7, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	b10a      	cbz	r2, 80051ca <_printf_common+0x26>
 80051c6:	3301      	adds	r3, #1
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	0699      	lsls	r1, r3, #26
 80051ce:	bf42      	ittt	mi
 80051d0:	6833      	ldrmi	r3, [r6, #0]
 80051d2:	3302      	addmi	r3, #2
 80051d4:	6033      	strmi	r3, [r6, #0]
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	f015 0506 	ands.w	r5, r5, #6
 80051dc:	d106      	bne.n	80051ec <_printf_common+0x48>
 80051de:	f104 0a19 	add.w	sl, r4, #25
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	6832      	ldr	r2, [r6, #0]
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dc26      	bgt.n	800523a <_printf_common+0x96>
 80051ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	3b00      	subs	r3, #0
 80051f4:	bf18      	it	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	0692      	lsls	r2, r2, #26
 80051fa:	d42b      	bmi.n	8005254 <_printf_common+0xb0>
 80051fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005200:	4641      	mov	r1, r8
 8005202:	4638      	mov	r0, r7
 8005204:	47c8      	blx	r9
 8005206:	3001      	adds	r0, #1
 8005208:	d01e      	beq.n	8005248 <_printf_common+0xa4>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	6922      	ldr	r2, [r4, #16]
 800520e:	f003 0306 	and.w	r3, r3, #6
 8005212:	2b04      	cmp	r3, #4
 8005214:	bf02      	ittt	eq
 8005216:	68e5      	ldreq	r5, [r4, #12]
 8005218:	6833      	ldreq	r3, [r6, #0]
 800521a:	1aed      	subeq	r5, r5, r3
 800521c:	68a3      	ldr	r3, [r4, #8]
 800521e:	bf0c      	ite	eq
 8005220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005224:	2500      	movne	r5, #0
 8005226:	4293      	cmp	r3, r2
 8005228:	bfc4      	itt	gt
 800522a:	1a9b      	subgt	r3, r3, r2
 800522c:	18ed      	addgt	r5, r5, r3
 800522e:	2600      	movs	r6, #0
 8005230:	341a      	adds	r4, #26
 8005232:	42b5      	cmp	r5, r6
 8005234:	d11a      	bne.n	800526c <_printf_common+0xc8>
 8005236:	2000      	movs	r0, #0
 8005238:	e008      	b.n	800524c <_printf_common+0xa8>
 800523a:	2301      	movs	r3, #1
 800523c:	4652      	mov	r2, sl
 800523e:	4641      	mov	r1, r8
 8005240:	4638      	mov	r0, r7
 8005242:	47c8      	blx	r9
 8005244:	3001      	adds	r0, #1
 8005246:	d103      	bne.n	8005250 <_printf_common+0xac>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005250:	3501      	adds	r5, #1
 8005252:	e7c6      	b.n	80051e2 <_printf_common+0x3e>
 8005254:	18e1      	adds	r1, r4, r3
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	2030      	movs	r0, #48	@ 0x30
 800525a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800525e:	4422      	add	r2, r4
 8005260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005268:	3302      	adds	r3, #2
 800526a:	e7c7      	b.n	80051fc <_printf_common+0x58>
 800526c:	2301      	movs	r3, #1
 800526e:	4622      	mov	r2, r4
 8005270:	4641      	mov	r1, r8
 8005272:	4638      	mov	r0, r7
 8005274:	47c8      	blx	r9
 8005276:	3001      	adds	r0, #1
 8005278:	d0e6      	beq.n	8005248 <_printf_common+0xa4>
 800527a:	3601      	adds	r6, #1
 800527c:	e7d9      	b.n	8005232 <_printf_common+0x8e>
	...

08005280 <_printf_i>:
 8005280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	7e0f      	ldrb	r7, [r1, #24]
 8005286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005288:	2f78      	cmp	r7, #120	@ 0x78
 800528a:	4691      	mov	r9, r2
 800528c:	4680      	mov	r8, r0
 800528e:	460c      	mov	r4, r1
 8005290:	469a      	mov	sl, r3
 8005292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005296:	d807      	bhi.n	80052a8 <_printf_i+0x28>
 8005298:	2f62      	cmp	r7, #98	@ 0x62
 800529a:	d80a      	bhi.n	80052b2 <_printf_i+0x32>
 800529c:	2f00      	cmp	r7, #0
 800529e:	f000 80d2 	beq.w	8005446 <_printf_i+0x1c6>
 80052a2:	2f58      	cmp	r7, #88	@ 0x58
 80052a4:	f000 80b9 	beq.w	800541a <_printf_i+0x19a>
 80052a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052b0:	e03a      	b.n	8005328 <_printf_i+0xa8>
 80052b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052b6:	2b15      	cmp	r3, #21
 80052b8:	d8f6      	bhi.n	80052a8 <_printf_i+0x28>
 80052ba:	a101      	add	r1, pc, #4	@ (adr r1, 80052c0 <_printf_i+0x40>)
 80052bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052c0:	08005319 	.word	0x08005319
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	080052a9 	.word	0x080052a9
 80052cc:	080052a9 	.word	0x080052a9
 80052d0:	080052a9 	.word	0x080052a9
 80052d4:	080052a9 	.word	0x080052a9
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	080052a9 	.word	0x080052a9
 80052e0:	080052a9 	.word	0x080052a9
 80052e4:	080052a9 	.word	0x080052a9
 80052e8:	080052a9 	.word	0x080052a9
 80052ec:	0800542d 	.word	0x0800542d
 80052f0:	08005357 	.word	0x08005357
 80052f4:	080053e7 	.word	0x080053e7
 80052f8:	080052a9 	.word	0x080052a9
 80052fc:	080052a9 	.word	0x080052a9
 8005300:	0800544f 	.word	0x0800544f
 8005304:	080052a9 	.word	0x080052a9
 8005308:	08005357 	.word	0x08005357
 800530c:	080052a9 	.word	0x080052a9
 8005310:	080052a9 	.word	0x080052a9
 8005314:	080053ef 	.word	0x080053ef
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005328:	2301      	movs	r3, #1
 800532a:	e09d      	b.n	8005468 <_printf_i+0x1e8>
 800532c:	6833      	ldr	r3, [r6, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	0606      	lsls	r6, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xbc>
 8005338:	681d      	ldr	r5, [r3, #0]
 800533a:	e003      	b.n	8005344 <_printf_i+0xc4>
 800533c:	0645      	lsls	r5, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xb8>
 8005340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005344:	2d00      	cmp	r5, #0
 8005346:	da03      	bge.n	8005350 <_printf_i+0xd0>
 8005348:	232d      	movs	r3, #45	@ 0x2d
 800534a:	426d      	negs	r5, r5
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005350:	4859      	ldr	r0, [pc, #356]	@ (80054b8 <_printf_i+0x238>)
 8005352:	230a      	movs	r3, #10
 8005354:	e011      	b.n	800537a <_printf_i+0xfa>
 8005356:	6821      	ldr	r1, [r4, #0]
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	0608      	lsls	r0, r1, #24
 800535c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0xe8>
 8005362:	0649      	lsls	r1, r1, #25
 8005364:	bf48      	it	mi
 8005366:	b2ad      	uxthmi	r5, r5
 8005368:	2f6f      	cmp	r7, #111	@ 0x6f
 800536a:	4853      	ldr	r0, [pc, #332]	@ (80054b8 <_printf_i+0x238>)
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	bf14      	ite	ne
 8005370:	230a      	movne	r3, #10
 8005372:	2308      	moveq	r3, #8
 8005374:	2100      	movs	r1, #0
 8005376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800537a:	6866      	ldr	r6, [r4, #4]
 800537c:	60a6      	str	r6, [r4, #8]
 800537e:	2e00      	cmp	r6, #0
 8005380:	bfa2      	ittt	ge
 8005382:	6821      	ldrge	r1, [r4, #0]
 8005384:	f021 0104 	bicge.w	r1, r1, #4
 8005388:	6021      	strge	r1, [r4, #0]
 800538a:	b90d      	cbnz	r5, 8005390 <_printf_i+0x110>
 800538c:	2e00      	cmp	r6, #0
 800538e:	d04b      	beq.n	8005428 <_printf_i+0x1a8>
 8005390:	4616      	mov	r6, r2
 8005392:	fbb5 f1f3 	udiv	r1, r5, r3
 8005396:	fb03 5711 	mls	r7, r3, r1, r5
 800539a:	5dc7      	ldrb	r7, [r0, r7]
 800539c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053a0:	462f      	mov	r7, r5
 80053a2:	42bb      	cmp	r3, r7
 80053a4:	460d      	mov	r5, r1
 80053a6:	d9f4      	bls.n	8005392 <_printf_i+0x112>
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d10b      	bne.n	80053c4 <_printf_i+0x144>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	07df      	lsls	r7, r3, #31
 80053b0:	d508      	bpl.n	80053c4 <_printf_i+0x144>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6861      	ldr	r1, [r4, #4]
 80053b6:	4299      	cmp	r1, r3
 80053b8:	bfde      	ittt	le
 80053ba:	2330      	movle	r3, #48	@ 0x30
 80053bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053c4:	1b92      	subs	r2, r2, r6
 80053c6:	6122      	str	r2, [r4, #16]
 80053c8:	f8cd a000 	str.w	sl, [sp]
 80053cc:	464b      	mov	r3, r9
 80053ce:	aa03      	add	r2, sp, #12
 80053d0:	4621      	mov	r1, r4
 80053d2:	4640      	mov	r0, r8
 80053d4:	f7ff fee6 	bl	80051a4 <_printf_common>
 80053d8:	3001      	adds	r0, #1
 80053da:	d14a      	bne.n	8005472 <_printf_i+0x1f2>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b004      	add	sp, #16
 80053e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	f043 0320 	orr.w	r3, r3, #32
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	4833      	ldr	r0, [pc, #204]	@ (80054bc <_printf_i+0x23c>)
 80053f0:	2778      	movs	r7, #120	@ 0x78
 80053f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	6831      	ldr	r1, [r6, #0]
 80053fa:	061f      	lsls	r7, r3, #24
 80053fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005400:	d402      	bmi.n	8005408 <_printf_i+0x188>
 8005402:	065f      	lsls	r7, r3, #25
 8005404:	bf48      	it	mi
 8005406:	b2ad      	uxthmi	r5, r5
 8005408:	6031      	str	r1, [r6, #0]
 800540a:	07d9      	lsls	r1, r3, #31
 800540c:	bf44      	itt	mi
 800540e:	f043 0320 	orrmi.w	r3, r3, #32
 8005412:	6023      	strmi	r3, [r4, #0]
 8005414:	b11d      	cbz	r5, 800541e <_printf_i+0x19e>
 8005416:	2310      	movs	r3, #16
 8005418:	e7ac      	b.n	8005374 <_printf_i+0xf4>
 800541a:	4827      	ldr	r0, [pc, #156]	@ (80054b8 <_printf_i+0x238>)
 800541c:	e7e9      	b.n	80053f2 <_printf_i+0x172>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f023 0320 	bic.w	r3, r3, #32
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	e7f6      	b.n	8005416 <_printf_i+0x196>
 8005428:	4616      	mov	r6, r2
 800542a:	e7bd      	b.n	80053a8 <_printf_i+0x128>
 800542c:	6833      	ldr	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	6961      	ldr	r1, [r4, #20]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	062e      	lsls	r6, r5, #24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	d501      	bpl.n	8005440 <_printf_i+0x1c0>
 800543c:	6019      	str	r1, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0x1c6>
 8005440:	0668      	lsls	r0, r5, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0x1bc>
 8005444:	8019      	strh	r1, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	4616      	mov	r6, r2
 800544c:	e7bc      	b.n	80053c8 <_printf_i+0x148>
 800544e:	6833      	ldr	r3, [r6, #0]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	6032      	str	r2, [r6, #0]
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	6862      	ldr	r2, [r4, #4]
 8005458:	2100      	movs	r1, #0
 800545a:	4630      	mov	r0, r6
 800545c:	f7fa ff20 	bl	80002a0 <memchr>
 8005460:	b108      	cbz	r0, 8005466 <_printf_i+0x1e6>
 8005462:	1b80      	subs	r0, r0, r6
 8005464:	6060      	str	r0, [r4, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	2300      	movs	r3, #0
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005470:	e7aa      	b.n	80053c8 <_printf_i+0x148>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d0ad      	beq.n	80053dc <_printf_i+0x15c>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	079b      	lsls	r3, r3, #30
 8005484:	d413      	bmi.n	80054ae <_printf_i+0x22e>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e7a6      	b.n	80053e0 <_printf_i+0x160>
 8005492:	2301      	movs	r3, #1
 8005494:	4632      	mov	r2, r6
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d09d      	beq.n	80053dc <_printf_i+0x15c>
 80054a0:	3501      	adds	r5, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	9903      	ldr	r1, [sp, #12]
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dcf2      	bgt.n	8005492 <_printf_i+0x212>
 80054ac:	e7eb      	b.n	8005486 <_printf_i+0x206>
 80054ae:	2500      	movs	r5, #0
 80054b0:	f104 0619 	add.w	r6, r4, #25
 80054b4:	e7f5      	b.n	80054a2 <_printf_i+0x222>
 80054b6:	bf00      	nop
 80054b8:	0801cc1e 	.word	0x0801cc1e
 80054bc:	0801cc2f 	.word	0x0801cc2f

080054c0 <std>:
 80054c0:	2300      	movs	r3, #0
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
 80054c6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ce:	6083      	str	r3, [r0, #8]
 80054d0:	8181      	strh	r1, [r0, #12]
 80054d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054d4:	81c2      	strh	r2, [r0, #14]
 80054d6:	6183      	str	r3, [r0, #24]
 80054d8:	4619      	mov	r1, r3
 80054da:	2208      	movs	r2, #8
 80054dc:	305c      	adds	r0, #92	@ 0x5c
 80054de:	f000 f9f9 	bl	80058d4 <memset>
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <std+0x58>)
 80054e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <std+0x5c>)
 80054e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <std+0x60>)
 80054ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005524 <std+0x64>)
 80054f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <std+0x68>)
 80054f4:	6224      	str	r4, [r4, #32]
 80054f6:	429c      	cmp	r4, r3
 80054f8:	d006      	beq.n	8005508 <std+0x48>
 80054fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054fe:	4294      	cmp	r4, r2
 8005500:	d002      	beq.n	8005508 <std+0x48>
 8005502:	33d0      	adds	r3, #208	@ 0xd0
 8005504:	429c      	cmp	r4, r3
 8005506:	d105      	bne.n	8005514 <std+0x54>
 8005508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800550c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005510:	f000 ba5c 	b.w	80059cc <__retarget_lock_init_recursive>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	bf00      	nop
 8005518:	08005725 	.word	0x08005725
 800551c:	08005747 	.word	0x08005747
 8005520:	0800577f 	.word	0x0800577f
 8005524:	080057a3 	.word	0x080057a3
 8005528:	2000049c 	.word	0x2000049c

0800552c <stdio_exit_handler>:
 800552c:	4a02      	ldr	r2, [pc, #8]	@ (8005538 <stdio_exit_handler+0xc>)
 800552e:	4903      	ldr	r1, [pc, #12]	@ (800553c <stdio_exit_handler+0x10>)
 8005530:	4803      	ldr	r0, [pc, #12]	@ (8005540 <stdio_exit_handler+0x14>)
 8005532:	f000 b869 	b.w	8005608 <_fwalk_sglue>
 8005536:	bf00      	nop
 8005538:	2000000c 	.word	0x2000000c
 800553c:	08007301 	.word	0x08007301
 8005540:	2000001c 	.word	0x2000001c

08005544 <cleanup_stdio>:
 8005544:	6841      	ldr	r1, [r0, #4]
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <cleanup_stdio+0x34>)
 8005548:	4299      	cmp	r1, r3
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
 800554e:	d001      	beq.n	8005554 <cleanup_stdio+0x10>
 8005550:	f001 fed6 	bl	8007300 <_fflush_r>
 8005554:	68a1      	ldr	r1, [r4, #8]
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <cleanup_stdio+0x38>)
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <cleanup_stdio+0x1e>
 800555c:	4620      	mov	r0, r4
 800555e:	f001 fecf 	bl	8007300 <_fflush_r>
 8005562:	68e1      	ldr	r1, [r4, #12]
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <cleanup_stdio+0x3c>)
 8005566:	4299      	cmp	r1, r3
 8005568:	d004      	beq.n	8005574 <cleanup_stdio+0x30>
 800556a:	4620      	mov	r0, r4
 800556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005570:	f001 bec6 	b.w	8007300 <_fflush_r>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	bf00      	nop
 8005578:	2000049c 	.word	0x2000049c
 800557c:	20000504 	.word	0x20000504
 8005580:	2000056c 	.word	0x2000056c

08005584 <global_stdio_init.part.0>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <global_stdio_init.part.0+0x30>)
 8005588:	4c0b      	ldr	r4, [pc, #44]	@ (80055b8 <global_stdio_init.part.0+0x34>)
 800558a:	4a0c      	ldr	r2, [pc, #48]	@ (80055bc <global_stdio_init.part.0+0x38>)
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	4620      	mov	r0, r4
 8005590:	2200      	movs	r2, #0
 8005592:	2104      	movs	r1, #4
 8005594:	f7ff ff94 	bl	80054c0 <std>
 8005598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800559c:	2201      	movs	r2, #1
 800559e:	2109      	movs	r1, #9
 80055a0:	f7ff ff8e 	bl	80054c0 <std>
 80055a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055a8:	2202      	movs	r2, #2
 80055aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ae:	2112      	movs	r1, #18
 80055b0:	f7ff bf86 	b.w	80054c0 <std>
 80055b4:	200005d4 	.word	0x200005d4
 80055b8:	2000049c 	.word	0x2000049c
 80055bc:	0800552d 	.word	0x0800552d

080055c0 <__sfp_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	@ (80055c8 <__sfp_lock_acquire+0x8>)
 80055c2:	f000 ba04 	b.w	80059ce <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	200005dd 	.word	0x200005dd

080055cc <__sfp_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	@ (80055d4 <__sfp_lock_release+0x8>)
 80055ce:	f000 b9ff 	b.w	80059d0 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	200005dd 	.word	0x200005dd

080055d8 <__sinit>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	f7ff fff0 	bl	80055c0 <__sfp_lock_acquire>
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	b11b      	cbz	r3, 80055ec <__sinit+0x14>
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f7ff bff0 	b.w	80055cc <__sfp_lock_release>
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <__sinit+0x28>)
 80055ee:	6223      	str	r3, [r4, #32]
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__sinit+0x2c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f5      	bne.n	80055e4 <__sinit+0xc>
 80055f8:	f7ff ffc4 	bl	8005584 <global_stdio_init.part.0>
 80055fc:	e7f2      	b.n	80055e4 <__sinit+0xc>
 80055fe:	bf00      	nop
 8005600:	08005545 	.word	0x08005545
 8005604:	200005d4 	.word	0x200005d4

08005608 <_fwalk_sglue>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	4607      	mov	r7, r0
 800560e:	4688      	mov	r8, r1
 8005610:	4614      	mov	r4, r2
 8005612:	2600      	movs	r6, #0
 8005614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005618:	f1b9 0901 	subs.w	r9, r9, #1
 800561c:	d505      	bpl.n	800562a <_fwalk_sglue+0x22>
 800561e:	6824      	ldr	r4, [r4, #0]
 8005620:	2c00      	cmp	r4, #0
 8005622:	d1f7      	bne.n	8005614 <_fwalk_sglue+0xc>
 8005624:	4630      	mov	r0, r6
 8005626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d907      	bls.n	8005640 <_fwalk_sglue+0x38>
 8005630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005634:	3301      	adds	r3, #1
 8005636:	d003      	beq.n	8005640 <_fwalk_sglue+0x38>
 8005638:	4629      	mov	r1, r5
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	4306      	orrs	r6, r0
 8005640:	3568      	adds	r5, #104	@ 0x68
 8005642:	e7e9      	b.n	8005618 <_fwalk_sglue+0x10>

08005644 <iprintf>:
 8005644:	b40f      	push	{r0, r1, r2, r3}
 8005646:	b507      	push	{r0, r1, r2, lr}
 8005648:	4906      	ldr	r1, [pc, #24]	@ (8005664 <iprintf+0x20>)
 800564a:	ab04      	add	r3, sp, #16
 800564c:	6808      	ldr	r0, [r1, #0]
 800564e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005652:	6881      	ldr	r1, [r0, #8]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f001 fcb7 	bl	8006fc8 <_vfiprintf_r>
 800565a:	b003      	add	sp, #12
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005660:	b004      	add	sp, #16
 8005662:	4770      	bx	lr
 8005664:	20000018 	.word	0x20000018

08005668 <_puts_r>:
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	b570      	push	{r4, r5, r6, lr}
 800566c:	6884      	ldr	r4, [r0, #8]
 800566e:	4605      	mov	r5, r0
 8005670:	460e      	mov	r6, r1
 8005672:	b90b      	cbnz	r3, 8005678 <_puts_r+0x10>
 8005674:	f7ff ffb0 	bl	80055d8 <__sinit>
 8005678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800567a:	07db      	lsls	r3, r3, #31
 800567c:	d405      	bmi.n	800568a <_puts_r+0x22>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	0598      	lsls	r0, r3, #22
 8005682:	d402      	bmi.n	800568a <_puts_r+0x22>
 8005684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005686:	f000 f9a2 	bl	80059ce <__retarget_lock_acquire_recursive>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	0719      	lsls	r1, r3, #28
 800568e:	d502      	bpl.n	8005696 <_puts_r+0x2e>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d135      	bne.n	8005702 <_puts_r+0x9a>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f8c5 	bl	8005828 <__swsetup_r>
 800569e:	b380      	cbz	r0, 8005702 <_puts_r+0x9a>
 80056a0:	f04f 35ff 	mov.w	r5, #4294967295
 80056a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056a6:	07da      	lsls	r2, r3, #31
 80056a8:	d405      	bmi.n	80056b6 <_puts_r+0x4e>
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	d402      	bmi.n	80056b6 <_puts_r+0x4e>
 80056b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056b2:	f000 f98d 	bl	80059d0 <__retarget_lock_release_recursive>
 80056b6:	4628      	mov	r0, r5
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da04      	bge.n	80056c8 <_puts_r+0x60>
 80056be:	69a2      	ldr	r2, [r4, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	dc17      	bgt.n	80056f4 <_puts_r+0x8c>
 80056c4:	290a      	cmp	r1, #10
 80056c6:	d015      	beq.n	80056f4 <_puts_r+0x8c>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	7019      	strb	r1, [r3, #0]
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60a3      	str	r3, [r4, #8]
 80056da:	2900      	cmp	r1, #0
 80056dc:	d1ed      	bne.n	80056ba <_puts_r+0x52>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da11      	bge.n	8005706 <_puts_r+0x9e>
 80056e2:	4622      	mov	r2, r4
 80056e4:	210a      	movs	r1, #10
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f85f 	bl	80057aa <__swbuf_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d0d7      	beq.n	80056a0 <_puts_r+0x38>
 80056f0:	250a      	movs	r5, #10
 80056f2:	e7d7      	b.n	80056a4 <_puts_r+0x3c>
 80056f4:	4622      	mov	r2, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f857 	bl	80057aa <__swbuf_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1e7      	bne.n	80056d0 <_puts_r+0x68>
 8005700:	e7ce      	b.n	80056a0 <_puts_r+0x38>
 8005702:	3e01      	subs	r6, #1
 8005704:	e7e4      	b.n	80056d0 <_puts_r+0x68>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	6022      	str	r2, [r4, #0]
 800570c:	220a      	movs	r2, #10
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e7ee      	b.n	80056f0 <_puts_r+0x88>
	...

08005714 <puts>:
 8005714:	4b02      	ldr	r3, [pc, #8]	@ (8005720 <puts+0xc>)
 8005716:	4601      	mov	r1, r0
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	f7ff bfa5 	b.w	8005668 <_puts_r>
 800571e:	bf00      	nop
 8005720:	20000018 	.word	0x20000018

08005724 <__sread>:
 8005724:	b510      	push	{r4, lr}
 8005726:	460c      	mov	r4, r1
 8005728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572c:	f000 f900 	bl	8005930 <_read_r>
 8005730:	2800      	cmp	r0, #0
 8005732:	bfab      	itete	ge
 8005734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005736:	89a3      	ldrhlt	r3, [r4, #12]
 8005738:	181b      	addge	r3, r3, r0
 800573a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800573e:	bfac      	ite	ge
 8005740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005742:	81a3      	strhlt	r3, [r4, #12]
 8005744:	bd10      	pop	{r4, pc}

08005746 <__swrite>:
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	461f      	mov	r7, r3
 800574c:	898b      	ldrh	r3, [r1, #12]
 800574e:	05db      	lsls	r3, r3, #23
 8005750:	4605      	mov	r5, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4616      	mov	r6, r2
 8005756:	d505      	bpl.n	8005764 <__swrite+0x1e>
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	2302      	movs	r3, #2
 800575e:	2200      	movs	r2, #0
 8005760:	f000 f8d4 	bl	800590c <_lseek_r>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800576a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	4628      	mov	r0, r5
 8005776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	f000 b8eb 	b.w	8005954 <_write_r>

0800577e <__sseek>:
 800577e:	b510      	push	{r4, lr}
 8005780:	460c      	mov	r4, r1
 8005782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005786:	f000 f8c1 	bl	800590c <_lseek_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	bf15      	itete	ne
 8005790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800579a:	81a3      	strheq	r3, [r4, #12]
 800579c:	bf18      	it	ne
 800579e:	81a3      	strhne	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__sclose>:
 80057a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a6:	f000 b8a1 	b.w	80058ec <_close_r>

080057aa <__swbuf_r>:
 80057aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ac:	460e      	mov	r6, r1
 80057ae:	4614      	mov	r4, r2
 80057b0:	4605      	mov	r5, r0
 80057b2:	b118      	cbz	r0, 80057bc <__swbuf_r+0x12>
 80057b4:	6a03      	ldr	r3, [r0, #32]
 80057b6:	b90b      	cbnz	r3, 80057bc <__swbuf_r+0x12>
 80057b8:	f7ff ff0e 	bl	80055d8 <__sinit>
 80057bc:	69a3      	ldr	r3, [r4, #24]
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	071a      	lsls	r2, r3, #28
 80057c4:	d501      	bpl.n	80057ca <__swbuf_r+0x20>
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	b943      	cbnz	r3, 80057dc <__swbuf_r+0x32>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f82b 	bl	8005828 <__swsetup_r>
 80057d2:	b118      	cbz	r0, 80057dc <__swbuf_r+0x32>
 80057d4:	f04f 37ff 	mov.w	r7, #4294967295
 80057d8:	4638      	mov	r0, r7
 80057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	6922      	ldr	r2, [r4, #16]
 80057e0:	1a98      	subs	r0, r3, r2
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	b2f6      	uxtb	r6, r6
 80057e6:	4283      	cmp	r3, r0
 80057e8:	4637      	mov	r7, r6
 80057ea:	dc05      	bgt.n	80057f8 <__swbuf_r+0x4e>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f001 fd86 	bl	8007300 <_fflush_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1ed      	bne.n	80057d4 <__swbuf_r+0x2a>
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60a3      	str	r3, [r4, #8]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	701e      	strb	r6, [r3, #0]
 8005806:	6962      	ldr	r2, [r4, #20]
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	429a      	cmp	r2, r3
 800580c:	d004      	beq.n	8005818 <__swbuf_r+0x6e>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	07db      	lsls	r3, r3, #31
 8005812:	d5e1      	bpl.n	80057d8 <__swbuf_r+0x2e>
 8005814:	2e0a      	cmp	r6, #10
 8005816:	d1df      	bne.n	80057d8 <__swbuf_r+0x2e>
 8005818:	4621      	mov	r1, r4
 800581a:	4628      	mov	r0, r5
 800581c:	f001 fd70 	bl	8007300 <_fflush_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	d0d9      	beq.n	80057d8 <__swbuf_r+0x2e>
 8005824:	e7d6      	b.n	80057d4 <__swbuf_r+0x2a>
	...

08005828 <__swsetup_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4b29      	ldr	r3, [pc, #164]	@ (80058d0 <__swsetup_r+0xa8>)
 800582c:	4605      	mov	r5, r0
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	460c      	mov	r4, r1
 8005832:	b118      	cbz	r0, 800583c <__swsetup_r+0x14>
 8005834:	6a03      	ldr	r3, [r0, #32]
 8005836:	b90b      	cbnz	r3, 800583c <__swsetup_r+0x14>
 8005838:	f7ff fece 	bl	80055d8 <__sinit>
 800583c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005840:	0719      	lsls	r1, r3, #28
 8005842:	d422      	bmi.n	800588a <__swsetup_r+0x62>
 8005844:	06da      	lsls	r2, r3, #27
 8005846:	d407      	bmi.n	8005858 <__swsetup_r+0x30>
 8005848:	2209      	movs	r2, #9
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	f04f 30ff 	mov.w	r0, #4294967295
 8005856:	e033      	b.n	80058c0 <__swsetup_r+0x98>
 8005858:	0758      	lsls	r0, r3, #29
 800585a:	d512      	bpl.n	8005882 <__swsetup_r+0x5a>
 800585c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800585e:	b141      	cbz	r1, 8005872 <__swsetup_r+0x4a>
 8005860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005864:	4299      	cmp	r1, r3
 8005866:	d002      	beq.n	800586e <__swsetup_r+0x46>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 ff01 	bl	8006670 <_free_r>
 800586e:	2300      	movs	r3, #0
 8005870:	6363      	str	r3, [r4, #52]	@ 0x34
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	2300      	movs	r3, #0
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0308 	orr.w	r3, r3, #8
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	b94b      	cbnz	r3, 80058a2 <__swsetup_r+0x7a>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005898:	d003      	beq.n	80058a2 <__swsetup_r+0x7a>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f001 fd7d 	bl	800739c <__smakebuf_r>
 80058a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a6:	f013 0201 	ands.w	r2, r3, #1
 80058aa:	d00a      	beq.n	80058c2 <__swsetup_r+0x9a>
 80058ac:	2200      	movs	r2, #0
 80058ae:	60a2      	str	r2, [r4, #8]
 80058b0:	6962      	ldr	r2, [r4, #20]
 80058b2:	4252      	negs	r2, r2
 80058b4:	61a2      	str	r2, [r4, #24]
 80058b6:	6922      	ldr	r2, [r4, #16]
 80058b8:	b942      	cbnz	r2, 80058cc <__swsetup_r+0xa4>
 80058ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058be:	d1c5      	bne.n	800584c <__swsetup_r+0x24>
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	0799      	lsls	r1, r3, #30
 80058c4:	bf58      	it	pl
 80058c6:	6962      	ldrpl	r2, [r4, #20]
 80058c8:	60a2      	str	r2, [r4, #8]
 80058ca:	e7f4      	b.n	80058b6 <__swsetup_r+0x8e>
 80058cc:	2000      	movs	r0, #0
 80058ce:	e7f7      	b.n	80058c0 <__swsetup_r+0x98>
 80058d0:	20000018 	.word	0x20000018

080058d4 <memset>:
 80058d4:	4402      	add	r2, r0
 80058d6:	4603      	mov	r3, r0
 80058d8:	4293      	cmp	r3, r2
 80058da:	d100      	bne.n	80058de <memset+0xa>
 80058dc:	4770      	bx	lr
 80058de:	f803 1b01 	strb.w	r1, [r3], #1
 80058e2:	e7f9      	b.n	80058d8 <memset+0x4>

080058e4 <_localeconv_r>:
 80058e4:	4800      	ldr	r0, [pc, #0]	@ (80058e8 <_localeconv_r+0x4>)
 80058e6:	4770      	bx	lr
 80058e8:	20000158 	.word	0x20000158

080058ec <_close_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	@ (8005908 <_close_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fc fdd5 	bl	80024a6 <_close>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_close_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_close_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200005d8 	.word	0x200005d8

0800590c <_lseek_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	@ (800592c <_lseek_r+0x20>)
 8005910:	4604      	mov	r4, r0
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fc fdea 	bl	80024f4 <_lseek>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_lseek_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_lseek_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	200005d8 	.word	0x200005d8

08005930 <_read_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	@ (8005950 <_read_r+0x20>)
 8005934:	4604      	mov	r4, r0
 8005936:	4608      	mov	r0, r1
 8005938:	4611      	mov	r1, r2
 800593a:	2200      	movs	r2, #0
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fc fd94 	bl	800246c <_read>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_read_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_read_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	200005d8 	.word	0x200005d8

08005954 <_write_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d07      	ldr	r5, [pc, #28]	@ (8005974 <_write_r+0x20>)
 8005958:	4604      	mov	r4, r0
 800595a:	4608      	mov	r0, r1
 800595c:	4611      	mov	r1, r2
 800595e:	2200      	movs	r2, #0
 8005960:	602a      	str	r2, [r5, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb ffd4 	bl	8001910 <_write>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_write_r+0x1e>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	b103      	cbz	r3, 8005972 <_write_r+0x1e>
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	200005d8 	.word	0x200005d8

08005978 <__errno>:
 8005978:	4b01      	ldr	r3, [pc, #4]	@ (8005980 <__errno+0x8>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000018 	.word	0x20000018

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	@ (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	@ (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	@ (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	@ (80059c8 <__libc_init_array+0x44>)
 8005998:	f001 fe4e 	bl	8007638 <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	0801cf88 	.word	0x0801cf88
 80059c0:	0801cf88 	.word	0x0801cf88
 80059c4:	0801cf88 	.word	0x0801cf88
 80059c8:	0801cf8c 	.word	0x0801cf8c

080059cc <__retarget_lock_init_recursive>:
 80059cc:	4770      	bx	lr

080059ce <__retarget_lock_acquire_recursive>:
 80059ce:	4770      	bx	lr

080059d0 <__retarget_lock_release_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <quorem>:
 80059d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	6903      	ldr	r3, [r0, #16]
 80059d8:	690c      	ldr	r4, [r1, #16]
 80059da:	42a3      	cmp	r3, r4
 80059dc:	4607      	mov	r7, r0
 80059de:	db7e      	blt.n	8005ade <quorem+0x10c>
 80059e0:	3c01      	subs	r4, #1
 80059e2:	f101 0814 	add.w	r8, r1, #20
 80059e6:	00a3      	lsls	r3, r4, #2
 80059e8:	f100 0514 	add.w	r5, r0, #20
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059fc:	3301      	adds	r3, #1
 80059fe:	429a      	cmp	r2, r3
 8005a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a08:	d32e      	bcc.n	8005a68 <quorem+0x96>
 8005a0a:	f04f 0a00 	mov.w	sl, #0
 8005a0e:	46c4      	mov	ip, r8
 8005a10:	46ae      	mov	lr, r5
 8005a12:	46d3      	mov	fp, sl
 8005a14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a18:	b298      	uxth	r0, r3
 8005a1a:	fb06 a000 	mla	r0, r6, r0, sl
 8005a1e:	0c02      	lsrs	r2, r0, #16
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	fb06 2303 	mla	r3, r6, r3, r2
 8005a26:	f8de 2000 	ldr.w	r2, [lr]
 8005a2a:	b280      	uxth	r0, r0
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	1a12      	subs	r2, r2, r0
 8005a30:	445a      	add	r2, fp
 8005a32:	f8de 0000 	ldr.w	r0, [lr]
 8005a36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a44:	b292      	uxth	r2, r2
 8005a46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a4a:	45e1      	cmp	r9, ip
 8005a4c:	f84e 2b04 	str.w	r2, [lr], #4
 8005a50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a54:	d2de      	bcs.n	8005a14 <quorem+0x42>
 8005a56:	9b00      	ldr	r3, [sp, #0]
 8005a58:	58eb      	ldr	r3, [r5, r3]
 8005a5a:	b92b      	cbnz	r3, 8005a68 <quorem+0x96>
 8005a5c:	9b01      	ldr	r3, [sp, #4]
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	429d      	cmp	r5, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	d32f      	bcc.n	8005ac6 <quorem+0xf4>
 8005a66:	613c      	str	r4, [r7, #16]
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f001 f97b 	bl	8006d64 <__mcmp>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	db25      	blt.n	8005abe <quorem+0xec>
 8005a72:	4629      	mov	r1, r5
 8005a74:	2000      	movs	r0, #0
 8005a76:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a7a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a7e:	fa1f fe82 	uxth.w	lr, r2
 8005a82:	fa1f f38c 	uxth.w	r3, ip
 8005a86:	eba3 030e 	sub.w	r3, r3, lr
 8005a8a:	4403      	add	r3, r0
 8005a8c:	0c12      	lsrs	r2, r2, #16
 8005a8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9c:	45c1      	cmp	r9, r8
 8005a9e:	f841 3b04 	str.w	r3, [r1], #4
 8005aa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005aa6:	d2e6      	bcs.n	8005a76 <quorem+0xa4>
 8005aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab0:	b922      	cbnz	r2, 8005abc <quorem+0xea>
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	429d      	cmp	r5, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	d30b      	bcc.n	8005ad2 <quorem+0x100>
 8005aba:	613c      	str	r4, [r7, #16]
 8005abc:	3601      	adds	r6, #1
 8005abe:	4630      	mov	r0, r6
 8005ac0:	b003      	add	sp, #12
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	3b04      	subs	r3, #4
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d1cb      	bne.n	8005a66 <quorem+0x94>
 8005ace:	3c01      	subs	r4, #1
 8005ad0:	e7c6      	b.n	8005a60 <quorem+0x8e>
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d1ef      	bne.n	8005aba <quorem+0xe8>
 8005ada:	3c01      	subs	r4, #1
 8005adc:	e7ea      	b.n	8005ab4 <quorem+0xe2>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e7ee      	b.n	8005ac0 <quorem+0xee>
 8005ae2:	0000      	movs	r0, r0
 8005ae4:	0000      	movs	r0, r0
	...

08005ae8 <_dtoa_r>:
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	69c7      	ldr	r7, [r0, #28]
 8005aee:	b099      	sub	sp, #100	@ 0x64
 8005af0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005af4:	ec55 4b10 	vmov	r4, r5, d0
 8005af8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8005afc:	4683      	mov	fp, r0
 8005afe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b02:	b97f      	cbnz	r7, 8005b24 <_dtoa_r+0x3c>
 8005b04:	2010      	movs	r0, #16
 8005b06:	f000 fdfd 	bl	8006704 <malloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b10:	b920      	cbnz	r0, 8005b1c <_dtoa_r+0x34>
 8005b12:	4ba7      	ldr	r3, [pc, #668]	@ (8005db0 <_dtoa_r+0x2c8>)
 8005b14:	21ef      	movs	r1, #239	@ 0xef
 8005b16:	48a7      	ldr	r0, [pc, #668]	@ (8005db4 <_dtoa_r+0x2cc>)
 8005b18:	f001 fcbc 	bl	8007494 <__assert_func>
 8005b1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b20:	6007      	str	r7, [r0, #0]
 8005b22:	60c7      	str	r7, [r0, #12]
 8005b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	b159      	cbz	r1, 8005b44 <_dtoa_r+0x5c>
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	604a      	str	r2, [r1, #4]
 8005b30:	2301      	movs	r3, #1
 8005b32:	4093      	lsls	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
 8005b36:	4658      	mov	r0, fp
 8005b38:	f000 feda 	bl	80068f0 <_Bfree>
 8005b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	1e2b      	subs	r3, r5, #0
 8005b46:	bfb9      	ittee	lt
 8005b48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b4c:	9303      	strlt	r3, [sp, #12]
 8005b4e:	2300      	movge	r3, #0
 8005b50:	6033      	strge	r3, [r6, #0]
 8005b52:	9f03      	ldr	r7, [sp, #12]
 8005b54:	4b98      	ldr	r3, [pc, #608]	@ (8005db8 <_dtoa_r+0x2d0>)
 8005b56:	bfbc      	itt	lt
 8005b58:	2201      	movlt	r2, #1
 8005b5a:	6032      	strlt	r2, [r6, #0]
 8005b5c:	43bb      	bics	r3, r7
 8005b5e:	d112      	bne.n	8005b86 <_dtoa_r+0x9e>
 8005b60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005b62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b6c:	4323      	orrs	r3, r4
 8005b6e:	f000 854d 	beq.w	800660c <_dtoa_r+0xb24>
 8005b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005dcc <_dtoa_r+0x2e4>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 854f 	beq.w	800661c <_dtoa_r+0xb34>
 8005b7e:	f10a 0303 	add.w	r3, sl, #3
 8005b82:	f000 bd49 	b.w	8006618 <_dtoa_r+0xb30>
 8005b86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	ec51 0b17 	vmov	r0, r1, d7
 8005b90:	2300      	movs	r3, #0
 8005b92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005b96:	f7fa ffff 	bl	8000b98 <__aeabi_dcmpeq>
 8005b9a:	4680      	mov	r8, r0
 8005b9c:	b158      	cbz	r0, 8005bb6 <_dtoa_r+0xce>
 8005b9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ba6:	b113      	cbz	r3, 8005bae <_dtoa_r+0xc6>
 8005ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005baa:	4b84      	ldr	r3, [pc, #528]	@ (8005dbc <_dtoa_r+0x2d4>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005dd0 <_dtoa_r+0x2e8>
 8005bb2:	f000 bd33 	b.w	800661c <_dtoa_r+0xb34>
 8005bb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005bba:	aa16      	add	r2, sp, #88	@ 0x58
 8005bbc:	a917      	add	r1, sp, #92	@ 0x5c
 8005bbe:	4658      	mov	r0, fp
 8005bc0:	f001 f980 	bl	8006ec4 <__d2b>
 8005bc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005bc8:	4681      	mov	r9, r0
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	d077      	beq.n	8005cbe <_dtoa_r+0x1d6>
 8005bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005be0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005be4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005be8:	4619      	mov	r1, r3
 8005bea:	2200      	movs	r2, #0
 8005bec:	4b74      	ldr	r3, [pc, #464]	@ (8005dc0 <_dtoa_r+0x2d8>)
 8005bee:	f7fa fbb3 	bl	8000358 <__aeabi_dsub>
 8005bf2:	a369      	add	r3, pc, #420	@ (adr r3, 8005d98 <_dtoa_r+0x2b0>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f7fa fd66 	bl	80006c8 <__aeabi_dmul>
 8005bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8005da0 <_dtoa_r+0x2b8>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fbab 	bl	800035c <__adddf3>
 8005c06:	4604      	mov	r4, r0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	f7fa fcf2 	bl	80005f4 <__aeabi_i2d>
 8005c10:	a365      	add	r3, pc, #404	@ (adr r3, 8005da8 <_dtoa_r+0x2c0>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f7fa fd57 	bl	80006c8 <__aeabi_dmul>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fb9b 	bl	800035c <__adddf3>
 8005c26:	4604      	mov	r4, r0
 8005c28:	460d      	mov	r5, r1
 8005c2a:	f7fa fffd 	bl	8000c28 <__aeabi_d2iz>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4607      	mov	r7, r0
 8005c32:	2300      	movs	r3, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa ffb8 	bl	8000bac <__aeabi_dcmplt>
 8005c3c:	b140      	cbz	r0, 8005c50 <_dtoa_r+0x168>
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f7fa fcd8 	bl	80005f4 <__aeabi_i2d>
 8005c44:	4622      	mov	r2, r4
 8005c46:	462b      	mov	r3, r5
 8005c48:	f7fa ffa6 	bl	8000b98 <__aeabi_dcmpeq>
 8005c4c:	b900      	cbnz	r0, 8005c50 <_dtoa_r+0x168>
 8005c4e:	3f01      	subs	r7, #1
 8005c50:	2f16      	cmp	r7, #22
 8005c52:	d851      	bhi.n	8005cf8 <_dtoa_r+0x210>
 8005c54:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc4 <_dtoa_r+0x2dc>)
 8005c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c62:	f7fa ffa3 	bl	8000bac <__aeabi_dcmplt>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d048      	beq.n	8005cfc <_dtoa_r+0x214>
 8005c6a:	3f01      	subs	r7, #1
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005c70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c72:	1b9b      	subs	r3, r3, r6
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	bf44      	itt	mi
 8005c78:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c7c:	2300      	movmi	r3, #0
 8005c7e:	9208      	str	r2, [sp, #32]
 8005c80:	bf54      	ite	pl
 8005c82:	f04f 0800 	movpl.w	r8, #0
 8005c86:	9308      	strmi	r3, [sp, #32]
 8005c88:	2f00      	cmp	r7, #0
 8005c8a:	db39      	blt.n	8005d00 <_dtoa_r+0x218>
 8005c8c:	9b08      	ldr	r3, [sp, #32]
 8005c8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005c90:	443b      	add	r3, r7
 8005c92:	9308      	str	r3, [sp, #32]
 8005c94:	2300      	movs	r3, #0
 8005c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	2b09      	cmp	r3, #9
 8005c9c:	d864      	bhi.n	8005d68 <_dtoa_r+0x280>
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	bfc4      	itt	gt
 8005ca2:	3b04      	subgt	r3, #4
 8005ca4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8005cac:	bfcc      	ite	gt
 8005cae:	2400      	movgt	r4, #0
 8005cb0:	2401      	movle	r4, #1
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d863      	bhi.n	8005d7e <_dtoa_r+0x296>
 8005cb6:	e8df f003 	tbb	[pc, r3]
 8005cba:	372a      	.short	0x372a
 8005cbc:	5535      	.short	0x5535
 8005cbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005cc2:	441e      	add	r6, r3
 8005cc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	bfc1      	itttt	gt
 8005ccc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005cd0:	409f      	lslgt	r7, r3
 8005cd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005cd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005cda:	bfd6      	itet	le
 8005cdc:	f1c3 0320 	rsble	r3, r3, #32
 8005ce0:	ea47 0003 	orrgt.w	r0, r7, r3
 8005ce4:	fa04 f003 	lslle.w	r0, r4, r3
 8005ce8:	f7fa fc74 	bl	80005d4 <__aeabi_ui2d>
 8005cec:	2201      	movs	r2, #1
 8005cee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005cf2:	3e01      	subs	r6, #1
 8005cf4:	9214      	str	r2, [sp, #80]	@ 0x50
 8005cf6:	e777      	b.n	8005be8 <_dtoa_r+0x100>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e7b8      	b.n	8005c6e <_dtoa_r+0x186>
 8005cfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8005cfe:	e7b7      	b.n	8005c70 <_dtoa_r+0x188>
 8005d00:	427b      	negs	r3, r7
 8005d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d04:	2300      	movs	r3, #0
 8005d06:	eba8 0807 	sub.w	r8, r8, r7
 8005d0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d0c:	e7c4      	b.n	8005c98 <_dtoa_r+0x1b0>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dc35      	bgt.n	8005d84 <_dtoa_r+0x29c>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	9307      	str	r3, [sp, #28]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d22:	e00b      	b.n	8005d3c <_dtoa_r+0x254>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e7f3      	b.n	8005d10 <_dtoa_r+0x228>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	bfb8      	it	lt
 8005d3a:	2301      	movlt	r3, #1
 8005d3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d40:	2100      	movs	r1, #0
 8005d42:	2204      	movs	r2, #4
 8005d44:	f102 0514 	add.w	r5, r2, #20
 8005d48:	429d      	cmp	r5, r3
 8005d4a:	d91f      	bls.n	8005d8c <_dtoa_r+0x2a4>
 8005d4c:	6041      	str	r1, [r0, #4]
 8005d4e:	4658      	mov	r0, fp
 8005d50:	f000 fd8e 	bl	8006870 <_Balloc>
 8005d54:	4682      	mov	sl, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d13c      	bne.n	8005dd4 <_dtoa_r+0x2ec>
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <_dtoa_r+0x2e0>)
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d62:	e6d8      	b.n	8005b16 <_dtoa_r+0x2e>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e7e0      	b.n	8005d2a <_dtoa_r+0x242>
 8005d68:	2401      	movs	r4, #1
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2312      	movs	r3, #18
 8005d7c:	e7d0      	b.n	8005d20 <_dtoa_r+0x238>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d82:	e7f5      	b.n	8005d70 <_dtoa_r+0x288>
 8005d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	9307      	str	r3, [sp, #28]
 8005d8a:	e7d7      	b.n	8005d3c <_dtoa_r+0x254>
 8005d8c:	3101      	adds	r1, #1
 8005d8e:	0052      	lsls	r2, r2, #1
 8005d90:	e7d8      	b.n	8005d44 <_dtoa_r+0x25c>
 8005d92:	bf00      	nop
 8005d94:	f3af 8000 	nop.w
 8005d98:	636f4361 	.word	0x636f4361
 8005d9c:	3fd287a7 	.word	0x3fd287a7
 8005da0:	8b60c8b3 	.word	0x8b60c8b3
 8005da4:	3fc68a28 	.word	0x3fc68a28
 8005da8:	509f79fb 	.word	0x509f79fb
 8005dac:	3fd34413 	.word	0x3fd34413
 8005db0:	0801cc4d 	.word	0x0801cc4d
 8005db4:	0801cc64 	.word	0x0801cc64
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	0801cc1d 	.word	0x0801cc1d
 8005dc0:	3ff80000 	.word	0x3ff80000
 8005dc4:	0801cd60 	.word	0x0801cd60
 8005dc8:	0801ccbc 	.word	0x0801ccbc
 8005dcc:	0801cc49 	.word	0x0801cc49
 8005dd0:	0801cc1c 	.word	0x0801cc1c
 8005dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005dd8:	6018      	str	r0, [r3, #0]
 8005dda:	9b07      	ldr	r3, [sp, #28]
 8005ddc:	2b0e      	cmp	r3, #14
 8005dde:	f200 80a4 	bhi.w	8005f2a <_dtoa_r+0x442>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	f000 80a1 	beq.w	8005f2a <_dtoa_r+0x442>
 8005de8:	2f00      	cmp	r7, #0
 8005dea:	dd33      	ble.n	8005e54 <_dtoa_r+0x36c>
 8005dec:	4bad      	ldr	r3, [pc, #692]	@ (80060a4 <_dtoa_r+0x5bc>)
 8005dee:	f007 020f 	and.w	r2, r7, #15
 8005df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df6:	ed93 7b00 	vldr	d7, [r3]
 8005dfa:	05f8      	lsls	r0, r7, #23
 8005dfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e04:	d516      	bpl.n	8005e34 <_dtoa_r+0x34c>
 8005e06:	4ba8      	ldr	r3, [pc, #672]	@ (80060a8 <_dtoa_r+0x5c0>)
 8005e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e10:	f7fa fd84 	bl	800091c <__aeabi_ddiv>
 8005e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e18:	f004 040f 	and.w	r4, r4, #15
 8005e1c:	2603      	movs	r6, #3
 8005e1e:	4da2      	ldr	r5, [pc, #648]	@ (80060a8 <_dtoa_r+0x5c0>)
 8005e20:	b954      	cbnz	r4, 8005e38 <_dtoa_r+0x350>
 8005e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2a:	f7fa fd77 	bl	800091c <__aeabi_ddiv>
 8005e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e32:	e028      	b.n	8005e86 <_dtoa_r+0x39e>
 8005e34:	2602      	movs	r6, #2
 8005e36:	e7f2      	b.n	8005e1e <_dtoa_r+0x336>
 8005e38:	07e1      	lsls	r1, r4, #31
 8005e3a:	d508      	bpl.n	8005e4e <_dtoa_r+0x366>
 8005e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e44:	f7fa fc40 	bl	80006c8 <__aeabi_dmul>
 8005e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	1064      	asrs	r4, r4, #1
 8005e50:	3508      	adds	r5, #8
 8005e52:	e7e5      	b.n	8005e20 <_dtoa_r+0x338>
 8005e54:	f000 80d2 	beq.w	8005ffc <_dtoa_r+0x514>
 8005e58:	427c      	negs	r4, r7
 8005e5a:	4b92      	ldr	r3, [pc, #584]	@ (80060a4 <_dtoa_r+0x5bc>)
 8005e5c:	4d92      	ldr	r5, [pc, #584]	@ (80060a8 <_dtoa_r+0x5c0>)
 8005e5e:	f004 020f 	and.w	r2, r4, #15
 8005e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e6e:	f7fa fc2b 	bl	80006c8 <__aeabi_dmul>
 8005e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e76:	1124      	asrs	r4, r4, #4
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2602      	movs	r6, #2
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	f040 80b2 	bne.w	8005fe6 <_dtoa_r+0x4fe>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1d3      	bne.n	8005e2e <_dtoa_r+0x346>
 8005e86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80b7 	beq.w	8006000 <_dtoa_r+0x518>
 8005e92:	4b86      	ldr	r3, [pc, #536]	@ (80060ac <_dtoa_r+0x5c4>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4620      	mov	r0, r4
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7fa fe87 	bl	8000bac <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f000 80ae 	beq.w	8006000 <_dtoa_r+0x518>
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80aa 	beq.w	8006000 <_dtoa_r+0x518>
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dd37      	ble.n	8005f22 <_dtoa_r+0x43a>
 8005eb2:	1e7b      	subs	r3, r7, #1
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80060b0 <_dtoa_r+0x5c8>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7fa fc03 	bl	80006c8 <__aeabi_dmul>
 8005ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec6:	9c00      	ldr	r4, [sp, #0]
 8005ec8:	3601      	adds	r6, #1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7fa fb92 	bl	80005f4 <__aeabi_i2d>
 8005ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ed4:	f7fa fbf8 	bl	80006c8 <__aeabi_dmul>
 8005ed8:	4b76      	ldr	r3, [pc, #472]	@ (80060b4 <_dtoa_r+0x5cc>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f7fa fa3e 	bl	800035c <__adddf3>
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	f040 808d 	bne.w	8006006 <_dtoa_r+0x51e>
 8005eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef0:	4b71      	ldr	r3, [pc, #452]	@ (80060b8 <_dtoa_r+0x5d0>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f7fa fa30 	bl	8000358 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f00:	462a      	mov	r2, r5
 8005f02:	4633      	mov	r3, r6
 8005f04:	f7fa fe70 	bl	8000be8 <__aeabi_dcmpgt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f040 828b 	bne.w	8006424 <_dtoa_r+0x93c>
 8005f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f12:	462a      	mov	r2, r5
 8005f14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f18:	f7fa fe48 	bl	8000bac <__aeabi_dcmplt>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f040 8128 	bne.w	8006172 <_dtoa_r+0x68a>
 8005f22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f2c0 815a 	blt.w	80061e6 <_dtoa_r+0x6fe>
 8005f32:	2f0e      	cmp	r7, #14
 8005f34:	f300 8157 	bgt.w	80061e6 <_dtoa_r+0x6fe>
 8005f38:	4b5a      	ldr	r3, [pc, #360]	@ (80060a4 <_dtoa_r+0x5bc>)
 8005f3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f3e:	ed93 7b00 	vldr	d7, [r3]
 8005f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	ed8d 7b00 	vstr	d7, [sp]
 8005f4a:	da03      	bge.n	8005f54 <_dtoa_r+0x46c>
 8005f4c:	9b07      	ldr	r3, [sp, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f340 8101 	ble.w	8006156 <_dtoa_r+0x66e>
 8005f54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f58:	4656      	mov	r6, sl
 8005f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa fcdb 	bl	800091c <__aeabi_ddiv>
 8005f66:	f7fa fe5f 	bl	8000c28 <__aeabi_d2iz>
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	f7fa fb42 	bl	80005f4 <__aeabi_i2d>
 8005f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f74:	f7fa fba8 	bl	80006c8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f84:	f7fa f9e8 	bl	8000358 <__aeabi_dsub>
 8005f88:	f806 4b01 	strb.w	r4, [r6], #1
 8005f8c:	9d07      	ldr	r5, [sp, #28]
 8005f8e:	eba6 040a 	sub.w	r4, r6, sl
 8005f92:	42a5      	cmp	r5, r4
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	f040 8117 	bne.w	80061ca <_dtoa_r+0x6e2>
 8005f9c:	f7fa f9de 	bl	800035c <__adddf3>
 8005fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	f7fa fe1e 	bl	8000be8 <__aeabi_dcmpgt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 80f9 	bne.w	80061a4 <_dtoa_r+0x6bc>
 8005fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa fded 	bl	8000b98 <__aeabi_dcmpeq>
 8005fbe:	b118      	cbz	r0, 8005fc8 <_dtoa_r+0x4e0>
 8005fc0:	f018 0f01 	tst.w	r8, #1
 8005fc4:	f040 80ee 	bne.w	80061a4 <_dtoa_r+0x6bc>
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4658      	mov	r0, fp
 8005fcc:	f000 fc90 	bl	80068f0 <_Bfree>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	7033      	strb	r3, [r6, #0]
 8005fd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fd6:	3701      	adds	r7, #1
 8005fd8:	601f      	str	r7, [r3, #0]
 8005fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 831d 	beq.w	800661c <_dtoa_r+0xb34>
 8005fe2:	601e      	str	r6, [r3, #0]
 8005fe4:	e31a      	b.n	800661c <_dtoa_r+0xb34>
 8005fe6:	07e2      	lsls	r2, r4, #31
 8005fe8:	d505      	bpl.n	8005ff6 <_dtoa_r+0x50e>
 8005fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fee:	f7fa fb6b 	bl	80006c8 <__aeabi_dmul>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	1064      	asrs	r4, r4, #1
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	e73f      	b.n	8005e7c <_dtoa_r+0x394>
 8005ffc:	2602      	movs	r6, #2
 8005ffe:	e742      	b.n	8005e86 <_dtoa_r+0x39e>
 8006000:	9c07      	ldr	r4, [sp, #28]
 8006002:	9704      	str	r7, [sp, #16]
 8006004:	e761      	b.n	8005eca <_dtoa_r+0x3e2>
 8006006:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <_dtoa_r+0x5bc>)
 8006008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800600a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800600e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006012:	4454      	add	r4, sl
 8006014:	2900      	cmp	r1, #0
 8006016:	d053      	beq.n	80060c0 <_dtoa_r+0x5d8>
 8006018:	4928      	ldr	r1, [pc, #160]	@ (80060bc <_dtoa_r+0x5d4>)
 800601a:	2000      	movs	r0, #0
 800601c:	f7fa fc7e 	bl	800091c <__aeabi_ddiv>
 8006020:	4633      	mov	r3, r6
 8006022:	462a      	mov	r2, r5
 8006024:	f7fa f998 	bl	8000358 <__aeabi_dsub>
 8006028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800602c:	4656      	mov	r6, sl
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	f7fa fdf9 	bl	8000c28 <__aeabi_d2iz>
 8006036:	4605      	mov	r5, r0
 8006038:	f7fa fadc 	bl	80005f4 <__aeabi_i2d>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006044:	f7fa f988 	bl	8000358 <__aeabi_dsub>
 8006048:	3530      	adds	r5, #48	@ 0x30
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006052:	f806 5b01 	strb.w	r5, [r6], #1
 8006056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800605a:	f7fa fda7 	bl	8000bac <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d171      	bne.n	8006146 <_dtoa_r+0x65e>
 8006062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006066:	4911      	ldr	r1, [pc, #68]	@ (80060ac <_dtoa_r+0x5c4>)
 8006068:	2000      	movs	r0, #0
 800606a:	f7fa f975 	bl	8000358 <__aeabi_dsub>
 800606e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006072:	f7fa fd9b 	bl	8000bac <__aeabi_dcmplt>
 8006076:	2800      	cmp	r0, #0
 8006078:	f040 8095 	bne.w	80061a6 <_dtoa_r+0x6be>
 800607c:	42a6      	cmp	r6, r4
 800607e:	f43f af50 	beq.w	8005f22 <_dtoa_r+0x43a>
 8006082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006086:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <_dtoa_r+0x5c8>)
 8006088:	2200      	movs	r2, #0
 800608a:	f7fa fb1d 	bl	80006c8 <__aeabi_dmul>
 800608e:	4b08      	ldr	r3, [pc, #32]	@ (80060b0 <_dtoa_r+0x5c8>)
 8006090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006094:	2200      	movs	r2, #0
 8006096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800609a:	f7fa fb15 	bl	80006c8 <__aeabi_dmul>
 800609e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a2:	e7c4      	b.n	800602e <_dtoa_r+0x546>
 80060a4:	0801cd60 	.word	0x0801cd60
 80060a8:	0801cd38 	.word	0x0801cd38
 80060ac:	3ff00000 	.word	0x3ff00000
 80060b0:	40240000 	.word	0x40240000
 80060b4:	401c0000 	.word	0x401c0000
 80060b8:	40140000 	.word	0x40140000
 80060bc:	3fe00000 	.word	0x3fe00000
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	f7fa fb00 	bl	80006c8 <__aeabi_dmul>
 80060c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80060ce:	4656      	mov	r6, sl
 80060d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d4:	f7fa fda8 	bl	8000c28 <__aeabi_d2iz>
 80060d8:	4605      	mov	r5, r0
 80060da:	f7fa fa8b 	bl	80005f4 <__aeabi_i2d>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e6:	f7fa f937 	bl	8000358 <__aeabi_dsub>
 80060ea:	3530      	adds	r5, #48	@ 0x30
 80060ec:	f806 5b01 	strb.w	r5, [r6], #1
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	d124      	bne.n	800614a <_dtoa_r+0x662>
 8006100:	4bac      	ldr	r3, [pc, #688]	@ (80063b4 <_dtoa_r+0x8cc>)
 8006102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006106:	f7fa f929 	bl	800035c <__adddf3>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006112:	f7fa fd69 	bl	8000be8 <__aeabi_dcmpgt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d145      	bne.n	80061a6 <_dtoa_r+0x6be>
 800611a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800611e:	49a5      	ldr	r1, [pc, #660]	@ (80063b4 <_dtoa_r+0x8cc>)
 8006120:	2000      	movs	r0, #0
 8006122:	f7fa f919 	bl	8000358 <__aeabi_dsub>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612e:	f7fa fd3d 	bl	8000bac <__aeabi_dcmplt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f43f aef5 	beq.w	8005f22 <_dtoa_r+0x43a>
 8006138:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800613a:	1e73      	subs	r3, r6, #1
 800613c:	9315      	str	r3, [sp, #84]	@ 0x54
 800613e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006142:	2b30      	cmp	r3, #48	@ 0x30
 8006144:	d0f8      	beq.n	8006138 <_dtoa_r+0x650>
 8006146:	9f04      	ldr	r7, [sp, #16]
 8006148:	e73e      	b.n	8005fc8 <_dtoa_r+0x4e0>
 800614a:	4b9b      	ldr	r3, [pc, #620]	@ (80063b8 <_dtoa_r+0x8d0>)
 800614c:	f7fa fabc 	bl	80006c8 <__aeabi_dmul>
 8006150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006154:	e7bc      	b.n	80060d0 <_dtoa_r+0x5e8>
 8006156:	d10c      	bne.n	8006172 <_dtoa_r+0x68a>
 8006158:	4b98      	ldr	r3, [pc, #608]	@ (80063bc <_dtoa_r+0x8d4>)
 800615a:	2200      	movs	r2, #0
 800615c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006160:	f7fa fab2 	bl	80006c8 <__aeabi_dmul>
 8006164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006168:	f7fa fd34 	bl	8000bd4 <__aeabi_dcmpge>
 800616c:	2800      	cmp	r0, #0
 800616e:	f000 8157 	beq.w	8006420 <_dtoa_r+0x938>
 8006172:	2400      	movs	r4, #0
 8006174:	4625      	mov	r5, r4
 8006176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006178:	43db      	mvns	r3, r3
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	4656      	mov	r6, sl
 800617e:	2700      	movs	r7, #0
 8006180:	4621      	mov	r1, r4
 8006182:	4658      	mov	r0, fp
 8006184:	f000 fbb4 	bl	80068f0 <_Bfree>
 8006188:	2d00      	cmp	r5, #0
 800618a:	d0dc      	beq.n	8006146 <_dtoa_r+0x65e>
 800618c:	b12f      	cbz	r7, 800619a <_dtoa_r+0x6b2>
 800618e:	42af      	cmp	r7, r5
 8006190:	d003      	beq.n	800619a <_dtoa_r+0x6b2>
 8006192:	4639      	mov	r1, r7
 8006194:	4658      	mov	r0, fp
 8006196:	f000 fbab 	bl	80068f0 <_Bfree>
 800619a:	4629      	mov	r1, r5
 800619c:	4658      	mov	r0, fp
 800619e:	f000 fba7 	bl	80068f0 <_Bfree>
 80061a2:	e7d0      	b.n	8006146 <_dtoa_r+0x65e>
 80061a4:	9704      	str	r7, [sp, #16]
 80061a6:	4633      	mov	r3, r6
 80061a8:	461e      	mov	r6, r3
 80061aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ae:	2a39      	cmp	r2, #57	@ 0x39
 80061b0:	d107      	bne.n	80061c2 <_dtoa_r+0x6da>
 80061b2:	459a      	cmp	sl, r3
 80061b4:	d1f8      	bne.n	80061a8 <_dtoa_r+0x6c0>
 80061b6:	9a04      	ldr	r2, [sp, #16]
 80061b8:	3201      	adds	r2, #1
 80061ba:	9204      	str	r2, [sp, #16]
 80061bc:	2230      	movs	r2, #48	@ 0x30
 80061be:	f88a 2000 	strb.w	r2, [sl]
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	3201      	adds	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e7bd      	b.n	8006146 <_dtoa_r+0x65e>
 80061ca:	4b7b      	ldr	r3, [pc, #492]	@ (80063b8 <_dtoa_r+0x8d0>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa fa7b 	bl	80006c8 <__aeabi_dmul>
 80061d2:	2200      	movs	r2, #0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	460d      	mov	r5, r1
 80061da:	f7fa fcdd 	bl	8000b98 <__aeabi_dcmpeq>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f43f aebb 	beq.w	8005f5a <_dtoa_r+0x472>
 80061e4:	e6f0      	b.n	8005fc8 <_dtoa_r+0x4e0>
 80061e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	f000 80db 	beq.w	80063a4 <_dtoa_r+0x8bc>
 80061ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061f0:	2a01      	cmp	r2, #1
 80061f2:	f300 80bf 	bgt.w	8006374 <_dtoa_r+0x88c>
 80061f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	f000 80b7 	beq.w	800636c <_dtoa_r+0x884>
 80061fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006202:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006204:	4646      	mov	r6, r8
 8006206:	9a08      	ldr	r2, [sp, #32]
 8006208:	2101      	movs	r1, #1
 800620a:	441a      	add	r2, r3
 800620c:	4658      	mov	r0, fp
 800620e:	4498      	add	r8, r3
 8006210:	9208      	str	r2, [sp, #32]
 8006212:	f000 fc21 	bl	8006a58 <__i2b>
 8006216:	4605      	mov	r5, r0
 8006218:	b15e      	cbz	r6, 8006232 <_dtoa_r+0x74a>
 800621a:	9b08      	ldr	r3, [sp, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd08      	ble.n	8006232 <_dtoa_r+0x74a>
 8006220:	42b3      	cmp	r3, r6
 8006222:	9a08      	ldr	r2, [sp, #32]
 8006224:	bfa8      	it	ge
 8006226:	4633      	movge	r3, r6
 8006228:	eba8 0803 	sub.w	r8, r8, r3
 800622c:	1af6      	subs	r6, r6, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	9308      	str	r3, [sp, #32]
 8006232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006234:	b1f3      	cbz	r3, 8006274 <_dtoa_r+0x78c>
 8006236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80b7 	beq.w	80063ac <_dtoa_r+0x8c4>
 800623e:	b18c      	cbz	r4, 8006264 <_dtoa_r+0x77c>
 8006240:	4629      	mov	r1, r5
 8006242:	4622      	mov	r2, r4
 8006244:	4658      	mov	r0, fp
 8006246:	f000 fcc7 	bl	8006bd8 <__pow5mult>
 800624a:	464a      	mov	r2, r9
 800624c:	4601      	mov	r1, r0
 800624e:	4605      	mov	r5, r0
 8006250:	4658      	mov	r0, fp
 8006252:	f000 fc17 	bl	8006a84 <__multiply>
 8006256:	4649      	mov	r1, r9
 8006258:	9004      	str	r0, [sp, #16]
 800625a:	4658      	mov	r0, fp
 800625c:	f000 fb48 	bl	80068f0 <_Bfree>
 8006260:	9b04      	ldr	r3, [sp, #16]
 8006262:	4699      	mov	r9, r3
 8006264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006266:	1b1a      	subs	r2, r3, r4
 8006268:	d004      	beq.n	8006274 <_dtoa_r+0x78c>
 800626a:	4649      	mov	r1, r9
 800626c:	4658      	mov	r0, fp
 800626e:	f000 fcb3 	bl	8006bd8 <__pow5mult>
 8006272:	4681      	mov	r9, r0
 8006274:	2101      	movs	r1, #1
 8006276:	4658      	mov	r0, fp
 8006278:	f000 fbee 	bl	8006a58 <__i2b>
 800627c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800627e:	4604      	mov	r4, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 81cf 	beq.w	8006624 <_dtoa_r+0xb3c>
 8006286:	461a      	mov	r2, r3
 8006288:	4601      	mov	r1, r0
 800628a:	4658      	mov	r0, fp
 800628c:	f000 fca4 	bl	8006bd8 <__pow5mult>
 8006290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006292:	2b01      	cmp	r3, #1
 8006294:	4604      	mov	r4, r0
 8006296:	f300 8095 	bgt.w	80063c4 <_dtoa_r+0x8dc>
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 8087 	bne.w	80063b0 <_dtoa_r+0x8c8>
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8089 	bne.w	80063c0 <_dtoa_r+0x8d8>
 80062ae:	9b03      	ldr	r3, [sp, #12]
 80062b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062b4:	0d1b      	lsrs	r3, r3, #20
 80062b6:	051b      	lsls	r3, r3, #20
 80062b8:	b12b      	cbz	r3, 80062c6 <_dtoa_r+0x7de>
 80062ba:	9b08      	ldr	r3, [sp, #32]
 80062bc:	3301      	adds	r3, #1
 80062be:	9308      	str	r3, [sp, #32]
 80062c0:	f108 0801 	add.w	r8, r8, #1
 80062c4:	2301      	movs	r3, #1
 80062c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 81b0 	beq.w	8006630 <_dtoa_r+0xb48>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062d6:	6918      	ldr	r0, [r3, #16]
 80062d8:	f000 fb72 	bl	80069c0 <__hi0bits>
 80062dc:	f1c0 0020 	rsb	r0, r0, #32
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	4418      	add	r0, r3
 80062e4:	f010 001f 	ands.w	r0, r0, #31
 80062e8:	d077      	beq.n	80063da <_dtoa_r+0x8f2>
 80062ea:	f1c0 0320 	rsb	r3, r0, #32
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	dd6b      	ble.n	80063ca <_dtoa_r+0x8e2>
 80062f2:	9b08      	ldr	r3, [sp, #32]
 80062f4:	f1c0 001c 	rsb	r0, r0, #28
 80062f8:	4403      	add	r3, r0
 80062fa:	4480      	add	r8, r0
 80062fc:	4406      	add	r6, r0
 80062fe:	9308      	str	r3, [sp, #32]
 8006300:	f1b8 0f00 	cmp.w	r8, #0
 8006304:	dd05      	ble.n	8006312 <_dtoa_r+0x82a>
 8006306:	4649      	mov	r1, r9
 8006308:	4642      	mov	r2, r8
 800630a:	4658      	mov	r0, fp
 800630c:	f000 fcbe 	bl	8006c8c <__lshift>
 8006310:	4681      	mov	r9, r0
 8006312:	9b08      	ldr	r3, [sp, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	dd05      	ble.n	8006324 <_dtoa_r+0x83c>
 8006318:	4621      	mov	r1, r4
 800631a:	461a      	mov	r2, r3
 800631c:	4658      	mov	r0, fp
 800631e:	f000 fcb5 	bl	8006c8c <__lshift>
 8006322:	4604      	mov	r4, r0
 8006324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006326:	2b00      	cmp	r3, #0
 8006328:	d059      	beq.n	80063de <_dtoa_r+0x8f6>
 800632a:	4621      	mov	r1, r4
 800632c:	4648      	mov	r0, r9
 800632e:	f000 fd19 	bl	8006d64 <__mcmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	da53      	bge.n	80063de <_dtoa_r+0x8f6>
 8006336:	1e7b      	subs	r3, r7, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	4649      	mov	r1, r9
 800633c:	2300      	movs	r3, #0
 800633e:	220a      	movs	r2, #10
 8006340:	4658      	mov	r0, fp
 8006342:	f000 faf7 	bl	8006934 <__multadd>
 8006346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006348:	4681      	mov	r9, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8172 	beq.w	8006634 <_dtoa_r+0xb4c>
 8006350:	2300      	movs	r3, #0
 8006352:	4629      	mov	r1, r5
 8006354:	220a      	movs	r2, #10
 8006356:	4658      	mov	r0, fp
 8006358:	f000 faec 	bl	8006934 <__multadd>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	4605      	mov	r5, r0
 8006362:	dc67      	bgt.n	8006434 <_dtoa_r+0x94c>
 8006364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006366:	2b02      	cmp	r3, #2
 8006368:	dc41      	bgt.n	80063ee <_dtoa_r+0x906>
 800636a:	e063      	b.n	8006434 <_dtoa_r+0x94c>
 800636c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800636e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006372:	e746      	b.n	8006202 <_dtoa_r+0x71a>
 8006374:	9b07      	ldr	r3, [sp, #28]
 8006376:	1e5c      	subs	r4, r3, #1
 8006378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637a:	42a3      	cmp	r3, r4
 800637c:	bfbf      	itttt	lt
 800637e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006380:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006382:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006384:	1ae3      	sublt	r3, r4, r3
 8006386:	bfb4      	ite	lt
 8006388:	18d2      	addlt	r2, r2, r3
 800638a:	1b1c      	subge	r4, r3, r4
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	bfbc      	itt	lt
 8006390:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006392:	2400      	movlt	r4, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb5      	itete	lt
 8006398:	eba8 0603 	sublt.w	r6, r8, r3
 800639c:	9b07      	ldrge	r3, [sp, #28]
 800639e:	2300      	movlt	r3, #0
 80063a0:	4646      	movge	r6, r8
 80063a2:	e730      	b.n	8006206 <_dtoa_r+0x71e>
 80063a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063a8:	4646      	mov	r6, r8
 80063aa:	e735      	b.n	8006218 <_dtoa_r+0x730>
 80063ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063ae:	e75c      	b.n	800626a <_dtoa_r+0x782>
 80063b0:	2300      	movs	r3, #0
 80063b2:	e788      	b.n	80062c6 <_dtoa_r+0x7de>
 80063b4:	3fe00000 	.word	0x3fe00000
 80063b8:	40240000 	.word	0x40240000
 80063bc:	40140000 	.word	0x40140000
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	e780      	b.n	80062c6 <_dtoa_r+0x7de>
 80063c4:	2300      	movs	r3, #0
 80063c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063c8:	e782      	b.n	80062d0 <_dtoa_r+0x7e8>
 80063ca:	d099      	beq.n	8006300 <_dtoa_r+0x818>
 80063cc:	9a08      	ldr	r2, [sp, #32]
 80063ce:	331c      	adds	r3, #28
 80063d0:	441a      	add	r2, r3
 80063d2:	4498      	add	r8, r3
 80063d4:	441e      	add	r6, r3
 80063d6:	9208      	str	r2, [sp, #32]
 80063d8:	e792      	b.n	8006300 <_dtoa_r+0x818>
 80063da:	4603      	mov	r3, r0
 80063dc:	e7f6      	b.n	80063cc <_dtoa_r+0x8e4>
 80063de:	9b07      	ldr	r3, [sp, #28]
 80063e0:	9704      	str	r7, [sp, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dc20      	bgt.n	8006428 <_dtoa_r+0x940>
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	dd1e      	ble.n	800642c <_dtoa_r+0x944>
 80063ee:	9b00      	ldr	r3, [sp, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f47f aec0 	bne.w	8006176 <_dtoa_r+0x68e>
 80063f6:	4621      	mov	r1, r4
 80063f8:	2205      	movs	r2, #5
 80063fa:	4658      	mov	r0, fp
 80063fc:	f000 fa9a 	bl	8006934 <__multadd>
 8006400:	4601      	mov	r1, r0
 8006402:	4604      	mov	r4, r0
 8006404:	4648      	mov	r0, r9
 8006406:	f000 fcad 	bl	8006d64 <__mcmp>
 800640a:	2800      	cmp	r0, #0
 800640c:	f77f aeb3 	ble.w	8006176 <_dtoa_r+0x68e>
 8006410:	4656      	mov	r6, sl
 8006412:	2331      	movs	r3, #49	@ 0x31
 8006414:	f806 3b01 	strb.w	r3, [r6], #1
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	e6ae      	b.n	800617e <_dtoa_r+0x696>
 8006420:	9c07      	ldr	r4, [sp, #28]
 8006422:	9704      	str	r7, [sp, #16]
 8006424:	4625      	mov	r5, r4
 8006426:	e7f3      	b.n	8006410 <_dtoa_r+0x928>
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8104 	beq.w	800663c <_dtoa_r+0xb54>
 8006434:	2e00      	cmp	r6, #0
 8006436:	dd05      	ble.n	8006444 <_dtoa_r+0x95c>
 8006438:	4629      	mov	r1, r5
 800643a:	4632      	mov	r2, r6
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fc25 	bl	8006c8c <__lshift>
 8006442:	4605      	mov	r5, r0
 8006444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d05a      	beq.n	8006500 <_dtoa_r+0xa18>
 800644a:	6869      	ldr	r1, [r5, #4]
 800644c:	4658      	mov	r0, fp
 800644e:	f000 fa0f 	bl	8006870 <_Balloc>
 8006452:	4606      	mov	r6, r0
 8006454:	b928      	cbnz	r0, 8006462 <_dtoa_r+0x97a>
 8006456:	4b84      	ldr	r3, [pc, #528]	@ (8006668 <_dtoa_r+0xb80>)
 8006458:	4602      	mov	r2, r0
 800645a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800645e:	f7ff bb5a 	b.w	8005b16 <_dtoa_r+0x2e>
 8006462:	692a      	ldr	r2, [r5, #16]
 8006464:	3202      	adds	r2, #2
 8006466:	0092      	lsls	r2, r2, #2
 8006468:	f105 010c 	add.w	r1, r5, #12
 800646c:	300c      	adds	r0, #12
 800646e:	f001 f803 	bl	8007478 <memcpy>
 8006472:	2201      	movs	r2, #1
 8006474:	4631      	mov	r1, r6
 8006476:	4658      	mov	r0, fp
 8006478:	f000 fc08 	bl	8006c8c <__lshift>
 800647c:	f10a 0301 	add.w	r3, sl, #1
 8006480:	9307      	str	r3, [sp, #28]
 8006482:	9b00      	ldr	r3, [sp, #0]
 8006484:	4453      	add	r3, sl
 8006486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	462f      	mov	r7, r5
 8006490:	930a      	str	r3, [sp, #40]	@ 0x28
 8006492:	4605      	mov	r5, r0
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	4621      	mov	r1, r4
 8006498:	3b01      	subs	r3, #1
 800649a:	4648      	mov	r0, r9
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f7ff fa98 	bl	80059d2 <quorem>
 80064a2:	4639      	mov	r1, r7
 80064a4:	9002      	str	r0, [sp, #8]
 80064a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064aa:	4648      	mov	r0, r9
 80064ac:	f000 fc5a 	bl	8006d64 <__mcmp>
 80064b0:	462a      	mov	r2, r5
 80064b2:	9008      	str	r0, [sp, #32]
 80064b4:	4621      	mov	r1, r4
 80064b6:	4658      	mov	r0, fp
 80064b8:	f000 fc70 	bl	8006d9c <__mdiff>
 80064bc:	68c2      	ldr	r2, [r0, #12]
 80064be:	4606      	mov	r6, r0
 80064c0:	bb02      	cbnz	r2, 8006504 <_dtoa_r+0xa1c>
 80064c2:	4601      	mov	r1, r0
 80064c4:	4648      	mov	r0, r9
 80064c6:	f000 fc4d 	bl	8006d64 <__mcmp>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4631      	mov	r1, r6
 80064ce:	4658      	mov	r0, fp
 80064d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80064d2:	f000 fa0d 	bl	80068f0 <_Bfree>
 80064d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064da:	9e07      	ldr	r6, [sp, #28]
 80064dc:	ea43 0102 	orr.w	r1, r3, r2
 80064e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064e2:	4319      	orrs	r1, r3
 80064e4:	d110      	bne.n	8006508 <_dtoa_r+0xa20>
 80064e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064ea:	d029      	beq.n	8006540 <_dtoa_r+0xa58>
 80064ec:	9b08      	ldr	r3, [sp, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dd02      	ble.n	80064f8 <_dtoa_r+0xa10>
 80064f2:	9b02      	ldr	r3, [sp, #8]
 80064f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	f883 8000 	strb.w	r8, [r3]
 80064fe:	e63f      	b.n	8006180 <_dtoa_r+0x698>
 8006500:	4628      	mov	r0, r5
 8006502:	e7bb      	b.n	800647c <_dtoa_r+0x994>
 8006504:	2201      	movs	r2, #1
 8006506:	e7e1      	b.n	80064cc <_dtoa_r+0x9e4>
 8006508:	9b08      	ldr	r3, [sp, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	db04      	blt.n	8006518 <_dtoa_r+0xa30>
 800650e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006510:	430b      	orrs	r3, r1
 8006512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006514:	430b      	orrs	r3, r1
 8006516:	d120      	bne.n	800655a <_dtoa_r+0xa72>
 8006518:	2a00      	cmp	r2, #0
 800651a:	dded      	ble.n	80064f8 <_dtoa_r+0xa10>
 800651c:	4649      	mov	r1, r9
 800651e:	2201      	movs	r2, #1
 8006520:	4658      	mov	r0, fp
 8006522:	f000 fbb3 	bl	8006c8c <__lshift>
 8006526:	4621      	mov	r1, r4
 8006528:	4681      	mov	r9, r0
 800652a:	f000 fc1b 	bl	8006d64 <__mcmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	dc03      	bgt.n	800653a <_dtoa_r+0xa52>
 8006532:	d1e1      	bne.n	80064f8 <_dtoa_r+0xa10>
 8006534:	f018 0f01 	tst.w	r8, #1
 8006538:	d0de      	beq.n	80064f8 <_dtoa_r+0xa10>
 800653a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800653e:	d1d8      	bne.n	80064f2 <_dtoa_r+0xa0a>
 8006540:	9a00      	ldr	r2, [sp, #0]
 8006542:	2339      	movs	r3, #57	@ 0x39
 8006544:	7013      	strb	r3, [r2, #0]
 8006546:	4633      	mov	r3, r6
 8006548:	461e      	mov	r6, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006550:	2a39      	cmp	r2, #57	@ 0x39
 8006552:	d052      	beq.n	80065fa <_dtoa_r+0xb12>
 8006554:	3201      	adds	r2, #1
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	e612      	b.n	8006180 <_dtoa_r+0x698>
 800655a:	2a00      	cmp	r2, #0
 800655c:	dd07      	ble.n	800656e <_dtoa_r+0xa86>
 800655e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006562:	d0ed      	beq.n	8006540 <_dtoa_r+0xa58>
 8006564:	9a00      	ldr	r2, [sp, #0]
 8006566:	f108 0301 	add.w	r3, r8, #1
 800656a:	7013      	strb	r3, [r2, #0]
 800656c:	e608      	b.n	8006180 <_dtoa_r+0x698>
 800656e:	9b07      	ldr	r3, [sp, #28]
 8006570:	9a07      	ldr	r2, [sp, #28]
 8006572:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006578:	4293      	cmp	r3, r2
 800657a:	d028      	beq.n	80065ce <_dtoa_r+0xae6>
 800657c:	4649      	mov	r1, r9
 800657e:	2300      	movs	r3, #0
 8006580:	220a      	movs	r2, #10
 8006582:	4658      	mov	r0, fp
 8006584:	f000 f9d6 	bl	8006934 <__multadd>
 8006588:	42af      	cmp	r7, r5
 800658a:	4681      	mov	r9, r0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	f04f 020a 	mov.w	r2, #10
 8006594:	4639      	mov	r1, r7
 8006596:	4658      	mov	r0, fp
 8006598:	d107      	bne.n	80065aa <_dtoa_r+0xac2>
 800659a:	f000 f9cb 	bl	8006934 <__multadd>
 800659e:	4607      	mov	r7, r0
 80065a0:	4605      	mov	r5, r0
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	3301      	adds	r3, #1
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	e774      	b.n	8006494 <_dtoa_r+0x9ac>
 80065aa:	f000 f9c3 	bl	8006934 <__multadd>
 80065ae:	4629      	mov	r1, r5
 80065b0:	4607      	mov	r7, r0
 80065b2:	2300      	movs	r3, #0
 80065b4:	220a      	movs	r2, #10
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 f9bc 	bl	8006934 <__multadd>
 80065bc:	4605      	mov	r5, r0
 80065be:	e7f0      	b.n	80065a2 <_dtoa_r+0xaba>
 80065c0:	9b00      	ldr	r3, [sp, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfcc      	ite	gt
 80065c6:	461e      	movgt	r6, r3
 80065c8:	2601      	movle	r6, #1
 80065ca:	4456      	add	r6, sl
 80065cc:	2700      	movs	r7, #0
 80065ce:	4649      	mov	r1, r9
 80065d0:	2201      	movs	r2, #1
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fb5a 	bl	8006c8c <__lshift>
 80065d8:	4621      	mov	r1, r4
 80065da:	4681      	mov	r9, r0
 80065dc:	f000 fbc2 	bl	8006d64 <__mcmp>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	dcb0      	bgt.n	8006546 <_dtoa_r+0xa5e>
 80065e4:	d102      	bne.n	80065ec <_dtoa_r+0xb04>
 80065e6:	f018 0f01 	tst.w	r8, #1
 80065ea:	d1ac      	bne.n	8006546 <_dtoa_r+0xa5e>
 80065ec:	4633      	mov	r3, r6
 80065ee:	461e      	mov	r6, r3
 80065f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f4:	2a30      	cmp	r2, #48	@ 0x30
 80065f6:	d0fa      	beq.n	80065ee <_dtoa_r+0xb06>
 80065f8:	e5c2      	b.n	8006180 <_dtoa_r+0x698>
 80065fa:	459a      	cmp	sl, r3
 80065fc:	d1a4      	bne.n	8006548 <_dtoa_r+0xa60>
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	2331      	movs	r3, #49	@ 0x31
 8006606:	f88a 3000 	strb.w	r3, [sl]
 800660a:	e5b9      	b.n	8006180 <_dtoa_r+0x698>
 800660c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800660e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800666c <_dtoa_r+0xb84>
 8006612:	b11b      	cbz	r3, 800661c <_dtoa_r+0xb34>
 8006614:	f10a 0308 	add.w	r3, sl, #8
 8006618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4650      	mov	r0, sl
 800661e:	b019      	add	sp, #100	@ 0x64
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006626:	2b01      	cmp	r3, #1
 8006628:	f77f ae37 	ble.w	800629a <_dtoa_r+0x7b2>
 800662c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800662e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006630:	2001      	movs	r0, #1
 8006632:	e655      	b.n	80062e0 <_dtoa_r+0x7f8>
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f77f aed6 	ble.w	80063e8 <_dtoa_r+0x900>
 800663c:	4656      	mov	r6, sl
 800663e:	4621      	mov	r1, r4
 8006640:	4648      	mov	r0, r9
 8006642:	f7ff f9c6 	bl	80059d2 <quorem>
 8006646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800664a:	f806 8b01 	strb.w	r8, [r6], #1
 800664e:	9b00      	ldr	r3, [sp, #0]
 8006650:	eba6 020a 	sub.w	r2, r6, sl
 8006654:	4293      	cmp	r3, r2
 8006656:	ddb3      	ble.n	80065c0 <_dtoa_r+0xad8>
 8006658:	4649      	mov	r1, r9
 800665a:	2300      	movs	r3, #0
 800665c:	220a      	movs	r2, #10
 800665e:	4658      	mov	r0, fp
 8006660:	f000 f968 	bl	8006934 <__multadd>
 8006664:	4681      	mov	r9, r0
 8006666:	e7ea      	b.n	800663e <_dtoa_r+0xb56>
 8006668:	0801ccbc 	.word	0x0801ccbc
 800666c:	0801cc40 	.word	0x0801cc40

08006670 <_free_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	2900      	cmp	r1, #0
 8006676:	d041      	beq.n	80066fc <_free_r+0x8c>
 8006678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667c:	1f0c      	subs	r4, r1, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb8      	it	lt
 8006682:	18e4      	addlt	r4, r4, r3
 8006684:	f000 f8e8 	bl	8006858 <__malloc_lock>
 8006688:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <_free_r+0x90>)
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	b933      	cbnz	r3, 800669c <_free_r+0x2c>
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	6014      	str	r4, [r2, #0]
 8006692:	4628      	mov	r0, r5
 8006694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006698:	f000 b8e4 	b.w	8006864 <__malloc_unlock>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d908      	bls.n	80066b2 <_free_r+0x42>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf01      	itttt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	1809      	addeq	r1, r1, r0
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	e7ed      	b.n	800668e <_free_r+0x1e>
 80066b2:	461a      	mov	r2, r3
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b10b      	cbz	r3, 80066bc <_free_r+0x4c>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x42>
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	1850      	adds	r0, r2, r1
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x6c>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	4401      	add	r1, r0
 80066c8:	1850      	adds	r0, r2, r1
 80066ca:	4283      	cmp	r3, r0
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	d1e0      	bne.n	8006692 <_free_r+0x22>
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	4408      	add	r0, r1
 80066d8:	6010      	str	r0, [r2, #0]
 80066da:	e7da      	b.n	8006692 <_free_r+0x22>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x74>
 80066de:	230c      	movs	r3, #12
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	e7d6      	b.n	8006692 <_free_r+0x22>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	1821      	adds	r1, r4, r0
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf04      	itt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	6063      	str	r3, [r4, #4]
 80066f2:	bf04      	itt	eq
 80066f4:	1809      	addeq	r1, r1, r0
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	6054      	str	r4, [r2, #4]
 80066fa:	e7ca      	b.n	8006692 <_free_r+0x22>
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	bf00      	nop
 8006700:	200005e4 	.word	0x200005e4

08006704 <malloc>:
 8006704:	4b02      	ldr	r3, [pc, #8]	@ (8006710 <malloc+0xc>)
 8006706:	4601      	mov	r1, r0
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f000 b825 	b.w	8006758 <_malloc_r>
 800670e:	bf00      	nop
 8006710:	20000018 	.word	0x20000018

08006714 <sbrk_aligned>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4e0f      	ldr	r6, [pc, #60]	@ (8006754 <sbrk_aligned+0x40>)
 8006718:	460c      	mov	r4, r1
 800671a:	6831      	ldr	r1, [r6, #0]
 800671c:	4605      	mov	r5, r0
 800671e:	b911      	cbnz	r1, 8006726 <sbrk_aligned+0x12>
 8006720:	f000 fe9a 	bl	8007458 <_sbrk_r>
 8006724:	6030      	str	r0, [r6, #0]
 8006726:	4621      	mov	r1, r4
 8006728:	4628      	mov	r0, r5
 800672a:	f000 fe95 	bl	8007458 <_sbrk_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d103      	bne.n	800673a <sbrk_aligned+0x26>
 8006732:	f04f 34ff 	mov.w	r4, #4294967295
 8006736:	4620      	mov	r0, r4
 8006738:	bd70      	pop	{r4, r5, r6, pc}
 800673a:	1cc4      	adds	r4, r0, #3
 800673c:	f024 0403 	bic.w	r4, r4, #3
 8006740:	42a0      	cmp	r0, r4
 8006742:	d0f8      	beq.n	8006736 <sbrk_aligned+0x22>
 8006744:	1a21      	subs	r1, r4, r0
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fe86 	bl	8007458 <_sbrk_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d1f2      	bne.n	8006736 <sbrk_aligned+0x22>
 8006750:	e7ef      	b.n	8006732 <sbrk_aligned+0x1e>
 8006752:	bf00      	nop
 8006754:	200005e0 	.word	0x200005e0

08006758 <_malloc_r>:
 8006758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800675c:	1ccd      	adds	r5, r1, #3
 800675e:	f025 0503 	bic.w	r5, r5, #3
 8006762:	3508      	adds	r5, #8
 8006764:	2d0c      	cmp	r5, #12
 8006766:	bf38      	it	cc
 8006768:	250c      	movcc	r5, #12
 800676a:	2d00      	cmp	r5, #0
 800676c:	4606      	mov	r6, r0
 800676e:	db01      	blt.n	8006774 <_malloc_r+0x1c>
 8006770:	42a9      	cmp	r1, r5
 8006772:	d904      	bls.n	800677e <_malloc_r+0x26>
 8006774:	230c      	movs	r3, #12
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	2000      	movs	r0, #0
 800677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006854 <_malloc_r+0xfc>
 8006782:	f000 f869 	bl	8006858 <__malloc_lock>
 8006786:	f8d8 3000 	ldr.w	r3, [r8]
 800678a:	461c      	mov	r4, r3
 800678c:	bb44      	cbnz	r4, 80067e0 <_malloc_r+0x88>
 800678e:	4629      	mov	r1, r5
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff ffbf 	bl	8006714 <sbrk_aligned>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	4604      	mov	r4, r0
 800679a:	d158      	bne.n	800684e <_malloc_r+0xf6>
 800679c:	f8d8 4000 	ldr.w	r4, [r8]
 80067a0:	4627      	mov	r7, r4
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	d143      	bne.n	800682e <_malloc_r+0xd6>
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d04b      	beq.n	8006842 <_malloc_r+0xea>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4639      	mov	r1, r7
 80067ae:	4630      	mov	r0, r6
 80067b0:	eb04 0903 	add.w	r9, r4, r3
 80067b4:	f000 fe50 	bl	8007458 <_sbrk_r>
 80067b8:	4581      	cmp	r9, r0
 80067ba:	d142      	bne.n	8006842 <_malloc_r+0xea>
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	1a6d      	subs	r5, r5, r1
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7ff ffa6 	bl	8006714 <sbrk_aligned>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d03a      	beq.n	8006842 <_malloc_r+0xea>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	442b      	add	r3, r5
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	f8d8 3000 	ldr.w	r3, [r8]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	bb62      	cbnz	r2, 8006834 <_malloc_r+0xdc>
 80067da:	f8c8 7000 	str.w	r7, [r8]
 80067de:	e00f      	b.n	8006800 <_malloc_r+0xa8>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	1b52      	subs	r2, r2, r5
 80067e4:	d420      	bmi.n	8006828 <_malloc_r+0xd0>
 80067e6:	2a0b      	cmp	r2, #11
 80067e8:	d917      	bls.n	800681a <_malloc_r+0xc2>
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	6059      	strne	r1, [r3, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	bf08      	it	eq
 80067f8:	f8c8 1000 	streq.w	r1, [r8]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4630      	mov	r0, r6
 8006802:	f000 f82f 	bl	8006864 <__malloc_unlock>
 8006806:	f104 000b 	add.w	r0, r4, #11
 800680a:	1d23      	adds	r3, r4, #4
 800680c:	f020 0007 	bic.w	r0, r0, #7
 8006810:	1ac2      	subs	r2, r0, r3
 8006812:	bf1c      	itt	ne
 8006814:	1a1b      	subne	r3, r3, r0
 8006816:	50a3      	strne	r3, [r4, r2]
 8006818:	e7af      	b.n	800677a <_malloc_r+0x22>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	bf0c      	ite	eq
 8006820:	f8c8 2000 	streq.w	r2, [r8]
 8006824:	605a      	strne	r2, [r3, #4]
 8006826:	e7eb      	b.n	8006800 <_malloc_r+0xa8>
 8006828:	4623      	mov	r3, r4
 800682a:	6864      	ldr	r4, [r4, #4]
 800682c:	e7ae      	b.n	800678c <_malloc_r+0x34>
 800682e:	463c      	mov	r4, r7
 8006830:	687f      	ldr	r7, [r7, #4]
 8006832:	e7b6      	b.n	80067a2 <_malloc_r+0x4a>
 8006834:	461a      	mov	r2, r3
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	42a3      	cmp	r3, r4
 800683a:	d1fb      	bne.n	8006834 <_malloc_r+0xdc>
 800683c:	2300      	movs	r3, #0
 800683e:	6053      	str	r3, [r2, #4]
 8006840:	e7de      	b.n	8006800 <_malloc_r+0xa8>
 8006842:	230c      	movs	r3, #12
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	4630      	mov	r0, r6
 8006848:	f000 f80c 	bl	8006864 <__malloc_unlock>
 800684c:	e794      	b.n	8006778 <_malloc_r+0x20>
 800684e:	6005      	str	r5, [r0, #0]
 8006850:	e7d6      	b.n	8006800 <_malloc_r+0xa8>
 8006852:	bf00      	nop
 8006854:	200005e4 	.word	0x200005e4

08006858 <__malloc_lock>:
 8006858:	4801      	ldr	r0, [pc, #4]	@ (8006860 <__malloc_lock+0x8>)
 800685a:	f7ff b8b8 	b.w	80059ce <__retarget_lock_acquire_recursive>
 800685e:	bf00      	nop
 8006860:	200005dc 	.word	0x200005dc

08006864 <__malloc_unlock>:
 8006864:	4801      	ldr	r0, [pc, #4]	@ (800686c <__malloc_unlock+0x8>)
 8006866:	f7ff b8b3 	b.w	80059d0 <__retarget_lock_release_recursive>
 800686a:	bf00      	nop
 800686c:	200005dc 	.word	0x200005dc

08006870 <_Balloc>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	69c6      	ldr	r6, [r0, #28]
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	b976      	cbnz	r6, 8006898 <_Balloc+0x28>
 800687a:	2010      	movs	r0, #16
 800687c:	f7ff ff42 	bl	8006704 <malloc>
 8006880:	4602      	mov	r2, r0
 8006882:	61e0      	str	r0, [r4, #28]
 8006884:	b920      	cbnz	r0, 8006890 <_Balloc+0x20>
 8006886:	4b18      	ldr	r3, [pc, #96]	@ (80068e8 <_Balloc+0x78>)
 8006888:	4818      	ldr	r0, [pc, #96]	@ (80068ec <_Balloc+0x7c>)
 800688a:	216b      	movs	r1, #107	@ 0x6b
 800688c:	f000 fe02 	bl	8007494 <__assert_func>
 8006890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006894:	6006      	str	r6, [r0, #0]
 8006896:	60c6      	str	r6, [r0, #12]
 8006898:	69e6      	ldr	r6, [r4, #28]
 800689a:	68f3      	ldr	r3, [r6, #12]
 800689c:	b183      	cbz	r3, 80068c0 <_Balloc+0x50>
 800689e:	69e3      	ldr	r3, [r4, #28]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068a6:	b9b8      	cbnz	r0, 80068d8 <_Balloc+0x68>
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f605 	lsl.w	r6, r1, r5
 80068ae:	1d72      	adds	r2, r6, #5
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fe0c 	bl	80074d0 <_calloc_r>
 80068b8:	b160      	cbz	r0, 80068d4 <_Balloc+0x64>
 80068ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068be:	e00e      	b.n	80068de <_Balloc+0x6e>
 80068c0:	2221      	movs	r2, #33	@ 0x21
 80068c2:	2104      	movs	r1, #4
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fe03 	bl	80074d0 <_calloc_r>
 80068ca:	69e3      	ldr	r3, [r4, #28]
 80068cc:	60f0      	str	r0, [r6, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <_Balloc+0x2e>
 80068d4:	2000      	movs	r0, #0
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068de:	2300      	movs	r3, #0
 80068e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068e4:	e7f7      	b.n	80068d6 <_Balloc+0x66>
 80068e6:	bf00      	nop
 80068e8:	0801cc4d 	.word	0x0801cc4d
 80068ec:	0801cccd 	.word	0x0801cccd

080068f0 <_Bfree>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	69c6      	ldr	r6, [r0, #28]
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	b976      	cbnz	r6, 8006918 <_Bfree+0x28>
 80068fa:	2010      	movs	r0, #16
 80068fc:	f7ff ff02 	bl	8006704 <malloc>
 8006900:	4602      	mov	r2, r0
 8006902:	61e8      	str	r0, [r5, #28]
 8006904:	b920      	cbnz	r0, 8006910 <_Bfree+0x20>
 8006906:	4b09      	ldr	r3, [pc, #36]	@ (800692c <_Bfree+0x3c>)
 8006908:	4809      	ldr	r0, [pc, #36]	@ (8006930 <_Bfree+0x40>)
 800690a:	218f      	movs	r1, #143	@ 0x8f
 800690c:	f000 fdc2 	bl	8007494 <__assert_func>
 8006910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006914:	6006      	str	r6, [r0, #0]
 8006916:	60c6      	str	r6, [r0, #12]
 8006918:	b13c      	cbz	r4, 800692a <_Bfree+0x3a>
 800691a:	69eb      	ldr	r3, [r5, #28]
 800691c:	6862      	ldr	r2, [r4, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006924:	6021      	str	r1, [r4, #0]
 8006926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	0801cc4d 	.word	0x0801cc4d
 8006930:	0801cccd 	.word	0x0801cccd

08006934 <__multadd>:
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	690d      	ldr	r5, [r1, #16]
 800693a:	4607      	mov	r7, r0
 800693c:	460c      	mov	r4, r1
 800693e:	461e      	mov	r6, r3
 8006940:	f101 0c14 	add.w	ip, r1, #20
 8006944:	2000      	movs	r0, #0
 8006946:	f8dc 3000 	ldr.w	r3, [ip]
 800694a:	b299      	uxth	r1, r3
 800694c:	fb02 6101 	mla	r1, r2, r1, r6
 8006950:	0c1e      	lsrs	r6, r3, #16
 8006952:	0c0b      	lsrs	r3, r1, #16
 8006954:	fb02 3306 	mla	r3, r2, r6, r3
 8006958:	b289      	uxth	r1, r1
 800695a:	3001      	adds	r0, #1
 800695c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006960:	4285      	cmp	r5, r0
 8006962:	f84c 1b04 	str.w	r1, [ip], #4
 8006966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800696a:	dcec      	bgt.n	8006946 <__multadd+0x12>
 800696c:	b30e      	cbz	r6, 80069b2 <__multadd+0x7e>
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc19      	bgt.n	80069a8 <__multadd+0x74>
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4638      	mov	r0, r7
 8006978:	3101      	adds	r1, #1
 800697a:	f7ff ff79 	bl	8006870 <_Balloc>
 800697e:	4680      	mov	r8, r0
 8006980:	b928      	cbnz	r0, 800698e <__multadd+0x5a>
 8006982:	4602      	mov	r2, r0
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <__multadd+0x84>)
 8006986:	480d      	ldr	r0, [pc, #52]	@ (80069bc <__multadd+0x88>)
 8006988:	21ba      	movs	r1, #186	@ 0xba
 800698a:	f000 fd83 	bl	8007494 <__assert_func>
 800698e:	6922      	ldr	r2, [r4, #16]
 8006990:	3202      	adds	r2, #2
 8006992:	f104 010c 	add.w	r1, r4, #12
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	300c      	adds	r0, #12
 800699a:	f000 fd6d 	bl	8007478 <memcpy>
 800699e:	4621      	mov	r1, r4
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ffa5 	bl	80068f0 <_Bfree>
 80069a6:	4644      	mov	r4, r8
 80069a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069ac:	3501      	adds	r5, #1
 80069ae:	615e      	str	r6, [r3, #20]
 80069b0:	6125      	str	r5, [r4, #16]
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	0801ccbc 	.word	0x0801ccbc
 80069bc:	0801cccd 	.word	0x0801cccd

080069c0 <__hi0bits>:
 80069c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069c4:	4603      	mov	r3, r0
 80069c6:	bf36      	itet	cc
 80069c8:	0403      	lslcc	r3, r0, #16
 80069ca:	2000      	movcs	r0, #0
 80069cc:	2010      	movcc	r0, #16
 80069ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069d2:	bf3c      	itt	cc
 80069d4:	021b      	lslcc	r3, r3, #8
 80069d6:	3008      	addcc	r0, #8
 80069d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069dc:	bf3c      	itt	cc
 80069de:	011b      	lslcc	r3, r3, #4
 80069e0:	3004      	addcc	r0, #4
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	bf3c      	itt	cc
 80069e8:	009b      	lslcc	r3, r3, #2
 80069ea:	3002      	addcc	r0, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	db05      	blt.n	80069fc <__hi0bits+0x3c>
 80069f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069f4:	f100 0001 	add.w	r0, r0, #1
 80069f8:	bf08      	it	eq
 80069fa:	2020      	moveq	r0, #32
 80069fc:	4770      	bx	lr

080069fe <__lo0bits>:
 80069fe:	6803      	ldr	r3, [r0, #0]
 8006a00:	4602      	mov	r2, r0
 8006a02:	f013 0007 	ands.w	r0, r3, #7
 8006a06:	d00b      	beq.n	8006a20 <__lo0bits+0x22>
 8006a08:	07d9      	lsls	r1, r3, #31
 8006a0a:	d421      	bmi.n	8006a50 <__lo0bits+0x52>
 8006a0c:	0798      	lsls	r0, r3, #30
 8006a0e:	bf49      	itett	mi
 8006a10:	085b      	lsrmi	r3, r3, #1
 8006a12:	089b      	lsrpl	r3, r3, #2
 8006a14:	2001      	movmi	r0, #1
 8006a16:	6013      	strmi	r3, [r2, #0]
 8006a18:	bf5c      	itt	pl
 8006a1a:	6013      	strpl	r3, [r2, #0]
 8006a1c:	2002      	movpl	r0, #2
 8006a1e:	4770      	bx	lr
 8006a20:	b299      	uxth	r1, r3
 8006a22:	b909      	cbnz	r1, 8006a28 <__lo0bits+0x2a>
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	2010      	movs	r0, #16
 8006a28:	b2d9      	uxtb	r1, r3
 8006a2a:	b909      	cbnz	r1, 8006a30 <__lo0bits+0x32>
 8006a2c:	3008      	adds	r0, #8
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	0719      	lsls	r1, r3, #28
 8006a32:	bf04      	itt	eq
 8006a34:	091b      	lsreq	r3, r3, #4
 8006a36:	3004      	addeq	r0, #4
 8006a38:	0799      	lsls	r1, r3, #30
 8006a3a:	bf04      	itt	eq
 8006a3c:	089b      	lsreq	r3, r3, #2
 8006a3e:	3002      	addeq	r0, #2
 8006a40:	07d9      	lsls	r1, r3, #31
 8006a42:	d403      	bmi.n	8006a4c <__lo0bits+0x4e>
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	f100 0001 	add.w	r0, r0, #1
 8006a4a:	d003      	beq.n	8006a54 <__lo0bits+0x56>
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4770      	bx	lr
 8006a50:	2000      	movs	r0, #0
 8006a52:	4770      	bx	lr
 8006a54:	2020      	movs	r0, #32
 8006a56:	4770      	bx	lr

08006a58 <__i2b>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	f7ff ff07 	bl	8006870 <_Balloc>
 8006a62:	4602      	mov	r2, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <__i2b+0x1a>
 8006a66:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <__i2b+0x24>)
 8006a68:	4805      	ldr	r0, [pc, #20]	@ (8006a80 <__i2b+0x28>)
 8006a6a:	f240 1145 	movw	r1, #325	@ 0x145
 8006a6e:	f000 fd11 	bl	8007494 <__assert_func>
 8006a72:	2301      	movs	r3, #1
 8006a74:	6144      	str	r4, [r0, #20]
 8006a76:	6103      	str	r3, [r0, #16]
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0801ccbc 	.word	0x0801ccbc
 8006a80:	0801cccd 	.word	0x0801cccd

08006a84 <__multiply>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	4614      	mov	r4, r2
 8006a8a:	690a      	ldr	r2, [r1, #16]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bfa8      	it	ge
 8006a92:	4623      	movge	r3, r4
 8006a94:	460f      	mov	r7, r1
 8006a96:	bfa4      	itt	ge
 8006a98:	460c      	movge	r4, r1
 8006a9a:	461f      	movge	r7, r3
 8006a9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006aa0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	6861      	ldr	r1, [r4, #4]
 8006aa8:	eb0a 0609 	add.w	r6, sl, r9
 8006aac:	42b3      	cmp	r3, r6
 8006aae:	b085      	sub	sp, #20
 8006ab0:	bfb8      	it	lt
 8006ab2:	3101      	addlt	r1, #1
 8006ab4:	f7ff fedc 	bl	8006870 <_Balloc>
 8006ab8:	b930      	cbnz	r0, 8006ac8 <__multiply+0x44>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b44      	ldr	r3, [pc, #272]	@ (8006bd0 <__multiply+0x14c>)
 8006abe:	4845      	ldr	r0, [pc, #276]	@ (8006bd4 <__multiply+0x150>)
 8006ac0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ac4:	f000 fce6 	bl	8007494 <__assert_func>
 8006ac8:	f100 0514 	add.w	r5, r0, #20
 8006acc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	d321      	bcc.n	8006b1c <__multiply+0x98>
 8006ad8:	f107 0114 	add.w	r1, r7, #20
 8006adc:	f104 0214 	add.w	r2, r4, #20
 8006ae0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ae4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	1b13      	subs	r3, r2, r4
 8006aec:	3b15      	subs	r3, #21
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	3304      	adds	r3, #4
 8006af4:	f104 0715 	add.w	r7, r4, #21
 8006af8:	42ba      	cmp	r2, r7
 8006afa:	bf38      	it	cc
 8006afc:	2304      	movcc	r3, #4
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9b02      	ldr	r3, [sp, #8]
 8006b02:	9103      	str	r1, [sp, #12]
 8006b04:	428b      	cmp	r3, r1
 8006b06:	d80c      	bhi.n	8006b22 <__multiply+0x9e>
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	dd03      	ble.n	8006b14 <__multiply+0x90>
 8006b0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d05b      	beq.n	8006bcc <__multiply+0x148>
 8006b14:	6106      	str	r6, [r0, #16]
 8006b16:	b005      	add	sp, #20
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	f843 2b04 	str.w	r2, [r3], #4
 8006b20:	e7d8      	b.n	8006ad4 <__multiply+0x50>
 8006b22:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b26:	f1ba 0f00 	cmp.w	sl, #0
 8006b2a:	d024      	beq.n	8006b76 <__multiply+0xf2>
 8006b2c:	f104 0e14 	add.w	lr, r4, #20
 8006b30:	46a9      	mov	r9, r5
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b3a:	f8d9 3000 	ldr.w	r3, [r9]
 8006b3e:	fa1f fb87 	uxth.w	fp, r7
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b4c:	f8d9 7000 	ldr.w	r7, [r9]
 8006b50:	4463      	add	r3, ip
 8006b52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b56:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b64:	4572      	cmp	r2, lr
 8006b66:	f849 3b04 	str.w	r3, [r9], #4
 8006b6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b6e:	d8e2      	bhi.n	8006b36 <__multiply+0xb2>
 8006b70:	9b01      	ldr	r3, [sp, #4]
 8006b72:	f845 c003 	str.w	ip, [r5, r3]
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b7c:	3104      	adds	r1, #4
 8006b7e:	f1b9 0f00 	cmp.w	r9, #0
 8006b82:	d021      	beq.n	8006bc8 <__multiply+0x144>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	f104 0c14 	add.w	ip, r4, #20
 8006b8a:	46ae      	mov	lr, r5
 8006b8c:	f04f 0a00 	mov.w	sl, #0
 8006b90:	f8bc b000 	ldrh.w	fp, [ip]
 8006b94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b98:	fb09 770b 	mla	r7, r9, fp, r7
 8006b9c:	4457      	add	r7, sl
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ba4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bb0:	f8be 3000 	ldrh.w	r3, [lr]
 8006bb4:	fb09 330a 	mla	r3, r9, sl, r3
 8006bb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006bbc:	4562      	cmp	r2, ip
 8006bbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bc2:	d8e5      	bhi.n	8006b90 <__multiply+0x10c>
 8006bc4:	9f01      	ldr	r7, [sp, #4]
 8006bc6:	51eb      	str	r3, [r5, r7]
 8006bc8:	3504      	adds	r5, #4
 8006bca:	e799      	b.n	8006b00 <__multiply+0x7c>
 8006bcc:	3e01      	subs	r6, #1
 8006bce:	e79b      	b.n	8006b08 <__multiply+0x84>
 8006bd0:	0801ccbc 	.word	0x0801ccbc
 8006bd4:	0801cccd 	.word	0x0801cccd

08006bd8 <__pow5mult>:
 8006bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	4615      	mov	r5, r2
 8006bde:	f012 0203 	ands.w	r2, r2, #3
 8006be2:	4607      	mov	r7, r0
 8006be4:	460e      	mov	r6, r1
 8006be6:	d007      	beq.n	8006bf8 <__pow5mult+0x20>
 8006be8:	4c25      	ldr	r4, [pc, #148]	@ (8006c80 <__pow5mult+0xa8>)
 8006bea:	3a01      	subs	r2, #1
 8006bec:	2300      	movs	r3, #0
 8006bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bf2:	f7ff fe9f 	bl	8006934 <__multadd>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	10ad      	asrs	r5, r5, #2
 8006bfa:	d03d      	beq.n	8006c78 <__pow5mult+0xa0>
 8006bfc:	69fc      	ldr	r4, [r7, #28]
 8006bfe:	b97c      	cbnz	r4, 8006c20 <__pow5mult+0x48>
 8006c00:	2010      	movs	r0, #16
 8006c02:	f7ff fd7f 	bl	8006704 <malloc>
 8006c06:	4602      	mov	r2, r0
 8006c08:	61f8      	str	r0, [r7, #28]
 8006c0a:	b928      	cbnz	r0, 8006c18 <__pow5mult+0x40>
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c84 <__pow5mult+0xac>)
 8006c0e:	481e      	ldr	r0, [pc, #120]	@ (8006c88 <__pow5mult+0xb0>)
 8006c10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c14:	f000 fc3e 	bl	8007494 <__assert_func>
 8006c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c1c:	6004      	str	r4, [r0, #0]
 8006c1e:	60c4      	str	r4, [r0, #12]
 8006c20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c28:	b94c      	cbnz	r4, 8006c3e <__pow5mult+0x66>
 8006c2a:	f240 2171 	movw	r1, #625	@ 0x271
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ff12 	bl	8006a58 <__i2b>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	07eb      	lsls	r3, r5, #31
 8006c44:	d50a      	bpl.n	8006c5c <__pow5mult+0x84>
 8006c46:	4631      	mov	r1, r6
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7ff ff1a 	bl	8006a84 <__multiply>
 8006c50:	4631      	mov	r1, r6
 8006c52:	4680      	mov	r8, r0
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff fe4b 	bl	80068f0 <_Bfree>
 8006c5a:	4646      	mov	r6, r8
 8006c5c:	106d      	asrs	r5, r5, #1
 8006c5e:	d00b      	beq.n	8006c78 <__pow5mult+0xa0>
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	b938      	cbnz	r0, 8006c74 <__pow5mult+0x9c>
 8006c64:	4622      	mov	r2, r4
 8006c66:	4621      	mov	r1, r4
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ff0b 	bl	8006a84 <__multiply>
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	f8c0 9000 	str.w	r9, [r0]
 8006c74:	4604      	mov	r4, r0
 8006c76:	e7e4      	b.n	8006c42 <__pow5mult+0x6a>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	bf00      	nop
 8006c80:	0801cd28 	.word	0x0801cd28
 8006c84:	0801cc4d 	.word	0x0801cc4d
 8006c88:	0801cccd 	.word	0x0801cccd

08006c8c <__lshift>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	460c      	mov	r4, r1
 8006c92:	6849      	ldr	r1, [r1, #4]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ca4:	f108 0601 	add.w	r6, r8, #1
 8006ca8:	42b3      	cmp	r3, r6
 8006caa:	db0b      	blt.n	8006cc4 <__lshift+0x38>
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff fddf 	bl	8006870 <_Balloc>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	b948      	cbnz	r0, 8006cca <__lshift+0x3e>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4b28      	ldr	r3, [pc, #160]	@ (8006d5c <__lshift+0xd0>)
 8006cba:	4829      	ldr	r0, [pc, #164]	@ (8006d60 <__lshift+0xd4>)
 8006cbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cc0:	f000 fbe8 	bl	8007494 <__assert_func>
 8006cc4:	3101      	adds	r1, #1
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__lshift+0x1c>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f100 0114 	add.w	r1, r0, #20
 8006cd0:	f100 0210 	add.w	r2, r0, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	4553      	cmp	r3, sl
 8006cd8:	db33      	blt.n	8006d42 <__lshift+0xb6>
 8006cda:	6920      	ldr	r0, [r4, #16]
 8006cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce0:	f104 0314 	add.w	r3, r4, #20
 8006ce4:	f019 091f 	ands.w	r9, r9, #31
 8006ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cf0:	d02b      	beq.n	8006d4a <__lshift+0xbe>
 8006cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8006cf6:	468a      	mov	sl, r1
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8006d00:	4310      	orrs	r0, r2
 8006d02:	f84a 0b04 	str.w	r0, [sl], #4
 8006d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0a:	459c      	cmp	ip, r3
 8006d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d10:	d8f3      	bhi.n	8006cfa <__lshift+0x6e>
 8006d12:	ebac 0304 	sub.w	r3, ip, r4
 8006d16:	3b15      	subs	r3, #21
 8006d18:	f023 0303 	bic.w	r3, r3, #3
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	f104 0015 	add.w	r0, r4, #21
 8006d22:	4584      	cmp	ip, r0
 8006d24:	bf38      	it	cc
 8006d26:	2304      	movcc	r3, #4
 8006d28:	50ca      	str	r2, [r1, r3]
 8006d2a:	b10a      	cbz	r2, 8006d30 <__lshift+0xa4>
 8006d2c:	f108 0602 	add.w	r6, r8, #2
 8006d30:	3e01      	subs	r6, #1
 8006d32:	4638      	mov	r0, r7
 8006d34:	612e      	str	r6, [r5, #16]
 8006d36:	4621      	mov	r1, r4
 8006d38:	f7ff fdda 	bl	80068f0 <_Bfree>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d46:	3301      	adds	r3, #1
 8006d48:	e7c5      	b.n	8006cd6 <__lshift+0x4a>
 8006d4a:	3904      	subs	r1, #4
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d54:	459c      	cmp	ip, r3
 8006d56:	d8f9      	bhi.n	8006d4c <__lshift+0xc0>
 8006d58:	e7ea      	b.n	8006d30 <__lshift+0xa4>
 8006d5a:	bf00      	nop
 8006d5c:	0801ccbc 	.word	0x0801ccbc
 8006d60:	0801cccd 	.word	0x0801cccd

08006d64 <__mcmp>:
 8006d64:	690a      	ldr	r2, [r1, #16]
 8006d66:	4603      	mov	r3, r0
 8006d68:	6900      	ldr	r0, [r0, #16]
 8006d6a:	1a80      	subs	r0, r0, r2
 8006d6c:	b530      	push	{r4, r5, lr}
 8006d6e:	d10e      	bne.n	8006d8e <__mcmp+0x2a>
 8006d70:	3314      	adds	r3, #20
 8006d72:	3114      	adds	r1, #20
 8006d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d84:	4295      	cmp	r5, r2
 8006d86:	d003      	beq.n	8006d90 <__mcmp+0x2c>
 8006d88:	d205      	bcs.n	8006d96 <__mcmp+0x32>
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	bd30      	pop	{r4, r5, pc}
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d3f3      	bcc.n	8006d7c <__mcmp+0x18>
 8006d94:	e7fb      	b.n	8006d8e <__mcmp+0x2a>
 8006d96:	2001      	movs	r0, #1
 8006d98:	e7f9      	b.n	8006d8e <__mcmp+0x2a>
	...

08006d9c <__mdiff>:
 8006d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	4689      	mov	r9, r1
 8006da2:	4606      	mov	r6, r0
 8006da4:	4611      	mov	r1, r2
 8006da6:	4648      	mov	r0, r9
 8006da8:	4614      	mov	r4, r2
 8006daa:	f7ff ffdb 	bl	8006d64 <__mcmp>
 8006dae:	1e05      	subs	r5, r0, #0
 8006db0:	d112      	bne.n	8006dd8 <__mdiff+0x3c>
 8006db2:	4629      	mov	r1, r5
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff fd5b 	bl	8006870 <_Balloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <__mdiff+0x2e>
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ebc <__mdiff+0x120>)
 8006dc0:	f240 2137 	movw	r1, #567	@ 0x237
 8006dc4:	483e      	ldr	r0, [pc, #248]	@ (8006ec0 <__mdiff+0x124>)
 8006dc6:	f000 fb65 	bl	8007494 <__assert_func>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	b003      	add	sp, #12
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	bfbc      	itt	lt
 8006dda:	464b      	movlt	r3, r9
 8006ddc:	46a1      	movlt	r9, r4
 8006dde:	4630      	mov	r0, r6
 8006de0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006de4:	bfba      	itte	lt
 8006de6:	461c      	movlt	r4, r3
 8006de8:	2501      	movlt	r5, #1
 8006dea:	2500      	movge	r5, #0
 8006dec:	f7ff fd40 	bl	8006870 <_Balloc>
 8006df0:	4602      	mov	r2, r0
 8006df2:	b918      	cbnz	r0, 8006dfc <__mdiff+0x60>
 8006df4:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <__mdiff+0x120>)
 8006df6:	f240 2145 	movw	r1, #581	@ 0x245
 8006dfa:	e7e3      	b.n	8006dc4 <__mdiff+0x28>
 8006dfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e00:	6926      	ldr	r6, [r4, #16]
 8006e02:	60c5      	str	r5, [r0, #12]
 8006e04:	f109 0310 	add.w	r3, r9, #16
 8006e08:	f109 0514 	add.w	r5, r9, #20
 8006e0c:	f104 0e14 	add.w	lr, r4, #20
 8006e10:	f100 0b14 	add.w	fp, r0, #20
 8006e14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	46d9      	mov	r9, fp
 8006e20:	f04f 0c00 	mov.w	ip, #0
 8006e24:	9b01      	ldr	r3, [sp, #4]
 8006e26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	fa1f f38a 	uxth.w	r3, sl
 8006e34:	4619      	mov	r1, r3
 8006e36:	b283      	uxth	r3, r0
 8006e38:	1acb      	subs	r3, r1, r3
 8006e3a:	0c00      	lsrs	r0, r0, #16
 8006e3c:	4463      	add	r3, ip
 8006e3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e4c:	4576      	cmp	r6, lr
 8006e4e:	f849 3b04 	str.w	r3, [r9], #4
 8006e52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e56:	d8e5      	bhi.n	8006e24 <__mdiff+0x88>
 8006e58:	1b33      	subs	r3, r6, r4
 8006e5a:	3b15      	subs	r3, #21
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	3415      	adds	r4, #21
 8006e62:	3304      	adds	r3, #4
 8006e64:	42a6      	cmp	r6, r4
 8006e66:	bf38      	it	cc
 8006e68:	2304      	movcc	r3, #4
 8006e6a:	441d      	add	r5, r3
 8006e6c:	445b      	add	r3, fp
 8006e6e:	461e      	mov	r6, r3
 8006e70:	462c      	mov	r4, r5
 8006e72:	4544      	cmp	r4, r8
 8006e74:	d30e      	bcc.n	8006e94 <__mdiff+0xf8>
 8006e76:	f108 0103 	add.w	r1, r8, #3
 8006e7a:	1b49      	subs	r1, r1, r5
 8006e7c:	f021 0103 	bic.w	r1, r1, #3
 8006e80:	3d03      	subs	r5, #3
 8006e82:	45a8      	cmp	r8, r5
 8006e84:	bf38      	it	cc
 8006e86:	2100      	movcc	r1, #0
 8006e88:	440b      	add	r3, r1
 8006e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e8e:	b191      	cbz	r1, 8006eb6 <__mdiff+0x11a>
 8006e90:	6117      	str	r7, [r2, #16]
 8006e92:	e79d      	b.n	8006dd0 <__mdiff+0x34>
 8006e94:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e98:	46e6      	mov	lr, ip
 8006e9a:	0c08      	lsrs	r0, r1, #16
 8006e9c:	fa1c fc81 	uxtah	ip, ip, r1
 8006ea0:	4471      	add	r1, lr
 8006ea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ea6:	b289      	uxth	r1, r1
 8006ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006eac:	f846 1b04 	str.w	r1, [r6], #4
 8006eb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006eb4:	e7dd      	b.n	8006e72 <__mdiff+0xd6>
 8006eb6:	3f01      	subs	r7, #1
 8006eb8:	e7e7      	b.n	8006e8a <__mdiff+0xee>
 8006eba:	bf00      	nop
 8006ebc:	0801ccbc 	.word	0x0801ccbc
 8006ec0:	0801cccd 	.word	0x0801cccd

08006ec4 <__d2b>:
 8006ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	460f      	mov	r7, r1
 8006eca:	2101      	movs	r1, #1
 8006ecc:	ec59 8b10 	vmov	r8, r9, d0
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	f7ff fccd 	bl	8006870 <_Balloc>
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	b930      	cbnz	r0, 8006ee8 <__d2b+0x24>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4b23      	ldr	r3, [pc, #140]	@ (8006f6c <__d2b+0xa8>)
 8006ede:	4824      	ldr	r0, [pc, #144]	@ (8006f70 <__d2b+0xac>)
 8006ee0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ee4:	f000 fad6 	bl	8007494 <__assert_func>
 8006ee8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ef0:	b10d      	cbz	r5, 8006ef6 <__d2b+0x32>
 8006ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8006efc:	d023      	beq.n	8006f46 <__d2b+0x82>
 8006efe:	4668      	mov	r0, sp
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	f7ff fd7c 	bl	80069fe <__lo0bits>
 8006f06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f0a:	b1d0      	cbz	r0, 8006f42 <__d2b+0x7e>
 8006f0c:	f1c0 0320 	rsb	r3, r0, #32
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	430b      	orrs	r3, r1
 8006f16:	40c2      	lsrs	r2, r0
 8006f18:	6163      	str	r3, [r4, #20]
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	61a3      	str	r3, [r4, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf0c      	ite	eq
 8006f24:	2201      	moveq	r2, #1
 8006f26:	2202      	movne	r2, #2
 8006f28:	6122      	str	r2, [r4, #16]
 8006f2a:	b1a5      	cbz	r5, 8006f56 <__d2b+0x92>
 8006f2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f30:	4405      	add	r5, r0
 8006f32:	603d      	str	r5, [r7, #0]
 8006f34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f38:	6030      	str	r0, [r6, #0]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f42:	6161      	str	r1, [r4, #20]
 8006f44:	e7ea      	b.n	8006f1c <__d2b+0x58>
 8006f46:	a801      	add	r0, sp, #4
 8006f48:	f7ff fd59 	bl	80069fe <__lo0bits>
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	3020      	adds	r0, #32
 8006f52:	2201      	movs	r2, #1
 8006f54:	e7e8      	b.n	8006f28 <__d2b+0x64>
 8006f56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f5e:	6038      	str	r0, [r7, #0]
 8006f60:	6918      	ldr	r0, [r3, #16]
 8006f62:	f7ff fd2d 	bl	80069c0 <__hi0bits>
 8006f66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f6a:	e7e5      	b.n	8006f38 <__d2b+0x74>
 8006f6c:	0801ccbc 	.word	0x0801ccbc
 8006f70:	0801cccd 	.word	0x0801cccd

08006f74 <__sfputc_r>:
 8006f74:	6893      	ldr	r3, [r2, #8]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	b410      	push	{r4}
 8006f7c:	6093      	str	r3, [r2, #8]
 8006f7e:	da08      	bge.n	8006f92 <__sfputc_r+0x1e>
 8006f80:	6994      	ldr	r4, [r2, #24]
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	db01      	blt.n	8006f8a <__sfputc_r+0x16>
 8006f86:	290a      	cmp	r1, #10
 8006f88:	d103      	bne.n	8006f92 <__sfputc_r+0x1e>
 8006f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f8e:	f7fe bc0c 	b.w	80057aa <__swbuf_r>
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	1c58      	adds	r0, r3, #1
 8006f96:	6010      	str	r0, [r2, #0]
 8006f98:	7019      	strb	r1, [r3, #0]
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <__sfputs_r>:
 8006fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	460f      	mov	r7, r1
 8006fa8:	4614      	mov	r4, r2
 8006faa:	18d5      	adds	r5, r2, r3
 8006fac:	42ac      	cmp	r4, r5
 8006fae:	d101      	bne.n	8006fb4 <__sfputs_r+0x12>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e007      	b.n	8006fc4 <__sfputs_r+0x22>
 8006fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb8:	463a      	mov	r2, r7
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffda 	bl	8006f74 <__sfputc_r>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d1f3      	bne.n	8006fac <__sfputs_r+0xa>
 8006fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fc8 <_vfiprintf_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	460d      	mov	r5, r1
 8006fce:	b09d      	sub	sp, #116	@ 0x74
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	4698      	mov	r8, r3
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	b118      	cbz	r0, 8006fe0 <_vfiprintf_r+0x18>
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <_vfiprintf_r+0x18>
 8006fdc:	f7fe fafc 	bl	80055d8 <__sinit>
 8006fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d405      	bmi.n	8006ff2 <_vfiprintf_r+0x2a>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_vfiprintf_r+0x2a>
 8006fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fee:	f7fe fcee 	bl	80059ce <__retarget_lock_acquire_recursive>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	071b      	lsls	r3, r3, #28
 8006ff6:	d501      	bpl.n	8006ffc <_vfiprintf_r+0x34>
 8006ff8:	692b      	ldr	r3, [r5, #16]
 8006ffa:	b99b      	cbnz	r3, 8007024 <_vfiprintf_r+0x5c>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7fe fc12 	bl	8005828 <__swsetup_r>
 8007004:	b170      	cbz	r0, 8007024 <_vfiprintf_r+0x5c>
 8007006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007008:	07dc      	lsls	r4, r3, #31
 800700a:	d504      	bpl.n	8007016 <_vfiprintf_r+0x4e>
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	b01d      	add	sp, #116	@ 0x74
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	0598      	lsls	r0, r3, #22
 800701a:	d4f7      	bmi.n	800700c <_vfiprintf_r+0x44>
 800701c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800701e:	f7fe fcd7 	bl	80059d0 <__retarget_lock_release_recursive>
 8007022:	e7f3      	b.n	800700c <_vfiprintf_r+0x44>
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	@ 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800702e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007032:	2330      	movs	r3, #48	@ 0x30
 8007034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071e4 <_vfiprintf_r+0x21c>
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800703c:	f04f 0901 	mov.w	r9, #1
 8007040:	4623      	mov	r3, r4
 8007042:	469a      	mov	sl, r3
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	b10a      	cbz	r2, 800704e <_vfiprintf_r+0x86>
 800704a:	2a25      	cmp	r2, #37	@ 0x25
 800704c:	d1f9      	bne.n	8007042 <_vfiprintf_r+0x7a>
 800704e:	ebba 0b04 	subs.w	fp, sl, r4
 8007052:	d00b      	beq.n	800706c <_vfiprintf_r+0xa4>
 8007054:	465b      	mov	r3, fp
 8007056:	4622      	mov	r2, r4
 8007058:	4629      	mov	r1, r5
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ffa1 	bl	8006fa2 <__sfputs_r>
 8007060:	3001      	adds	r0, #1
 8007062:	f000 80a7 	beq.w	80071b4 <_vfiprintf_r+0x1ec>
 8007066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007068:	445a      	add	r2, fp
 800706a:	9209      	str	r2, [sp, #36]	@ 0x24
 800706c:	f89a 3000 	ldrb.w	r3, [sl]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 809f 	beq.w	80071b4 <_vfiprintf_r+0x1ec>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800708c:	931a      	str	r3, [sp, #104]	@ 0x68
 800708e:	4654      	mov	r4, sl
 8007090:	2205      	movs	r2, #5
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4853      	ldr	r0, [pc, #332]	@ (80071e4 <_vfiprintf_r+0x21c>)
 8007098:	f7f9 f902 	bl	80002a0 <memchr>
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	b9d8      	cbnz	r0, 80070d8 <_vfiprintf_r+0x110>
 80070a0:	06d1      	lsls	r1, r2, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2320      	movmi	r3, #32
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070aa:	0713      	lsls	r3, r2, #28
 80070ac:	bf44      	itt	mi
 80070ae:	232b      	movmi	r3, #43	@ 0x2b
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ba:	d015      	beq.n	80070e8 <_vfiprintf_r+0x120>
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	4654      	mov	r4, sl
 80070c0:	2000      	movs	r0, #0
 80070c2:	f04f 0c0a 	mov.w	ip, #10
 80070c6:	4621      	mov	r1, r4
 80070c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070cc:	3b30      	subs	r3, #48	@ 0x30
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d94b      	bls.n	800716a <_vfiprintf_r+0x1a2>
 80070d2:	b1b0      	cbz	r0, 8007102 <_vfiprintf_r+0x13a>
 80070d4:	9207      	str	r2, [sp, #28]
 80070d6:	e014      	b.n	8007102 <_vfiprintf_r+0x13a>
 80070d8:	eba0 0308 	sub.w	r3, r0, r8
 80070dc:	fa09 f303 	lsl.w	r3, r9, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	46a2      	mov	sl, r4
 80070e6:	e7d2      	b.n	800708e <_vfiprintf_r+0xc6>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfbb      	ittet	lt
 80070f4:	425b      	neglt	r3, r3
 80070f6:	f042 0202 	orrlt.w	r2, r2, #2
 80070fa:	9307      	strge	r3, [sp, #28]
 80070fc:	9307      	strlt	r3, [sp, #28]
 80070fe:	bfb8      	it	lt
 8007100:	9204      	strlt	r2, [sp, #16]
 8007102:	7823      	ldrb	r3, [r4, #0]
 8007104:	2b2e      	cmp	r3, #46	@ 0x2e
 8007106:	d10a      	bne.n	800711e <_vfiprintf_r+0x156>
 8007108:	7863      	ldrb	r3, [r4, #1]
 800710a:	2b2a      	cmp	r3, #42	@ 0x2a
 800710c:	d132      	bne.n	8007174 <_vfiprintf_r+0x1ac>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800711a:	3402      	adds	r4, #2
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071f4 <_vfiprintf_r+0x22c>
 8007122:	7821      	ldrb	r1, [r4, #0]
 8007124:	2203      	movs	r2, #3
 8007126:	4650      	mov	r0, sl
 8007128:	f7f9 f8ba 	bl	80002a0 <memchr>
 800712c:	b138      	cbz	r0, 800713e <_vfiprintf_r+0x176>
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	eba0 000a 	sub.w	r0, r0, sl
 8007134:	2240      	movs	r2, #64	@ 0x40
 8007136:	4082      	lsls	r2, r0
 8007138:	4313      	orrs	r3, r2
 800713a:	3401      	adds	r4, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007142:	4829      	ldr	r0, [pc, #164]	@ (80071e8 <_vfiprintf_r+0x220>)
 8007144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007148:	2206      	movs	r2, #6
 800714a:	f7f9 f8a9 	bl	80002a0 <memchr>
 800714e:	2800      	cmp	r0, #0
 8007150:	d03f      	beq.n	80071d2 <_vfiprintf_r+0x20a>
 8007152:	4b26      	ldr	r3, [pc, #152]	@ (80071ec <_vfiprintf_r+0x224>)
 8007154:	bb1b      	cbnz	r3, 800719e <_vfiprintf_r+0x1d6>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	3307      	adds	r3, #7
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	3308      	adds	r3, #8
 8007160:	9303      	str	r3, [sp, #12]
 8007162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007164:	443b      	add	r3, r7
 8007166:	9309      	str	r3, [sp, #36]	@ 0x24
 8007168:	e76a      	b.n	8007040 <_vfiprintf_r+0x78>
 800716a:	fb0c 3202 	mla	r2, ip, r2, r3
 800716e:	460c      	mov	r4, r1
 8007170:	2001      	movs	r0, #1
 8007172:	e7a8      	b.n	80070c6 <_vfiprintf_r+0xfe>
 8007174:	2300      	movs	r3, #0
 8007176:	3401      	adds	r4, #1
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0c0a 	mov.w	ip, #10
 8007180:	4620      	mov	r0, r4
 8007182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007186:	3a30      	subs	r2, #48	@ 0x30
 8007188:	2a09      	cmp	r2, #9
 800718a:	d903      	bls.n	8007194 <_vfiprintf_r+0x1cc>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0c6      	beq.n	800711e <_vfiprintf_r+0x156>
 8007190:	9105      	str	r1, [sp, #20]
 8007192:	e7c4      	b.n	800711e <_vfiprintf_r+0x156>
 8007194:	fb0c 2101 	mla	r1, ip, r1, r2
 8007198:	4604      	mov	r4, r0
 800719a:	2301      	movs	r3, #1
 800719c:	e7f0      	b.n	8007180 <_vfiprintf_r+0x1b8>
 800719e:	ab03      	add	r3, sp, #12
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	462a      	mov	r2, r5
 80071a4:	4b12      	ldr	r3, [pc, #72]	@ (80071f0 <_vfiprintf_r+0x228>)
 80071a6:	a904      	add	r1, sp, #16
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7fd fdd1 	bl	8004d50 <_printf_float>
 80071ae:	4607      	mov	r7, r0
 80071b0:	1c78      	adds	r0, r7, #1
 80071b2:	d1d6      	bne.n	8007162 <_vfiprintf_r+0x19a>
 80071b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d405      	bmi.n	80071c6 <_vfiprintf_r+0x1fe>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	059a      	lsls	r2, r3, #22
 80071be:	d402      	bmi.n	80071c6 <_vfiprintf_r+0x1fe>
 80071c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071c2:	f7fe fc05 	bl	80059d0 <__retarget_lock_release_recursive>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	065b      	lsls	r3, r3, #25
 80071ca:	f53f af1f 	bmi.w	800700c <_vfiprintf_r+0x44>
 80071ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071d0:	e71e      	b.n	8007010 <_vfiprintf_r+0x48>
 80071d2:	ab03      	add	r3, sp, #12
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	462a      	mov	r2, r5
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <_vfiprintf_r+0x228>)
 80071da:	a904      	add	r1, sp, #16
 80071dc:	4630      	mov	r0, r6
 80071de:	f7fe f84f 	bl	8005280 <_printf_i>
 80071e2:	e7e4      	b.n	80071ae <_vfiprintf_r+0x1e6>
 80071e4:	0801ce28 	.word	0x0801ce28
 80071e8:	0801ce32 	.word	0x0801ce32
 80071ec:	08004d51 	.word	0x08004d51
 80071f0:	08006fa3 	.word	0x08006fa3
 80071f4:	0801ce2e 	.word	0x0801ce2e

080071f8 <__sflush_r>:
 80071f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007200:	0716      	lsls	r6, r2, #28
 8007202:	4605      	mov	r5, r0
 8007204:	460c      	mov	r4, r1
 8007206:	d454      	bmi.n	80072b2 <__sflush_r+0xba>
 8007208:	684b      	ldr	r3, [r1, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dc02      	bgt.n	8007214 <__sflush_r+0x1c>
 800720e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	dd48      	ble.n	80072a6 <__sflush_r+0xae>
 8007214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007216:	2e00      	cmp	r6, #0
 8007218:	d045      	beq.n	80072a6 <__sflush_r+0xae>
 800721a:	2300      	movs	r3, #0
 800721c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007220:	682f      	ldr	r7, [r5, #0]
 8007222:	6a21      	ldr	r1, [r4, #32]
 8007224:	602b      	str	r3, [r5, #0]
 8007226:	d030      	beq.n	800728a <__sflush_r+0x92>
 8007228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	0759      	lsls	r1, r3, #29
 800722e:	d505      	bpl.n	800723c <__sflush_r+0x44>
 8007230:	6863      	ldr	r3, [r4, #4]
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007236:	b10b      	cbz	r3, 800723c <__sflush_r+0x44>
 8007238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	2300      	movs	r3, #0
 800723e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007240:	6a21      	ldr	r1, [r4, #32]
 8007242:	4628      	mov	r0, r5
 8007244:	47b0      	blx	r6
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	d106      	bne.n	800725a <__sflush_r+0x62>
 800724c:	6829      	ldr	r1, [r5, #0]
 800724e:	291d      	cmp	r1, #29
 8007250:	d82b      	bhi.n	80072aa <__sflush_r+0xb2>
 8007252:	4a2a      	ldr	r2, [pc, #168]	@ (80072fc <__sflush_r+0x104>)
 8007254:	410a      	asrs	r2, r1
 8007256:	07d6      	lsls	r6, r2, #31
 8007258:	d427      	bmi.n	80072aa <__sflush_r+0xb2>
 800725a:	2200      	movs	r2, #0
 800725c:	6062      	str	r2, [r4, #4]
 800725e:	04d9      	lsls	r1, r3, #19
 8007260:	6922      	ldr	r2, [r4, #16]
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	d504      	bpl.n	8007270 <__sflush_r+0x78>
 8007266:	1c42      	adds	r2, r0, #1
 8007268:	d101      	bne.n	800726e <__sflush_r+0x76>
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	b903      	cbnz	r3, 8007270 <__sflush_r+0x78>
 800726e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007272:	602f      	str	r7, [r5, #0]
 8007274:	b1b9      	cbz	r1, 80072a6 <__sflush_r+0xae>
 8007276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800727a:	4299      	cmp	r1, r3
 800727c:	d002      	beq.n	8007284 <__sflush_r+0x8c>
 800727e:	4628      	mov	r0, r5
 8007280:	f7ff f9f6 	bl	8006670 <_free_r>
 8007284:	2300      	movs	r3, #0
 8007286:	6363      	str	r3, [r4, #52]	@ 0x34
 8007288:	e00d      	b.n	80072a6 <__sflush_r+0xae>
 800728a:	2301      	movs	r3, #1
 800728c:	4628      	mov	r0, r5
 800728e:	47b0      	blx	r6
 8007290:	4602      	mov	r2, r0
 8007292:	1c50      	adds	r0, r2, #1
 8007294:	d1c9      	bne.n	800722a <__sflush_r+0x32>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0c6      	beq.n	800722a <__sflush_r+0x32>
 800729c:	2b1d      	cmp	r3, #29
 800729e:	d001      	beq.n	80072a4 <__sflush_r+0xac>
 80072a0:	2b16      	cmp	r3, #22
 80072a2:	d11e      	bne.n	80072e2 <__sflush_r+0xea>
 80072a4:	602f      	str	r7, [r5, #0]
 80072a6:	2000      	movs	r0, #0
 80072a8:	e022      	b.n	80072f0 <__sflush_r+0xf8>
 80072aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	e01b      	b.n	80072ea <__sflush_r+0xf2>
 80072b2:	690f      	ldr	r7, [r1, #16]
 80072b4:	2f00      	cmp	r7, #0
 80072b6:	d0f6      	beq.n	80072a6 <__sflush_r+0xae>
 80072b8:	0793      	lsls	r3, r2, #30
 80072ba:	680e      	ldr	r6, [r1, #0]
 80072bc:	bf08      	it	eq
 80072be:	694b      	ldreq	r3, [r1, #20]
 80072c0:	600f      	str	r7, [r1, #0]
 80072c2:	bf18      	it	ne
 80072c4:	2300      	movne	r3, #0
 80072c6:	eba6 0807 	sub.w	r8, r6, r7
 80072ca:	608b      	str	r3, [r1, #8]
 80072cc:	f1b8 0f00 	cmp.w	r8, #0
 80072d0:	dde9      	ble.n	80072a6 <__sflush_r+0xae>
 80072d2:	6a21      	ldr	r1, [r4, #32]
 80072d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072d6:	4643      	mov	r3, r8
 80072d8:	463a      	mov	r2, r7
 80072da:	4628      	mov	r0, r5
 80072dc:	47b0      	blx	r6
 80072de:	2800      	cmp	r0, #0
 80072e0:	dc08      	bgt.n	80072f4 <__sflush_r+0xfc>
 80072e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f4:	4407      	add	r7, r0
 80072f6:	eba8 0800 	sub.w	r8, r8, r0
 80072fa:	e7e7      	b.n	80072cc <__sflush_r+0xd4>
 80072fc:	dfbffffe 	.word	0xdfbffffe

08007300 <_fflush_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	690b      	ldr	r3, [r1, #16]
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b913      	cbnz	r3, 8007310 <_fflush_r+0x10>
 800730a:	2500      	movs	r5, #0
 800730c:	4628      	mov	r0, r5
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	b118      	cbz	r0, 800731a <_fflush_r+0x1a>
 8007312:	6a03      	ldr	r3, [r0, #32]
 8007314:	b90b      	cbnz	r3, 800731a <_fflush_r+0x1a>
 8007316:	f7fe f95f 	bl	80055d8 <__sinit>
 800731a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f3      	beq.n	800730a <_fflush_r+0xa>
 8007322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007324:	07d0      	lsls	r0, r2, #31
 8007326:	d404      	bmi.n	8007332 <_fflush_r+0x32>
 8007328:	0599      	lsls	r1, r3, #22
 800732a:	d402      	bmi.n	8007332 <_fflush_r+0x32>
 800732c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800732e:	f7fe fb4e 	bl	80059ce <__retarget_lock_acquire_recursive>
 8007332:	4628      	mov	r0, r5
 8007334:	4621      	mov	r1, r4
 8007336:	f7ff ff5f 	bl	80071f8 <__sflush_r>
 800733a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800733c:	07da      	lsls	r2, r3, #31
 800733e:	4605      	mov	r5, r0
 8007340:	d4e4      	bmi.n	800730c <_fflush_r+0xc>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	059b      	lsls	r3, r3, #22
 8007346:	d4e1      	bmi.n	800730c <_fflush_r+0xc>
 8007348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800734a:	f7fe fb41 	bl	80059d0 <__retarget_lock_release_recursive>
 800734e:	e7dd      	b.n	800730c <_fflush_r+0xc>

08007350 <__swhatbuf_r>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	460c      	mov	r4, r1
 8007354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007358:	2900      	cmp	r1, #0
 800735a:	b096      	sub	sp, #88	@ 0x58
 800735c:	4615      	mov	r5, r2
 800735e:	461e      	mov	r6, r3
 8007360:	da0d      	bge.n	800737e <__swhatbuf_r+0x2e>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007368:	f04f 0100 	mov.w	r1, #0
 800736c:	bf14      	ite	ne
 800736e:	2340      	movne	r3, #64	@ 0x40
 8007370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007374:	2000      	movs	r0, #0
 8007376:	6031      	str	r1, [r6, #0]
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	b016      	add	sp, #88	@ 0x58
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	466a      	mov	r2, sp
 8007380:	f000 f848 	bl	8007414 <_fstat_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	dbec      	blt.n	8007362 <__swhatbuf_r+0x12>
 8007388:	9901      	ldr	r1, [sp, #4]
 800738a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800738e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007392:	4259      	negs	r1, r3
 8007394:	4159      	adcs	r1, r3
 8007396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800739a:	e7eb      	b.n	8007374 <__swhatbuf_r+0x24>

0800739c <__smakebuf_r>:
 800739c:	898b      	ldrh	r3, [r1, #12]
 800739e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a0:	079d      	lsls	r5, r3, #30
 80073a2:	4606      	mov	r6, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	d507      	bpl.n	80073b8 <__smakebuf_r+0x1c>
 80073a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2301      	movs	r3, #1
 80073b2:	6163      	str	r3, [r4, #20]
 80073b4:	b003      	add	sp, #12
 80073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b8:	ab01      	add	r3, sp, #4
 80073ba:	466a      	mov	r2, sp
 80073bc:	f7ff ffc8 	bl	8007350 <__swhatbuf_r>
 80073c0:	9f00      	ldr	r7, [sp, #0]
 80073c2:	4605      	mov	r5, r0
 80073c4:	4639      	mov	r1, r7
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7ff f9c6 	bl	8006758 <_malloc_r>
 80073cc:	b948      	cbnz	r0, 80073e2 <__smakebuf_r+0x46>
 80073ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d2:	059a      	lsls	r2, r3, #22
 80073d4:	d4ee      	bmi.n	80073b4 <__smakebuf_r+0x18>
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	f043 0302 	orr.w	r3, r3, #2
 80073de:	81a3      	strh	r3, [r4, #12]
 80073e0:	e7e2      	b.n	80073a8 <__smakebuf_r+0xc>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	6020      	str	r0, [r4, #0]
 80073e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	9b01      	ldr	r3, [sp, #4]
 80073ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073f2:	b15b      	cbz	r3, 800740c <__smakebuf_r+0x70>
 80073f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f81d 	bl	8007438 <_isatty_r>
 80073fe:	b128      	cbz	r0, 800740c <__smakebuf_r+0x70>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	431d      	orrs	r5, r3
 8007410:	81a5      	strh	r5, [r4, #12]
 8007412:	e7cf      	b.n	80073b4 <__smakebuf_r+0x18>

08007414 <_fstat_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_fstat_r+0x20>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fb f84c 	bl	80024be <_fstat>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_fstat_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_fstat_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	200005d8 	.word	0x200005d8

08007438 <_isatty_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d06      	ldr	r5, [pc, #24]	@ (8007454 <_isatty_r+0x1c>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fb f84b 	bl	80024de <_isatty>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_isatty_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_isatty_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	200005d8 	.word	0x200005d8

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	@ (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fb f854 	bl	8002510 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	200005d8 	.word	0x200005d8

08007478 <memcpy>:
 8007478:	440a      	add	r2, r1
 800747a:	4291      	cmp	r1, r2
 800747c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007480:	d100      	bne.n	8007484 <memcpy+0xc>
 8007482:	4770      	bx	lr
 8007484:	b510      	push	{r4, lr}
 8007486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800748e:	4291      	cmp	r1, r2
 8007490:	d1f9      	bne.n	8007486 <memcpy+0xe>
 8007492:	bd10      	pop	{r4, pc}

08007494 <__assert_func>:
 8007494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007496:	4614      	mov	r4, r2
 8007498:	461a      	mov	r2, r3
 800749a:	4b09      	ldr	r3, [pc, #36]	@ (80074c0 <__assert_func+0x2c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4605      	mov	r5, r0
 80074a0:	68d8      	ldr	r0, [r3, #12]
 80074a2:	b954      	cbnz	r4, 80074ba <__assert_func+0x26>
 80074a4:	4b07      	ldr	r3, [pc, #28]	@ (80074c4 <__assert_func+0x30>)
 80074a6:	461c      	mov	r4, r3
 80074a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074ac:	9100      	str	r1, [sp, #0]
 80074ae:	462b      	mov	r3, r5
 80074b0:	4905      	ldr	r1, [pc, #20]	@ (80074c8 <__assert_func+0x34>)
 80074b2:	f000 f841 	bl	8007538 <fiprintf>
 80074b6:	f000 f851 	bl	800755c <abort>
 80074ba:	4b04      	ldr	r3, [pc, #16]	@ (80074cc <__assert_func+0x38>)
 80074bc:	e7f4      	b.n	80074a8 <__assert_func+0x14>
 80074be:	bf00      	nop
 80074c0:	20000018 	.word	0x20000018
 80074c4:	0801ce7e 	.word	0x0801ce7e
 80074c8:	0801ce50 	.word	0x0801ce50
 80074cc:	0801ce43 	.word	0x0801ce43

080074d0 <_calloc_r>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	fba1 5402 	umull	r5, r4, r1, r2
 80074d6:	b93c      	cbnz	r4, 80074e8 <_calloc_r+0x18>
 80074d8:	4629      	mov	r1, r5
 80074da:	f7ff f93d 	bl	8006758 <_malloc_r>
 80074de:	4606      	mov	r6, r0
 80074e0:	b928      	cbnz	r0, 80074ee <_calloc_r+0x1e>
 80074e2:	2600      	movs	r6, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	220c      	movs	r2, #12
 80074ea:	6002      	str	r2, [r0, #0]
 80074ec:	e7f9      	b.n	80074e2 <_calloc_r+0x12>
 80074ee:	462a      	mov	r2, r5
 80074f0:	4621      	mov	r1, r4
 80074f2:	f7fe f9ef 	bl	80058d4 <memset>
 80074f6:	e7f5      	b.n	80074e4 <_calloc_r+0x14>

080074f8 <__ascii_mbtowc>:
 80074f8:	b082      	sub	sp, #8
 80074fa:	b901      	cbnz	r1, 80074fe <__ascii_mbtowc+0x6>
 80074fc:	a901      	add	r1, sp, #4
 80074fe:	b142      	cbz	r2, 8007512 <__ascii_mbtowc+0x1a>
 8007500:	b14b      	cbz	r3, 8007516 <__ascii_mbtowc+0x1e>
 8007502:	7813      	ldrb	r3, [r2, #0]
 8007504:	600b      	str	r3, [r1, #0]
 8007506:	7812      	ldrb	r2, [r2, #0]
 8007508:	1e10      	subs	r0, r2, #0
 800750a:	bf18      	it	ne
 800750c:	2001      	movne	r0, #1
 800750e:	b002      	add	sp, #8
 8007510:	4770      	bx	lr
 8007512:	4610      	mov	r0, r2
 8007514:	e7fb      	b.n	800750e <__ascii_mbtowc+0x16>
 8007516:	f06f 0001 	mvn.w	r0, #1
 800751a:	e7f8      	b.n	800750e <__ascii_mbtowc+0x16>

0800751c <__ascii_wctomb>:
 800751c:	4603      	mov	r3, r0
 800751e:	4608      	mov	r0, r1
 8007520:	b141      	cbz	r1, 8007534 <__ascii_wctomb+0x18>
 8007522:	2aff      	cmp	r2, #255	@ 0xff
 8007524:	d904      	bls.n	8007530 <__ascii_wctomb+0x14>
 8007526:	228a      	movs	r2, #138	@ 0x8a
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	4770      	bx	lr
 8007530:	700a      	strb	r2, [r1, #0]
 8007532:	2001      	movs	r0, #1
 8007534:	4770      	bx	lr
	...

08007538 <fiprintf>:
 8007538:	b40e      	push	{r1, r2, r3}
 800753a:	b503      	push	{r0, r1, lr}
 800753c:	4601      	mov	r1, r0
 800753e:	ab03      	add	r3, sp, #12
 8007540:	4805      	ldr	r0, [pc, #20]	@ (8007558 <fiprintf+0x20>)
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	f7ff fd3d 	bl	8006fc8 <_vfiprintf_r>
 800754e:	b002      	add	sp, #8
 8007550:	f85d eb04 	ldr.w	lr, [sp], #4
 8007554:	b003      	add	sp, #12
 8007556:	4770      	bx	lr
 8007558:	20000018 	.word	0x20000018

0800755c <abort>:
 800755c:	b508      	push	{r3, lr}
 800755e:	2006      	movs	r0, #6
 8007560:	f000 f82c 	bl	80075bc <raise>
 8007564:	2001      	movs	r0, #1
 8007566:	f7fa ff76 	bl	8002456 <_exit>

0800756a <_raise_r>:
 800756a:	291f      	cmp	r1, #31
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4605      	mov	r5, r0
 8007570:	460c      	mov	r4, r1
 8007572:	d904      	bls.n	800757e <_raise_r+0x14>
 8007574:	2316      	movs	r3, #22
 8007576:	6003      	str	r3, [r0, #0]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007580:	b112      	cbz	r2, 8007588 <_raise_r+0x1e>
 8007582:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007586:	b94b      	cbnz	r3, 800759c <_raise_r+0x32>
 8007588:	4628      	mov	r0, r5
 800758a:	f000 f831 	bl	80075f0 <_getpid_r>
 800758e:	4622      	mov	r2, r4
 8007590:	4601      	mov	r1, r0
 8007592:	4628      	mov	r0, r5
 8007594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007598:	f000 b818 	b.w	80075cc <_kill_r>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d00a      	beq.n	80075b6 <_raise_r+0x4c>
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	d103      	bne.n	80075ac <_raise_r+0x42>
 80075a4:	2316      	movs	r3, #22
 80075a6:	6003      	str	r3, [r0, #0]
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7e7      	b.n	800757c <_raise_r+0x12>
 80075ac:	2100      	movs	r1, #0
 80075ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075b2:	4620      	mov	r0, r4
 80075b4:	4798      	blx	r3
 80075b6:	2000      	movs	r0, #0
 80075b8:	e7e0      	b.n	800757c <_raise_r+0x12>
	...

080075bc <raise>:
 80075bc:	4b02      	ldr	r3, [pc, #8]	@ (80075c8 <raise+0xc>)
 80075be:	4601      	mov	r1, r0
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	f7ff bfd2 	b.w	800756a <_raise_r>
 80075c6:	bf00      	nop
 80075c8:	20000018 	.word	0x20000018

080075cc <_kill_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	@ (80075ec <_kill_r+0x20>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f7fa ff2c 	bl	8002436 <_kill>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d102      	bne.n	80075e8 <_kill_r+0x1c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	b103      	cbz	r3, 80075e8 <_kill_r+0x1c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	200005d8 	.word	0x200005d8

080075f0 <_getpid_r>:
 80075f0:	f7fa bf19 	b.w	8002426 <_getpid>

080075f4 <sqrtf>:
 80075f4:	b508      	push	{r3, lr}
 80075f6:	ed2d 8b02 	vpush	{d8}
 80075fa:	eeb0 8a40 	vmov.f32	s16, s0
 80075fe:	f000 f817 	bl	8007630 <__ieee754_sqrtf>
 8007602:	eeb4 8a48 	vcmp.f32	s16, s16
 8007606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760a:	d60c      	bvs.n	8007626 <sqrtf+0x32>
 800760c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800762c <sqrtf+0x38>
 8007610:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007618:	d505      	bpl.n	8007626 <sqrtf+0x32>
 800761a:	f7fe f9ad 	bl	8005978 <__errno>
 800761e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007622:	2321      	movs	r3, #33	@ 0x21
 8007624:	6003      	str	r3, [r0, #0]
 8007626:	ecbd 8b02 	vpop	{d8}
 800762a:	bd08      	pop	{r3, pc}
 800762c:	00000000 	.word	0x00000000

08007630 <__ieee754_sqrtf>:
 8007630:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007634:	4770      	bx	lr
	...

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
